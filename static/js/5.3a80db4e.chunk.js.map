{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/StickerPreview.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","loadContent","info","_this","props","stickers","store","FileStore","getStore","forEach","x","loadStickerContent","nextProps","nextState","nextContext","this","_this$props","classes","onSelect","onMouseDown","onMouseOver","title","items","map","react_default","a","createElement","className","classNames","stickerSetItem","key","sticker","id","data-sticker-id","onClick","Sticker","displaySize","STICKER_SMALL_DISPLAY_SIZE","blur","React","Component","withStyles","theme","backgroundColor","palette","background","paper","color","text","primary","width","height","padding","boxSizing","&:hover","type","borderRadius","StickersPicker","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","stickerSets","sets","result","promises","slicedSets","wrap","_context","prev","next","state","abrupt","TdLibController","send","@type","is_masks","sent","push","set_id","Promise","all","slice","setState","setsLength","length","stop","_x","_x2","apply","arguments","loadRemainingContent","loadInViewContent","scroll","scrollRef","current","inViewItems","item","itemsMap","get","node","ReactDOM","topBorder","scrollTop","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","console","log","loadedSets","has","set","loadStickerSetContent","handleScroll","_callee2","loadChunk","_this$state","date","concatSets","_context2","loadingChunk","scrollHeight","Date","now","finally","concat","getItems","loadPreviewContent","stickerId","find","then","previewStickerId","previewStickerEmojis","emojis","join","handleMouseOver","event","Number","target","dataset","mouseDown","mouseDownStickerId","onPreview","handleMouseDown","timestamp","showPreview","cancelSend","setTimeout","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","createRef","Map","position","debounce","_this$state2","_this2","_this$state3","clear","Components_ColumnMiddle_StickerSet","ref","el","onScroll","StickerPreview","emoji","prevProps","prevState","snapshot","STICKER_PREVIEW_DISPLAY_SIZE","EmojiPickerButton","onClientUpdateChange","update","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","EMOJI_PICKER_TIMEOUT_MS","reverse","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","switchPicker","handleEmojiClick","tab","handleStickersClick","stickersPickerRef","handleStickerSend","clientUpdate","handleStickerPreview","ApplicationStore","on","LocalizationStore","removeListener","t","i18n","search","notfound","skintext","categories","recent","people","nature","foods","activity","places","objects","symbols","flags","custom","dist_es","showSkinTones","dark","style","overflowX","stickersPicker","Components_ColumnMiddle_StickersPicker","Fragment","rel","href","IconButton_default","iconButton","aria-label","onMouseEnter","onMouseLeave","InsertEmoticon_default","pickerRoot","defineProperty","pickerRootOpened","Button_default","headerButton","emoji-picker-content-stickers","Components_ColumnMiddle_StickerPreview","enhance","compose","margin","flex","shape","boxShadow","shadows","bottom","display","withTheme","withTranslation"],"mappings":"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","file":"static/js/5.3a80db4e.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Sticker from '../Message/Media/Sticker';\nimport { loadStickerContent } from '../../Utils/File';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport './StickerSet.css';\n\nconst styles = theme => ({\n    title: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary\n    },\n    stickerSetItem: {\n        width: STICKER_SMALL_DISPLAY_SIZE,\n        height: STICKER_SMALL_DISPLAY_SIZE,\n        padding: 3,\n        boxSizing: 'border-box',\n        '&:hover': {\n            background: theme.palette.type === 'dark' ? '#303030' : '#f4f4f4',\n            borderRadius: 6\n        }\n    }\n});\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info } = this.props;\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        //this.loadContent();\n    }\n\n    loadContent = () => {\n        const { info } = this.props;\n        if (!info) return;\n\n        const { stickers } = info;\n        if (!stickers) return;\n\n        const store = FileStore.getStore();\n        stickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    render() {\n        const { classes, info, onSelect, onMouseDown, onMouseOver } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map(x => (\n            <div\n                className={classNames('sticker-set-item', classes.stickerSetItem)}\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseDown={onMouseDown}\n                onMouseOver={onMouseOver}>\n                <Sticker\n                    key={x.sticker.id}\n                    className='sticker-set-item-sticker'\n                    sticker={x}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    blur={false}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className={classNames('sticker-set-title', classes.title)}>\n                    <span>{title}</span>\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(StickerSet);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport StickerSet from './StickerSet';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { debounce } from '../../Utils/Common';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            stickerSets: null,\n            sets: [],\n            position: 0\n        };\n\n        this.loadInViewContent = debounce(this.loadInViewContent, 100);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        return false;\n    }\n\n    loadContent = async (stickerSets, sets) => {\n        if (this.state.stickerSets) return;\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        this.setState({ stickerSets, sets: slicedSets });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadRemainingContent = () => {\n        return;\n        const { stickerSets } = this.state;\n        if (!stickerSets) return;\n\n        const remainingItems = [];\n        stickerSets.sets.forEach(x => {\n            if (!this.loadedSets.has(x.id)) {\n                remainingItems.push(x);\n            }\n        });\n\n        console.log('Stickers.loadRemainingContent', remainingItems);\n        remainingItems.slice(0, 10).forEach(x => {\n            this.loadedSets.set(x.id, x.id);\n\n            const store = FileStore.getStore();\n            loadStickerSetContent(store, x);\n        });\n    };\n\n    loadInViewContent = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const padding = 800;\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        console.log('Stickers.inViewItems', inViewItems);\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                console.log('Stickers.loadStickerSetContent', x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    handleScroll = async () => {\n        this.loadInViewContent();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const date = Date.now();\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n        this.setsLength += result.length;\n        console.log('StickersPicker.handleScroll', Date.now() - date, sets.concat(result), stickerSets);\n        let concatSets = sets.concat(result);\n        // if (concatSets.length > 10) {\n        //     concatSets = concatSets.slice(5);\n        // }\n        this.setState({ sets: concatSets });\n    };\n\n    getItems = sets => {\n        const stickers = [];\n        sets.forEach(set => {\n            set.stickers.forEach(sticker => {\n                stickers.push(sticker);\n            });\n        });\n\n        return stickers;\n    };\n\n    loadPreviewContent = stickerId => {\n        const { sets } = this.state;\n        const items = this.getItems(sets);\n\n        const sticker = items.find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n\n        TdLibController.send({\n            '@type': 'getStickerEmojis',\n            sticker: {\n                '@type': 'inputFileId',\n                id: stickerId\n            }\n        }).then(result => {\n            const { previewStickerId } = this.state;\n            if (previewStickerId === stickerId) {\n                this.setState({\n                    previewStickerEmojis: result.emojis.join(' ')\n                });\n            }\n        });\n\n        // const preloadStickers = this.getNeighborStickers(stickerId, items, stickersPerRow);\n        // preloadStickers.forEach(x => {\n        //     loadStickerContent(store, x, null);\n        // });\n    };\n\n    handleMouseOver = event => {\n        const stickerId = Number(event.target.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { sets } = this.state;\n\n        const sticker = this.getItems(sets).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.target.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { sets } = this.state;\n\n                    const sticker = this.getItems(sets).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    render() {\n        const { stickerSets, sets } = this.state;\n        if (!stickerSets) return null;\n\n        if (!sets) return null;\n        if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseOver={this.handleMouseOver}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker'>\n                <div className='stickers-picker-header' />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nexport default StickersPicker;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Sticker from '../Message/Media/Sticker';\nimport { STICKER_PREVIEW_DISPLAY_SIZE } from '../../Constants';\nimport './StickerPreview.css';\n\nclass StickerPreview extends React.Component {\n    state = {\n        emoji: null\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.sticker !== prevProps.sticker) {\n        }\n    }\n\n    render() {\n        const { sticker } = this.props;\n        const { emoji } = this.state;\n\n        if (!sticker) return null;\n\n        return (\n            <div className='sticker-preview'>\n                <div className='sticker-preview-emoji'>{emoji}</div>\n                <Sticker sticker={sticker} displaySize={STICKER_PREVIEW_DISPLAY_SIZE} />\n            </div>\n        );\n    }\n}\n\nStickerPreview.propTypes = {\n    sticker: PropTypes.object.isRequired\n};\n\nexport default StickerPreview;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickersPicker from './StickersPicker';\nimport { EMOJI_PICKER_TIMEOUT_MS, STICKER_PREVIEW_DISPLAY_SIZE } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\nimport { loadStickerSetContent } from '../../Utils/File';\nimport StickerPreview from './StickerPreview';\n\nconst styles = theme => ({\n    iconButton: {\n        margin: '8px 0px'\n    },\n    headerButton: {\n        borderRadius: 0,\n        flex: '50%'\n    },\n    pickerRoot: {\n        width: 338,\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary,\n        borderRadius: theme.shape.borderRadius,\n        boxShadow: theme.shadows[8],\n        position: 'absolute',\n        bottom: 80,\n        display: 'none'\n    },\n    pickerRootOpened: {\n        display: 'block'\n    }\n});\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.removeListener('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const store = FileStore.getStore();\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    switchPicker = () => {\n        this.updatePicker(!this.state.open);\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        this.stickersPickerRef.current.loadContent(this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { classes, theme, t } = this.props;\n        const { open, tab, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className={classes.iconButton}\n                    aria-label='Emoticon'\n                    onClick={this.switchPicker}\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames(classes.pickerRoot, { [classes.pickerRootOpened]: open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    <StickerPreview sticker={sticker} />\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}