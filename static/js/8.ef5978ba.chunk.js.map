{"version":3,"sources":["Components/Tile/DialogTitleControl.js","Components/Tile/DialogStatusControl.js","Components/Tile/ChatControl.js","Components/Additional/NotificationTimer.js","Components/ColumnMiddle/MainMenuButton.js","Components/Tile/UserStatusControl.js","Components/Tile/UserControl.js","Components/ColumnRight/ChatDetailsHeader.js","Components/ColumnRight/NotificationsListItem.js","Components/ColumnRight/MoreListItem.js","Components/ColumnRight/ChatDetails.js","Components/ColumnRight/GroupsInCommonHeader.js","Components/ColumnRight/GroupsInCommon.js","Components/ColumnRight/SharedMediaHeaderControl.js","Components/ColumnRight/SharedMedia.js","Components/ColumnRight/ChatInfo.js"],"names":["DialogTitleControl","onFastUpdatingComplete","update","_this","forceUpdate","onUpdateChatTitle","chatId","props","chat_id","nextProps","nextState","this","t","ChatStore","on","removeListener","_this$props","showSavedMessages","title","getChatTitle","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","React","Component","defaultProps","withTranslation","DialogStatusControl","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onUpdateUserStatus","chat","get","type","updateSubtitle","fullInfo","BasicGroupStore","getFullInfo","basic_group_id","members","find","x","user_id","setState","subtitle","getChatSubtitleWithoutTyping","id","isAccent","isAccentChatSubtitleWithoutTyping","onUpdateUserFullInfo","onUpdateBasicGroupFullInfo","onUpdateSupergroupFullInfo","supergroup_id","onUpdateBasicGroup","basic_group","onUpdateSupergroup","supergroup","state","prevChatId","_this$state","UserStore","SupergroupStore","classes","_this$state2","react_default","classNames","statusAccentSubtitle","statusSubtitle","withStyles","theme","color","palette","text","secondary","primary","dark","withTheme","ChatControl","handleClick","onSelect","_this$props2","onTileSelect","showStatus","onClick","ChatTileControl","Components_Tile_DialogStatusControl","NotificationTimer","_Users_evgeny_telegram_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_evgeny_telegram_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_evgeny_telegram_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","handleTimer","now","Date","seconds","expire","value","timeout","timerId","clearInterval","startTime","setMilliseconds","getMilliseconds","setInterval","_material_ui_core_es_Typography_Typography__WEBPACK_IMPORTED_MODULE_6__","toFixed","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_7___default","size","variant","menuAnchorOrigin","vertical","horizontal","menuTransformOrigin","LeaveChatDialog","getDeleteDialogText","concat","is_channel","getChatShortTitle","onClose","other","_Users_evgeny_telegram_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_8___default","_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_15___default","assign","transitionDuration","aria-labelledby","_material_ui_core_DialogTitle__WEBPACK_IMPORTED_MODULE_14___default","_material_ui_core_DialogContent__WEBPACK_IMPORTED_MODULE_17___default","_Tile_ChatTileControl__WEBPACK_IMPORTED_MODULE_22__","_material_ui_core_DialogContentText__WEBPACK_IMPORTED_MODULE_16___default","_material_ui_core_DialogActions__WEBPACK_IMPORTED_MODULE_18___default","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_13___default","autoFocus","ClearHistoryDialog","MainMenuButton","_this2","_Users_evgeny_telegram_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","_Users_evgeny_telegram_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","_Users_evgeny_telegram_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","handleButtonClick","event","anchorEl","currentTarget","handleMenuClose","handleChatInfo","setTimeout","openChatDetails","handleClearHistory","openClearHistory","handleClearHistoryContinue","result","ApplicationStore","getChatId","request","@type","remove_from_chat_list","handleScheduledAction","handleLeave","openDelete","handleLeaveContinue","message","getLeaveChatNotification","isPrivateChat","clientUpdateType","key","action","_ref","_Users_evgeny_telegram_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_evgeny_telegram_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","wrap","_context","prev","next","TdLibController","send","clientUpdate","inProgress","finish","stop","apply","arguments","_this2$props","enqueueSnackbar","addScheduledAction","NOTIFICATION_AUTO_HIDE_DURATION_MS","autoHideDuration","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_9___default","_Additional_NotificationTimer__WEBPACK_IMPORTED_MODULE_23__","removeScheduledAction","getLeaveChatTitle","clearHistory","canClearHistory","deleteChat","canDeleteChat","leaveChatTitle","Fragment","aria-owns","aria-haspopup","menuIconButton","aria-label","_material_ui_icons_MoreVert__WEBPACK_IMPORTED_MODULE_10___default","_material_ui_core_Menu__WEBPACK_IMPORTED_MODULE_11___default","open","Boolean","getContentAnchorEl","disableAutoFocusItem","disableRestoreFocus","anchorOrigin","transformOrigin","_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_12___default","enhance","compose","margin","withSnackbar","UserStatusControl","userId","user","status","getUserStatus","isUserOnline","prevUserId","userStatusSubtitle","defineProperty","accent-color","userStatusAccentSubtitle","UserControl","fullName","getUserFullName","UserTileControl","Components_Tile_UserStatusControl","ChatDetailsHeader","backButton","info","isChannelChat","IconButton_default","leftIconButton","ArrowBack_default","rightIconButton","Close_default","NotificationsListItem","isMuted","ListItem_default","button","listItem","handleSetChatNotifications","ListItemIcon_default","Notifications_default","NotificationsActive_default","ListItemText_default","Typography_default","noWrap","ListItemSecondaryAction_default","Switch_default","onChange","checked","NotificationsControl","padding","MoreListItem","handleMoreClick","openMore","handleSendMessage","currentChatId","setChatId","handleBlock","isUserBlocked","isGroup","isGroupChat","isBlocked","isMember","isChatMember","isChannel","MoreHoriz_default","ExpandLess_default","ExpandMore_default","Collapse_default","in","unmountOnExit","List_default","component","disablePadding","inset","ChatDetails","handleSelectChat","has","getGroupsInCommon","loadChatContents","store","FileStore","getStore","loadChatsContent","getGroupChatMembers","map","loadUsersContent","getChatFullInfo","asyncToGenerator","regenerator_default","abrupt","isMeChat","getChatUserId","offset_chat_id","limit","sent","hasGroupsInCommon","chat_ids","length","handleUsernameHint","username","getChatUsername","telegramUrlOption","OptionStore","usernameLink","copy","close","handlePhoneHint","_this$props3","phoneNumber","getChatPhoneNumber","formatPhoneNumber","handleHeaderClick","chatDetailsListRef","current","scrollTop","handleOpenViewer","photo","setProfileMediaViewerContent","handleOpenChat","_this$props4","popup","openChat","getContentHeight","clientHeight","createRef","Map","prevProps","prevState","list","scrollHeight","offsetHeight","snapshot","console","log","_this$props5","_this$props6","onOpenSharedMedia","onOpenGroupsInCommon","Components_ColumnRight_ChatDetailsHeader","ref","bio","getChatBio","isMe","users","forEach","member","set","push","items","sort","y","getUserStatusOrder","Components_Tile_UserControl","handleSelectUser","content","AlternateEmail_default","Call_default","ErrorOutline_default","style","whiteSpace","wordWrap","Divider_default","ColumnRight_NotificationsListItem","ColumnRight_MoreListItem","toUpperCase","disabled","Photo_default","withSaveRef","closeIconButton","nested","spacing","unit","withRestoreRef","GroupsInCommonHeader","backIconButton","GroupsInCommon","handleSelect","chatIds","then","_this3","minHeight","chats","Components_ColumnRight_GroupsInCommonHeader","SharedMediaHeaderControl","SharedMedia","handleChange","Components_ColumnRight_SharedMediaHeaderControl","Tabs_default","indicatorColor","textColor","scrollable","scrollButtons","fullWidth","Tab_default","label","minWidth","ChatInfo","onClientUpdateChatId","nextChatId","userChatId","openSharedMedia","openGroupsInCommon","handelOpenSharedMedia","handleCloseSharedMedia","handleOpenGroupsInCommon","height","handleCloseGroupsInCommon","handleCloseChatDetails","changeChatDetailsVisibility","force","_x","detailsRef","dialogChatId","Components_ColumnRight_SharedMedia","Components_ColumnRight_GroupsInCommon","Components_ColumnRight_ChatDetails","borderColor","right-column","borderStyle"],"mappings":"8KAcMA,qNAuBFC,uBAAyB,SAAAC,GACrBC,EAAKC,iBAGTC,kBAAoB,SAAAH,GAAU,IAClBI,EAAWH,EAAKI,MAAhBD,OAEJJ,EAAOM,UAAYF,GAEvBH,EAAKC,oGA/BaK,EAAWC,GAC7B,OAAID,EAAUH,SAAWK,KAAKJ,MAAMD,QAIhCG,EAAUG,IAAMD,KAAKJ,MAAMK,8CAQ/BC,IAAUC,GAAG,mCAAoCH,KAAKV,wBACtDY,IAAUC,GAAG,kBAAmBH,KAAKN,kEAIrCQ,IAAUE,eAAe,mCAAoCJ,KAAKV,wBAClEY,IAAUE,eAAe,kBAAmBJ,KAAKN,oDAe5C,IAAAW,EACoCL,KAAKJ,MAAtCK,EADHI,EACGJ,EAAGN,EADNU,EACMV,OAAQW,EADdD,EACcC,kBAEbC,EAAQC,YAAab,EAAQW,EAAmBL,GAEtD,OAAOQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBL,UAxCbM,IAAMC,YAiDvCzB,EAAmB0B,aAAe,CAC9BT,mBAAmB,GAGRU,kBAAkB3B,6LCzC3B4B,sBACF,SAAAA,EAAYrB,GAAO,IAAAJ,EAAA0B,OAAAC,EAAA,EAAAD,CAAAlB,KAAAiB,IACfzB,EAAA0B,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAtB,KAAMJ,KA8DV2B,mBAAqB,SAAAhC,GAAU,IACnBI,EAAWH,EAAKI,MAAhBD,OACF6B,EAAOtB,IAAUuB,IAAI9B,GAC3B,GAAK6B,GACAA,EAAKE,KAAV,CAEA,IAAIC,GAAiB,EACrB,OAAQH,EAAKE,KAAK,UACd,IAAK,qBACD,IAAME,EAAWC,IAAgBC,YAAYN,EAAKE,KAAKK,gBACvD,GAAIH,GAAYA,EAASI,QACNJ,EAASI,QAAQC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,UAAY5C,EAAO4C,YAE3DR,GAAiB,GAGzB,MAEJ,IAAK,kBAML,IAAK,iBACGH,EAAKE,KAAKS,UAAY5C,EAAO4C,UAC7BR,GAAiB,GASzBA,GACAnC,EAAKmC,eAAeH,KAnGThC,EAuGnBmC,eAAiB,SAAAH,GACbhC,EAAK4C,SAAS,CACVC,SAAUC,YAA6Bd,EAAKe,IAC5CC,SAAUC,YAAkCjB,EAAKe,OA1GtC/C,EA8GnBkD,qBAAuB,SAAAnD,GAAU,IACrBI,EAAWH,EAAKI,MAAhBD,OACF6B,EAAOtB,IAAUuB,IAAI9B,GACtB6B,KAGDA,EAAKE,MACmB,oBAAvBF,EAAKE,KAAK,UAAyD,mBAAvBF,EAAKE,KAAK,UACvDF,EAAKE,KAAKS,UAAY5C,EAAO4C,SAE7B3C,EAAKmC,eAAeH,KAxHThC,EA4HnBmD,2BAA6B,SAAApD,GAAU,IAC3BI,EAAWH,EAAKI,MAAhBD,OACF6B,EAAOtB,IAAUuB,IAAI9B,GACtB6B,GAGDA,EAAKE,MACkB,uBAAvBF,EAAKE,KAAK,UACVF,EAAKE,KAAKK,iBAAmBxC,EAAOwC,gBAEpCvC,EAAKmC,eAAeH,IAtIThC,EA0InBoD,2BAA6B,SAAArD,GAAU,IAC3BI,EAAWH,EAAKI,MAAhBD,OACF6B,EAAOtB,IAAUuB,IAAI9B,GACtB6B,GAGDA,EAAKE,MACkB,uBAAvBF,EAAKE,KAAK,UACVF,EAAKE,KAAKmB,gBAAkBtD,EAAOsD,eAEnCrD,EAAKmC,eAAeH,IApJThC,EAwJnBsD,mBAAqB,SAAAvD,GAAU,IACnBI,EAAWH,EAAKI,MAAhBD,OACF6B,EAAOtB,IAAUuB,IAAI9B,GACtB6B,GAGDA,EAAKE,MACkB,uBAAvBF,EAAKE,KAAK,UACVF,EAAKE,KAAKK,iBAAmBxC,EAAOwD,YAAYR,IAEhD/C,EAAKmC,eAAeH,IAlKThC,EAsKnBwD,mBAAqB,SAAAzD,GAAU,IACnBI,EAAWH,EAAKI,MAAhBD,OACF6B,EAAOtB,IAAUuB,IAAI9B,GACtB6B,GAGDA,EAAKE,MACkB,uBAAvBF,EAAKE,KAAK,UACVF,EAAKE,KAAKmB,gBAAkBtD,EAAO0D,WAAWV,IAE9C/C,EAAKmC,eAAeH,IAhLT,IAGP7B,EAAWH,EAAKI,MAAhBD,OAHO,OAKfH,EAAK0D,MAAQ,CACTC,WAAYxD,EACZ0C,SAAUC,YAA6B3C,GACvC6C,SAAUC,YAAkC9C,IARjCH,qFA0BGM,EAAWC,GAAW,IAChCJ,EAAWK,KAAKJ,MAAhBD,OADgCyD,EAETpD,KAAKkD,MAA5Bb,EAFgCe,EAEhCf,SAAUG,EAFsBY,EAEtBZ,SAElB,OAAI1C,EAAUH,SAAWA,IAIrBI,EAAUsC,WAAaA,GAIvBtC,EAAUyC,WAAaA,+CAQ3Ba,IAAUlD,GAAG,mBAAoBH,KAAKuB,oBACtCM,IAAgB1B,GAAG,mBAAoBH,KAAK8C,oBAC5CQ,IAAgBnD,GAAG,mBAAoBH,KAAKgD,oBAC5CK,IAAUlD,GAAG,qBAAsBH,KAAK0C,sBACxCb,IAAgB1B,GAAG,2BAA4BH,KAAK2C,4BACpDW,IAAgBnD,GAAG,2BAA4BH,KAAK4C,2EAIpDS,IAAUjD,eAAe,mBAAoBJ,KAAKuB,oBAClDM,IAAgBzB,eAAe,mBAAoBJ,KAAK8C,oBACxDQ,IAAgBlD,eAAe,mBAAoBJ,KAAKgD,oBACxDK,IAAUjD,eAAe,qBAAsBJ,KAAK0C,sBACpDb,IAAgBzB,eAAe,2BAA4BJ,KAAK2C,4BAChEW,IAAgBlD,eAAe,2BAA4BJ,KAAK4C,6DAwH3D,IACGW,EAAYvD,KAAKJ,MAAjB2D,QADHC,EAE0BxD,KAAKkD,MAA5Bb,EAFHmB,EAEGnB,SAAUG,EAFbgB,EAEahB,SAElB,OACIiB,EAAA/C,EAAAC,cAAA,OACIC,UAAW8C,IACP,gBACAlB,EAAWe,EAAQI,qBAAuBJ,EAAQK,iBAErDvB,sDAlLmBzC,EAAOsD,GACnC,GAAItD,EAAMD,SAAWuD,EAAMC,WAAY,KAC3BxD,EAAWC,EAAXD,OAER,MAAO,CACHwD,WAAYxD,EACZ0C,SAAUC,YAA6B3C,GACvC6C,SAAUC,YAAkC9C,IAIpD,OAAO,YAxBmBkB,IAAMC,YAqMzB+C,MA9MA,SAAAC,GAAK,MAAK,CACrBF,eAAgB,CACZG,MAA8B,SAAvBD,EAAME,QAAQtC,KAAkBoC,EAAME,QAAQC,KAAKC,UAAY,WAE1EP,qBAAsB,CAClBI,MAAOD,EAAME,QAAQG,QAAQC,KAAO,gBAyMV,CAAEC,WAAW,GAAhCR,CAAwC5C,GChNjDqD,sBACF,SAAAA,EAAY1E,GAAO,IAAAJ,EAAA,OAAA0B,OAAAC,EAAA,EAAAD,CAAAlB,KAAAsE,IACf9E,EAAA0B,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAoD,GAAAhD,KAAAtB,KAAMJ,KAaV2E,YAAc,WAAM,IAAAlE,EACab,EAAKI,MAA1BD,EADQU,EACRV,OAAQ6E,EADAnE,EACAmE,SAChB,GAAKA,EAAL,CAEA,IAAMhD,EAAOtB,IAAUuB,IAAI9B,GACtB6B,GAELgD,EAAShD,KArBMhC,qFAUGM,EAAWC,GAC7B,OAAOD,EAAUH,SAAWK,KAAKJ,MAAMD,wCAalC,IAAA8E,EAC2DzE,KAAKJ,MAA7DD,EADH8E,EACG9E,OAAQ+E,EADXD,EACWC,aAAcC,EADzBF,EACyBE,WAAYrE,EADrCmE,EACqCnE,kBAE1C,OACImD,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,OAAOgE,QAAS5E,KAAKuE,aAChCd,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,gBACX6C,EAAA/C,EAAAC,cAACkE,EAAA,EAAD,CAAiBlF,OAAQA,EAAQ6E,SAAUE,EAAcpE,kBAAmBA,IAC5EmD,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,wBACX6C,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,kBACX6C,EAAA/C,EAAAC,cAACtB,EAAA,EAAD,CAAoBM,OAAQA,EAAQW,kBAAmBA,KAE1DqE,IAAerE,GACZmD,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,mBACX6C,EAAA/C,EAAAC,cAACmE,EAAD,CAAqBnF,OAAQA,eAtCnCkB,IAAMC,YAwDhCwD,EAAYvD,aAAe,CACvBT,mBAAmB,EACnBqE,YAAY,GAGDL,8HC/DTS,sBACF,SAAAA,EAAYnF,GAAO,IAAAJ,EAAA,OAAA0B,OAAA8D,EAAA,EAAA9D,CAAAlB,KAAA+E,IACfvF,EAAA0B,OAAA+D,EAAA,EAAA/D,CAAAlB,KAAAkB,OAAAgE,EAAA,EAAAhE,CAAA6D,GAAAzD,KAAAtB,KAAMJ,KAeVuF,YAAc,WACV,IAAMC,EAAM,IAAIC,KACVC,EAAU9F,EAAK+F,OAASH,EACxBI,EAAQ,IAAOF,EAAU9F,EAAKI,MAAM6F,QAAW,IAErDjG,EAAK4C,SAAS,CACVkD,QAASA,EAAU,EAAIA,EAAU,EACjCE,MAAOA,EAAQ,IAAM,IAAMA,IAG3BJ,GAAO5F,EAAK+F,QACR/F,EAAKkG,UACLC,cAAcnG,EAAKkG,SACnBlG,EAAKkG,QAAU,OA1BvBlG,EAAK0D,MAAQ,CACToC,QAAS9F,EAAKI,MAAM6F,QAAU,IAC9BD,MAAO,GALIhG,mFAUfQ,KAAK4F,UAAY,IAAIP,KACrBrF,KAAKuF,OAASvF,KAAK4F,UACnB5F,KAAKuF,OAAOM,gBAAgB7F,KAAKuF,OAAOO,kBAAoB9F,KAAKJ,MAAM6F,SACvEzF,KAAK0F,QAAUK,YAAY/F,KAAKmF,YAAa,oDAsBzCnF,KAAK0F,UACLC,cAAc3F,KAAK0F,SACnB1F,KAAK0F,QAAU,uCAId,IAAAtC,EACsBpD,KAAKkD,MAAxBsC,EADHpC,EACGoC,MAAOF,EADVlC,EACUkC,QAEf,OACI7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAAYjC,MAAM,YAAYuB,EAAU,KAAMW,YAElDxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAACuF,EAAAxF,EAAD,CAAkByF,KAAM,GAAIX,MAAO,IAAMA,EAAOY,QAAQ,oBAnD5CvF,IAAMC,YA8DvBiE,ydCtCTsB,UAAmB,CACrBC,SAAU,SACVC,WAAY,UAGVC,EAAsB,CACxBF,SAAU,MACVC,WAAY,SAGVE,6MACFC,oBAAsB,SAAA/G,GAClB,IAAM6B,EAAOtB,IAAUuB,IAAI9B,GAC3B,IAAK6B,EAAM,OAAO,KAClB,IAAKA,EAAKE,KAAM,OAAO,KAEvB,OAAQF,EAAKE,KAAK,UACd,IAAK,qBACD,8CAAAiF,OAA+CnF,EAAKjB,MAApD,KAEJ,IAAK,qBACD,IAAM0C,EAAaK,IAAgB7B,IAAID,EAAKE,KAAKmB,eACjD,OAAII,EACOA,EAAW2D,WAAX,0CAAAD,OACyCnF,EAAKjB,MAD9C,6CAAAoG,OAEuCnF,EAAKjB,MAF5C,KAKJ,KAEX,IAAK,kBACL,IAAK,iBACD,mDAAAoG,OAAoDE,YAAkBlH,GAAtE,KAIR,OAAO,8EAGF,IAAAU,EACiCL,KAAKJ,MAAnCkH,EADHzG,EACGyG,QAASnH,EADZU,EACYV,OAAWoH,EADvB7F,OAAA8F,EAAA,EAAA9F,CAAAb,EAAA,sBAGL,OACI4G,EAAAvG,EAAAC,cAACuG,EAAAxG,EAADQ,OAAAiG,OAAA,CACIC,mBAAoB,EACpBN,QAAS,kBAAMA,GAAQ,IACvBO,kBAAgB,uBACZN,GACJE,EAAAvG,EAAAC,cAAC2G,EAAA5G,EAAD,CAAa6B,GAAG,uBAAuBsE,YAAkBlH,IACzDsH,EAAAvG,EAAAC,cAAC4G,EAAA7G,EAAD,KACIuG,EAAAvG,EAAAC,cAAA,OAAKC,UAAU,yBACXqG,EAAAvG,EAAAC,cAAC6G,EAAA,EAAD,CAAiB7H,OAAQA,IACzBsH,EAAAvG,EAAAC,cAAC8G,EAAA/G,EAAD,CAAmB6B,GAAG,6BACjBvC,KAAK0G,oBAAoB/G,MAItCsH,EAAAvG,EAAAC,cAAC+G,EAAAhH,EAAD,KACIuG,EAAAvG,EAAAC,cAACgH,EAAAjH,EAAD,CAAQkE,QAAS,kBAAMkC,GAAQ,IAAQ/C,MAAM,WAA7C,UAGAkD,EAAAvG,EAAAC,cAACgH,EAAAjH,EAAD,CAAQkE,QAAS,kBAAMkC,GAAQ,IAAO/C,MAAM,UAAU6D,WAAS,GAA/D,eAnDU/G,IAAMC,WA4D9B+G,mLACO,IAAApD,EACiCzE,KAAKJ,MAAnCkH,EADHrC,EACGqC,QAASnH,EADZ8E,EACY9E,OAAWoH,EADvB7F,OAAA8F,EAAA,EAAA9F,CAAAuD,EAAA,sBAGL,OACIwC,EAAAvG,EAAAC,cAACuG,EAAAxG,EAADQ,OAAAiG,OAAA,CACIC,mBAAoB,EACpBN,QAAS,kBAAMA,GAAQ,IACvBO,kBAAgB,uBACZN,GACJE,EAAAvG,EAAAC,cAAC2G,EAAA5G,EAAD,CAAa6B,GAAG,uBAAuBsE,YAAkBlH,IACzDsH,EAAAvG,EAAAC,cAAC4G,EAAA7G,EAAD,KACIuG,EAAAvG,EAAAC,cAAA,OAAKC,UAAU,yBACXqG,EAAAvG,EAAAC,cAAC6G,EAAA,EAAD,CAAiB7H,OAAQA,IACzBsH,EAAAvG,EAAAC,cAAC8G,EAAA/G,EAAD,CAAmB6B,GAAG,6BAAtB,0CAKR0E,EAAAvG,EAAAC,cAAC+G,EAAAhH,EAAD,KACIuG,EAAAvG,EAAAC,cAACgH,EAAAjH,EAAD,CAAQkE,QAAS,kBAAMkC,GAAQ,IAAQ/C,MAAM,WAA7C,UAGAkD,EAAAvG,EAAAC,cAACgH,EAAAjH,EAAD,CAAQkE,QAAS,kBAAMkC,GAAQ,IAAO/C,MAAM,UAAU6D,WAAS,GAA/D,eAvBa/G,IAAMC,WAgCjCgH,cACF,SAAAA,EAAYlI,GAAO,IAAAmI,EAAA,OAAA7G,OAAA8G,EAAA,EAAA9G,CAAAlB,KAAA8H,IACfC,EAAA7G,OAAA+G,EAAA,EAAA/G,CAAAlB,KAAAkB,OAAAgH,EAAA,EAAAhH,CAAA4G,GAAAxG,KAAAtB,KAAMJ,KASVuI,kBAAoB,SAAAC,GAChBL,EAAK3F,SAAS,CAAEiG,SAAUD,EAAME,iBAXjBP,EAcnBQ,gBAAkB,WACdR,EAAK3F,SAAS,CAAEiG,SAAU,QAfXN,EAkBnBS,eAAiB,WACbT,EAAKQ,kBACLE,WAAW,kBAAMV,EAAKnI,MAAM8I,mBAAmB,MApBhCX,EAuBnBY,mBAAqB,WACjBZ,EAAKQ,kBAELR,EAAK3F,SAAS,CAAEwG,kBAAkB,KA1BnBb,EA6BnBc,2BAA6B,SAAAC,GAGzB,GAFAf,EAAK3F,SAAS,CAAEwG,kBAAkB,IAE7BE,EAAL,CAEA,IAAMnJ,EAASoJ,IAAiBC,YAE1BC,EAAU,CACZC,QAAS,oBACTrJ,QAASF,EACTwJ,uBAAuB,GAG3BpB,EAAKqB,sBAAsBzJ,EAAQ,2BAPnB,mBAOwDsJ,KA1CzDlB,EA6CnBsB,YAAc,WACVtB,EAAKQ,kBAELR,EAAK3F,SAAS,CAAEkH,YAAY,KAhDbvB,EAmDnBwB,oBAAsB,SAAAT,GAGlB,GAFAf,EAAK3F,SAAS,CAAEkH,YAAY,IAEvBR,EAAL,CAEA,IAAMnJ,EAASoJ,IAAiBC,YAC1BQ,EAAUzB,EAAK0B,yBAAyB9J,GACxCsJ,EAAUS,YAAc/J,GACxB,CAAEuJ,QAAS,oBAAqBrJ,QAASF,EAAQwJ,uBAAuB,GACxE,CAAED,QAAS,YAAarJ,QAASF,GAEvCoI,EAAKqB,sBAAsBzJ,EAAQ,wBAAyB6J,EAASP,KA9DtDlB,EAiEnBqB,sBAAwB,SAACzJ,EAAQgK,EAAkBH,EAASP,GACxD,GAAKU,EAAL,CAEA,IAAMC,EAAG,GAAAjD,OAAMgD,EAAN,YAAAhD,OAAiChH,GACpCkK,EAAM,eAAAC,EAAA5I,OAAA6I,EAAA,EAAA7I,CAAA8I,EAAAtJ,EAAAuJ,KAAG,SAAAC,IAAA,OAAAF,EAAAtJ,EAAAyJ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEDC,IAAgBC,KAAKvB,GAFpB,cAAAmB,EAAAC,KAAA,EAIPE,IAAgBE,aAAa,CAAEvB,QAASS,EAAkBhK,OAAQA,EAAQ+K,YAAY,IAJ/EN,EAAAO,OAAA,2BAAAP,EAAAQ,SAAAV,EAAA,oBAAH,yBAAAJ,EAAAe,MAAA7K,KAAA8K,YAAA,GAJwDC,EAe/BhD,EAAKnI,MAAlCoL,EAf4DD,EAe5DC,gBAf4DD,EAe3CxH,QACzB,GAAKyH,EAAL,CAGIjC,IAAiBkC,mBAAmBrB,EAAKsB,IAAoCrB,EARlE,WACXU,IAAgBE,aAAa,CAAEvB,QAASS,EAAkBhK,OAAQA,EAAQ+K,YAAY,QAQtFH,IAAgBE,aAAa,CAAEvB,QAASS,EAAkBhK,OAAQA,EAAQ+K,YAAY,IACtFM,EAAgBxB,EAAS,CACrB2B,iBAAkBD,IAAqC,IACvDrB,OAAQ,CACJ5C,EAAAvG,EAAAC,cAACyK,EAAA1K,EAAD,CAAYkJ,IAAI,WAAW7F,MAAM,UAAUnD,UAAU,mBACjDqG,EAAAvG,EAAAC,cAAC0K,EAAA,EAAD,CAAmB5F,QAASyF,OAEhCjE,EAAAvG,EAAAC,cAACgH,EAAAjH,EAAD,CACIkJ,IAAI,OACJ7F,MAAM,UACNoC,KAAK,QACLvB,QAAS,kBAAMmE,IAAiBuC,sBAAsB1B,KAJ1D,eA5FG7B,EAwGnBwD,kBAAoB,SAAA5L,GAChB,IAAM6B,EAAOtB,IAAUuB,IAAI9B,GAC3B,IAAK6B,EAAM,OAAO,KAClB,IAAKA,EAAKE,KAAM,OAAO,KAEvB,OAAQF,EAAKE,KAAK,UACd,IAAK,qBACD,MAAO,kBAEX,IAAK,qBACD,IAAMuB,EAAaK,IAAgB7B,IAAID,EAAKE,KAAKmB,eACjD,OAAII,EACOA,EAAW2D,WAAa,gBAAkB,cAG9C,KAEX,IAAK,kBACL,IAAK,iBACD,MAAO,sBAIf,OAAO,MA/HQmB,EAkInB0B,yBAA2B,SAAA9J,GACvB,IAAM6B,EAAOtB,IAAUuB,IAAI9B,GAC3B,IAAK6B,EAAM,MAAO,eAClB,IAAKA,EAAKE,KAAM,MAAO,eAEvB,OAAQF,EAAKE,KAAK,UACd,IAAK,qBACD,MAAO,eAEX,IAAK,qBACD,IAAMuB,EAAaK,IAAgB7B,IAAID,EAAKE,KAAKmB,eACjD,OAAII,EACOA,EAAW2D,WAAa,eAAiB,aAG7C,eAEX,IAAK,kBACL,IAAK,iBACD,MAAO,eAIf,MAAO,gBAtJPmB,EAAK7E,MAAQ,CACTmF,SAAU,KACViB,YAAY,EACZV,kBAAkB,GANPb,wEA4JV,IACGxE,EAAYvD,KAAKJ,MAAjB2D,QADHH,EAE8CpD,KAAKkD,MAAhDmF,EAFHjF,EAEGiF,SAAUiB,EAFblG,EAEakG,WAAYV,EAFzBxF,EAEyBwF,iBAExBjJ,EAASoJ,IAAiBC,YAC1BwC,EAAeC,YAAgB9L,GAC/B+L,EAAaC,YAAchM,GAC3BiM,EAAiB5L,KAAKuL,kBAAkB5L,GAE9C,OACIsH,EAAAvG,EAAAC,cAAAsG,EAAAvG,EAAAmL,SAAA,KACI5E,EAAAvG,EAAAC,cAACyK,EAAA1K,EAAD,CACIoL,YAAWzD,EAAW,cAAgB,KACtC0D,gBAAc,OACdnL,UAAW2C,EAAQyI,eACnBC,aAAW,OACXrH,QAAS5E,KAAKmI,mBACdlB,EAAAvG,EAAAC,cAACuL,EAAAxL,EAAD,OAEJuG,EAAAvG,EAAAC,cAACwL,EAAAzL,EAAD,CACI6B,GAAG,YACH8F,SAAUA,EACV+D,KAAMC,QAAQhE,GACdvB,QAAS9G,KAAKuI,gBACd+D,mBAAoB,KACpBC,sBAAoB,EACpBC,qBAAqB,EACrBC,aAAcpG,EACdqG,gBAAiBlG,GACjBS,EAAAvG,EAAAC,cAACgM,EAAAjM,EAAD,CAAUkE,QAAS5E,KAAKwI,gBAAxB,aACCgD,GAAgBvE,EAAAvG,EAAAC,cAACgM,EAAAjM,EAAD,CAAUkE,QAAS5E,KAAK2I,oBAAxB,iBAChB+C,GAAcE,GAAkB3E,EAAAvG,EAAAC,cAACgM,EAAAjM,EAAD,CAAUkE,QAAS5E,KAAKqJ,aAAcuC,IAE3E3E,EAAAvG,EAAAC,cAAC8F,EAAD,CAAiB9G,OAAQA,EAAQyM,KAAM9C,EAAYxC,QAAS9G,KAAKuJ,sBACjEtC,EAAAvG,EAAAC,cAACkH,EAAD,CAAoBlI,OAAQA,EAAQyM,KAAMxD,EAAkB9B,QAAS9G,KAAK6I,qCA/L7DhI,IAAMC,WAqM7B8L,EAAUC,YACZhJ,IAlTW,SAAAC,GAAK,MAAK,CACrBkI,eAAgB,CACZc,OAAQ,qBAiTZC,gBAGWH,MAAQ9E,usBC9TjBkF,sBACF,SAAAA,EAAYpN,GAAO,IAAAJ,EAAA0B,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgN,IACfxN,EAAA0B,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAA8L,GAAA1L,KAAAtB,KAAMJ,KA0DV2B,mBAAqB,SAAAhC,GAAU,IACnB0N,EAAWzN,EAAKI,MAAhBqN,OACFC,EAAO7J,IAAU5B,IAAIwL,GAEvBA,IAAW1N,EAAO4C,SAClB3C,EAAK4C,SAAS,CAAE+K,OAAQC,YAAcF,GAAO1K,SAAU6K,YAAaH,MAhEzD,IAGPD,EAAWzN,EAAKI,MAAhBqN,OACFC,EAAO7J,IAAU5B,IAAIwL,GAJZ,OAMfzN,EAAK0D,MAAQ,CACToK,WAAYL,EACZE,OAAQC,YAAcF,GACtB1K,SAAU6K,YAAaH,IATZ1N,qFA4BGM,EAAWC,GAAW,IAAAM,EACdL,KAAKJ,MAAvBqN,EADgC5M,EAChC4M,OAAQnJ,EADwBzD,EACxByD,MADwBV,EAEXpD,KAAKkD,MAA1BiK,EAFgC/J,EAEhC+J,OAAQ3K,EAFwBY,EAExBZ,SAEhB,OAAI1C,EAAUgE,QAAUA,IAIpBhE,EAAUmN,SAAWA,IAIrBlN,EAAUoN,SAAWA,GAIrBpN,EAAUyC,WAAaA,gDAQ3Ba,IAAUlD,GAAG,mBAAoBH,KAAKuB,mEAItC8B,IAAUjD,eAAe,mBAAoBJ,KAAKuB,qDAY7C,IACGgC,EAAYvD,KAAKJ,MAAjB2D,QADHC,EAEwBxD,KAAKkD,MAA1BiK,EAFH3J,EAEG2J,OAAQ3K,EAFXgB,EAEWhB,SAEhB,OACIiB,EAAA/C,EAAAC,cAAA,OACIC,UAAW8C,IAAW,iBAAkBH,EAAQgK,mBAA3BrM,OAAAsM,EAAA,EAAAtM,CAAA,CACjBuM,eAAgBjL,GACfe,EAAQmK,yBAA2BlL,KAEvC2K,sDAjEmBvN,EAAOsD,GACnC,GAAItD,EAAMqN,SAAW/J,EAAMoK,WAAY,KAC3BL,EAAWrN,EAAXqN,OACFC,EAAO7J,IAAU5B,IAAIwL,GAE3B,MAAO,CACHK,WAAYL,EACZE,OAAQC,YAAcF,GACtB1K,SAAU6K,YAAaH,IAI/B,OAAO,YA1BiBrM,IAAMC,YAqFvB+C,MA9FA,SAAAC,GAAK,MAAK,CACrByJ,mBAAoB,CAChBxJ,MAA8B,SAAvBD,EAAME,QAAQtC,KAAkBoC,EAAME,QAAQC,KAAKC,UAAY,WAE1EwJ,yBAA0B,CACtB3J,MAAOD,EAAME,QAAQG,QAAQC,KAAO,gBAyFV,CAAEC,WAAW,GAAhCR,CAAwCmJ,GCjDxCW,qNAvCXpJ,YAAc,WAAM,IAAAlE,EACab,EAAKI,MAA1BqN,EADQ5M,EACR4M,OAAQzI,EADAnE,EACAmE,SAEV0I,EAAO7J,IAAU5B,IAAIwL,GACtBC,GACA1I,GAELA,EAAS0I,yFAXSpN,EAAWC,GAC7B,OAAOD,EAAUmN,SAAWjN,KAAKJ,MAAMqN,wCAalC,IACGA,EAAWjN,KAAKJ,MAAhBqN,OACFC,EAAO7J,IAAU5B,IAAIwL,GAErBW,EAAWC,YAAgBX,GAEjC,OACIzJ,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,OAAOgE,QAAS5E,KAAKuE,aAChCd,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,gBACX6C,EAAA/C,EAAAC,cAACmN,EAAA,EAAD,CAAiBb,OAAQA,IACzBxJ,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,wBACX6C,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,kBACX6C,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,gBAAgBgN,IAEnCnK,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,mBACX6C,EAAA/C,EAAAC,cAACoN,EAAD,CAAmBd,OAAQA,eA9B7BpM,IAAMC,6DCW1BkN,eACF,SAAAA,EAAYpO,GAAQ,OAAAsB,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgO,GAAA9M,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAA8M,GAAA1M,KAAAtB,KACVJ,0EAGD,IAAAS,EACwDL,KAAKJ,MAA1D2D,EADHlD,EACGkD,QAAS5D,EADZU,EACYV,OAAQM,EADpBI,EACoBJ,EAAGgO,EADvB5N,EACuB4N,WAAYrJ,EADnCvE,EACmCuE,QAASkC,EAD5CzG,EAC4CyG,QAE7CoH,EAAOjO,EAAE,YAOb,OANIyJ,aAAc/J,GACduO,EAAOjO,EAAE,QACFkO,aAAcxO,KACrBuO,EAAOjO,EAAE,gBAITwD,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,iBACVqN,GACGxK,EAAA/C,EAAAC,cAACyN,EAAA1N,EAAD,CAAYE,UAAW2C,EAAQ8K,eAAgBzJ,QAASkC,GACpDrD,EAAA/C,EAAAC,cAAC2N,GAAA5N,EAAD,OAGR+C,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,oCAAoCgE,QAASA,GACxDnB,EAAA/C,EAAAC,cAAA,QAAMC,UAAU,yBAAyBsN,KAE3CD,GACExK,EAAA/C,EAAAC,cAACyN,EAAA1N,EAAD,CAAYE,UAAW2C,EAAQgL,gBAAiB3J,QAASkC,GACrDrD,EAAA/C,EAAAC,cAAC6N,EAAA9N,EAAD,eA3BQG,IAAMC,WAwCvB8L,GALCC,YACZ7L,cACA6C,IA9CW,CACXwK,eAAgB,CACZvB,OAAQ,qBAEZyB,gBAAiB,CACbzB,OAAQ,sBAyCO,CAAEzI,WAAW,IAGrBuI,CAAQoB,wFCvCjBS,eACF,SAAAA,EAAY7O,GAAQ,OAAAsB,OAAAC,EAAA,EAAAD,CAAAlB,KAAAyO,GAAAvN,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAuN,GAAAnN,KAAAtB,KACVJ,0EAGD,IAAAS,EACkBL,KAAKJ,MAApB2D,EADHlD,EACGkD,QAAStD,EADZI,EACYJ,EACTyO,EAAY1O,KAAKkD,MAAjBwL,QAER,OACIjL,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,SAAUjK,QAAS5E,KAAK8O,4BACxDrL,EAAA/C,EAAAC,cAACoO,EAAArO,EAAD,KAAgBgO,EAAwCjL,EAAA/C,EAAAC,cAACqO,GAAAtO,EAAD,MAA9B+C,EAAA/C,EAAAC,cAACsO,GAAAvO,EAAD,OAC1B+C,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIyD,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAY0F,QAAQ,UAAUgJ,QAAM,GAC/BnP,EAAE,oBAIfwD,EAAA/C,EAAAC,cAAC0O,GAAA3O,EAAD,KACI+C,EAAA/C,EAAAC,cAAC2O,GAAA5O,EAAD,CAAQqD,MAAM,UAAUwL,SAAUvP,KAAK8O,2BAA4BU,SAAUd,oBApB7De,GAgCrB7C,GALCC,YACZ7L,cACA6C,IAnCW,CACXgL,SAAU,CACNa,QAAS,cAiCM,CAAErL,WAAW,IAGrBuI,CAAQ6B,kHC3BjBkB,eACF,SAAAA,EAAY/P,GAAO,IAAAJ,EAAA0B,OAAAC,EAAA,EAAAD,CAAAlB,KAAA2P,IACfnQ,EAAA0B,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAyO,GAAArO,KAAAtB,KAAMJ,KAoBVgQ,gBAAkB,WACdpQ,EAAK4C,SAAS,CAAEyN,UAAWrQ,EAAK0D,MAAM2M,YAtBvBrQ,EAyBnBsQ,kBAAoB,WAChB,IAAMC,EAAgBhH,KAAiBC,YAC/BrJ,EAAWH,EAAKI,MAAhBD,OACJoQ,IAAkBpQ,GAGlB4K,KAAgByF,UAAUrQ,IA/BfH,EAmCnByQ,YAAc,WAAM,IACRtQ,EAAWH,EAAK0D,MAAhBvD,OAEF6B,EAAOtB,KAAUuB,IAAI9B,GAC3B,GAAK6B,GACAA,EAAKE,KAAV,CALgB,IAORS,EAAYX,EAAKE,KAAjBS,QACHA,GAELoI,KAAgBC,KAAK,CACjBtB,QAASgH,YAAc/N,GAAW,cAAgB,YAClDA,QAASA,MA/CE,IAGPxC,EAAWH,EAAKI,MAAhBD,OAHO,OAIfH,EAAK0D,MAAQ,CACTC,WAAYxD,EACZkQ,UAAU,GANCrQ,wEAmDV,IAAAa,EAC0BL,KAAKJ,MAA5BK,EADHI,EACGJ,EAAGN,EADNU,EACMV,OAAQ4D,EADdlD,EACckD,QACXsM,EAAa7P,KAAKkD,MAAlB2M,SAEFrO,EAAOtB,KAAUuB,IAAI9B,GAErBwQ,EAAUC,aAAYzQ,GACxB0Q,GAAY,GACXF,GAAW3O,EAAKE,OACjB2O,EAAYH,YAAc1O,EAAKE,KAAKS,UAExC,IAAMmO,EAAWC,aAAa5Q,GACxB6Q,EAAYrC,aAAcxO,GAEhC,OACI8D,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KACIpI,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,SAAUjK,QAAS5E,KAAK4P,iBACxDnM,EAAA/C,EAAAC,cAACoO,EAAArO,EAAD,KACI+C,EAAA/C,EAAAC,cAAC8P,GAAA/P,EAAD,OAEJ+C,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIyD,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAY0F,QAAQ,UAAUgJ,QAAM,GAC/BnP,EAAE,WAId4P,EAAWpM,EAAA/C,EAAAC,cAAC+P,GAAAhQ,EAAD,MAAiB+C,EAAA/C,EAAAC,cAACgQ,GAAAjQ,EAAD,OAEjC+C,EAAA/C,EAAAC,cAACiQ,GAAAlQ,EAAD,CAAUmQ,GAAIhB,EAAUpK,QAAQ,OAAOqL,eAAa,GAChDrN,EAAA/C,EAAAC,cAACoQ,EAAArQ,EAAD,CAAMsQ,UAAU,MAAMC,gBAAc,IAC9Bd,GACE1M,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KACIpI,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,SAAUjK,QAAS5E,KAAK8P,mBACxDrM,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIwQ,OAAK,EACL/M,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAY0F,QAAQ,UAAUgJ,QAAM,GAC/BnP,EAAE,mBAKnBwD,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,SAAUjK,QAAS5E,KAAKiQ,aACxDxM,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIwQ,OAAK,EACL/M,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAYqD,MAAM,YAAYqC,QAAQ,UAAUgJ,QAAM,GACrCnP,EAAZoQ,EAAc,UAAe,qBAOrDF,GAAWG,GACR7M,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,UAChCpL,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIwQ,OAAK,EACL/M,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAYqD,MAAM,YAAYqC,QAAQ,UAAUgJ,QAAM,GACrCnP,EAAZuQ,EAAc,eAAoB,kBAMtDL,IAAYG,GACT7M,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,UAChCpL,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIwQ,OAAK,EACL/M,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAYqD,MAAM,YAAYqC,QAAQ,UAAUgJ,QAAM,GACjDnP,EAAE,wEAlHXL,EAAOsD,GACnC,OAAItD,EAAMD,SAAWuD,EAAMC,WAChB,CACHA,WAAYvD,EAAMD,OAClBkQ,UAAU,GAIX,YAnBYhP,IAAMC,WA+IlB8L,GALCC,YACZ7L,cACA6C,IAlJW,CACXgL,SAAU,CACNa,QAAS,cAgJM,CAAErL,WAAW,IAGrBuI,CAAQ+C,0FCjGjBwB,uBACF,SAAAA,EAAYvR,GAAO,IAAAJ,EAAA0B,OAAAC,EAAA,EAAAD,CAAAlB,KAAAmR,IACf3R,EAAA0B,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAiQ,GAAA7P,KAAAtB,KAAMJ,KAmGV+C,2BAA6B,SAAApD,GACzB,IAAMiC,EAAOtB,KAAUuB,IAAIjC,EAAKI,MAAMD,QACjC6B,GAGDA,EAAKE,MACkB,uBAAvBF,EAAKE,KAAK,UACVF,EAAKE,KAAKK,iBAAmBxC,EAAOwC,iBAEpCvC,EAAK4R,mBAEL5R,EAAKC,gBA/GMD,EAmHnBoD,2BAA6B,SAAArD,GACzB,IAAMiC,EAAOtB,KAAUuB,IAAIjC,EAAKI,MAAMD,QACjC6B,GAGDA,EAAKE,MACkB,uBAAvBF,EAAKE,KAAK,UACVF,EAAKE,KAAKmB,gBAAkBtD,EAAOsD,eAEnCrD,EAAKC,eA5HMD,EAgInBkD,qBAAuB,SAAAnD,GACnB,IAAMiC,EAAOtB,KAAUuB,IAAIjC,EAAKI,MAAMD,QACjC6B,KAGDA,EAAKE,MACmB,oBAAvBF,EAAKE,KAAK,UAAyD,mBAAvBF,EAAKE,KAAK,UACvDF,EAAKE,KAAKS,UAAY5C,EAAO4C,SAE7B3C,EAAKC,gBAzIMD,EA6InB+B,mBAAqB,SAAAhC,GACbC,EAAKwC,QAAQqP,IAAI9R,EAAO4C,UACxB3C,EAAKC,eA/IMD,EAmJnB4R,iBAAmB,WACf5R,EAAKsC,cAELtC,EAAK8R,oBAEL9R,EAAK+R,oBAxJU/R,EA2JnB+R,iBAAmB,WAAM,IACb5R,EAAWH,EAAKI,MAAhBD,OAEF6R,EAAQC,KAAUC,WAExBC,aAAiBH,EAAO,CAAC7R,IACzB,IAAMqC,EAAU4P,aAAoBjS,GAAQkS,IAAI,SAAA3P,GAAC,OAAIA,EAAEC,UACvD2P,aAAiBN,EAAOxP,IAlKTxC,EAqKnBsC,YAAc,WAAM,IACRnC,EAAWH,EAAKI,MAAhBD,OAERoS,aAAgBpS,IAxKDH,EA2KnB8R,kBA3KmBpQ,OAAA8Q,EAAA,EAAA9Q,CAAA+Q,EAAAvR,EAAAuJ,KA2KC,SAAAC,IAAA,IAAAvK,EAAAmJ,EAAA,OAAAmJ,EAAAvR,EAAAyJ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACR3K,EAAWH,EAAKI,MAAhBD,QAEQyQ,aAAYzQ,GAHZ,CAAAyK,EAAAE,KAAA,eAAAF,EAAA8H,OAAA,qBAMHC,aAASxS,GANN,CAAAyK,EAAAE,KAAA,eAAAF,EAAA8H,OAAA,wBAAA9H,EAAAE,KAAA,EASKC,KAAgBC,KAAK,CACtCtB,QAAS,oBACT/G,QAASiQ,aAAczS,GACvB0S,eAAgB,EAChBC,MAAO,IAbK,OASVxJ,EATUsB,EAAAmI,KAgBhB/S,EAAK4C,SAAS,CAAEoQ,kBAAmB1J,EAAO2J,SAASC,OAAS,IAhB5C,yBAAAtI,EAAAQ,SAAAV,MA3KD1K,EA8LnBmT,mBAAqB,WAAM,IAAAtS,EACDb,EAAKI,MAAnBK,EADeI,EACfJ,EAAGN,EADYU,EACZV,OACLiT,EAAWC,aAAgBlT,GACjC,GAAKiT,EAAL,CAEA,IAAME,EAAoBC,KAAYtR,IAAI,YACpCuR,EAAeF,EAAoBA,EAAkBtN,MAAQ,wBAEnEyN,IAAKD,EAAeJ,GAEpB,IAAMhJ,EAAG,GAAAjD,OAAMhH,EAAN,kBACH6J,EAAUvJ,EAAE,cAGlBT,EAAK4J,sBAAsBQ,EAAKJ,EAFjB,QA1MAhK,EA+MnB4J,sBAAwB,SAACQ,EAAKJ,EAASK,GACnC,GAAKD,EAAL,CAD8C,IAAAnF,EAGTjF,EAAKI,MAAlCoL,EAHsCvG,EAGtCuG,gBAAiBzH,EAHqBkB,EAGrBlB,QACzB,GAAKyH,EAAL,CAIIjC,KAAiBkC,mBAAmBrB,EAAKsB,KAAqC,IAAsBrB,IAEpGmB,EAAgBxB,EAAS,CACrB2B,iBAAkBD,KAClBrB,OAAQ,CACJpG,EAAA/C,EAAAC,cAACyN,EAAA1N,EAAD,CACIkJ,IAAI,QACJqC,aAAW,QACXlI,MAAM,UACNnD,UAAW2C,EAAQ2P,MACnBtO,QAAS,kBAAMmE,KAAiBuC,sBAAsB1B,KACtDnG,EAAA/C,EAAAC,cAAC6N,EAAA9N,EAAD,aAlODlB,EAyOnB2T,gBAAkB,WAAM,IAAAC,EACE5T,EAAKI,MAAnBK,EADYmT,EACZnT,EAAGN,EADSyT,EACTzT,OACL0T,EAAcC,aAAmB3T,GACvC,GAAK0T,EAAL,CAEAJ,IAAKM,aAAkBF,IAEvB,IAAMzJ,EAAG,GAAAjD,OAAMhH,EAAN,eACH6J,EAAUvJ,EAAE,eAGlBT,EAAK4J,sBAAsBQ,EAAKJ,EAFjB,QAlPAhK,EAuPnBgU,kBAAoB,WAChBhU,EAAKiU,mBAAmBC,QAAQC,UAAY,GAxP7BnU,EA2PnBoU,iBAAmB,WAAM,IACbjU,EAAWH,EAAKI,MAAhBD,OACF6B,EAAOtB,KAAUuB,IAAI9B,GACtB6B,GACAA,EAAKqS,OAEV9K,KAAiB+K,6BAA6B,CAAEnU,OAAQA,KAjQzCH,EAoQnBuU,eAAiB,WAAM,IAAAC,EACOxU,EAAKI,MAAvBD,EADWqU,EACXrU,OAAQsU,EADGD,EACHC,MAEhBC,aAASvU,EAAQ,MAAM,GAEnBsU,GACA1J,KAAgBE,aAAa,CACzBvB,QAAS,2BACTvJ,OAAQ,KA5QDH,EAiRnB2U,iBAAmB,WACf,OAAK3U,EAAKiU,mBAEHjU,EAAKiU,mBAAmBC,QAAQU,aAFF,GA/QrC5U,EAAKiU,mBAAqB5S,IAAMwT,YAHjB,IAKP1U,EAAWH,EAAKI,MAAhBD,OALO,OAOfH,EAAKwC,QAAU,IAAIsS,IACnB9U,EAAK0D,MAAQ,CACTC,WAAYxD,EACZ6S,mBAAmB,GAVRhT,uFAyBK+U,EAAWC,GAAW,IAClC7U,EAAWK,KAAKJ,MAAhBD,OAEF8U,EAAOzU,KAAKyT,mBAAmBC,QAC7BC,EAA0Cc,EAA1Cd,UAAWe,EAA+BD,EAA/BC,aAAcC,EAAiBF,EAAjBE,aAC3BC,EAAW,CACbjB,UAAWA,EACXe,aAAcA,EACdC,aAAcA,GAOlB,OAJAE,QAAQC,IAAR,gDAAAnO,OACoDhH,EADpD,eAAAgH,OACwEgN,EADxE,kBAAAhN,OACkG+N,EADlG,kBAAA/N,OAC+HgO,IAGxHC,gDAGW9U,EAAWC,GAAW,IAAAgV,EACd/U,KAAKJ,MAAvBD,EADgCoV,EAChCpV,OAAQmE,EADwBiR,EACxBjR,MACR0O,EAAsBxS,KAAKkD,MAA3BsP,kBAER,OAAI1S,EAAUH,SAAWA,IAIrBG,EAAUgE,QAAUA,GAIpB/D,EAAUyS,oBAAsBA,8CAOrB+B,EAAWC,EAAWI,GAAU,IACvCjV,EAAWK,KAAKJ,MAAhBD,OACJ4U,EAAU5U,SAAWA,GACrBK,KAAKoR,mBAGTyD,QAAQC,IAAI,qBAAsB9U,KAAKyT,oBACvC,IAAMgB,EAAOzU,KAAKyT,mBAAmBC,QAC7BC,EAA0CiB,EAA1CjB,UAAWe,EAA+BE,EAA/BF,aAA+BE,EAAjBD,aACjCE,QAAQC,IAAR,kDAAAnO,OACsDhH,EADtD,oBAAAgH,OAEQ8N,EAAKd,UAFb,uBAAAhN,OAG0B8N,EAAKE,aAH/B,uBAAAhO,OAGiE8N,EAAKC,eAEtED,EAAKd,UAAYA,GAAac,EAAKC,aAAeA,GAClDG,QAAQC,IAAR,iDAAAnO,OACqDhH,EADrD,oBAAAgH,OAEQ8N,EAAKd,UAFb,uBAAAhN,OAG0B8N,EAAKE,aAH/B,uBAAAhO,OAGiE8N,EAAKC,2DAKtE1U,KAAKoR,mBAEL/N,IAAUlD,GAAG,mBAAoBH,KAAKuB,oBACtC8B,IAAUlD,GAAG,qBAAsBH,KAAK0C,sBACxCb,KAAgB1B,GAAG,2BAA4BH,KAAK2C,4BACpDW,KAAgBnD,GAAG,2BAA4BH,KAAK4C,2EAIpDS,IAAUjD,eAAe,mBAAoBJ,KAAKuB,oBAClD8B,IAAUjD,eAAe,qBAAsBJ,KAAK0C,sBACpDb,KAAgBzB,eAAe,2BAA4BJ,KAAK2C,4BAChEW,KAAgBlD,eAAe,2BAA4BJ,KAAK4C,6DAsL3D,IAAAmF,EAAA/H,KAAAgV,EAWDhV,KAAKJ,MATLK,EAFC+U,EAED/U,EACAW,EAHCoU,EAGDpU,UACAjB,EAJCqV,EAIDrV,OACA4D,EALCyR,EAKDzR,QACA0R,EANCD,EAMDC,kBACAC,EAPCF,EAODE,qBACAjB,EARCe,EAQDf,MACAhG,EATC+G,EASD/G,WACAnH,EAVCkO,EAUDlO,QAEI0L,EAAsBxS,KAAKkD,MAA3BsP,kBAEFhR,EAAOtB,KAAUuB,IAAI9B,GAC3B,IAAK6B,EACD,OACIiC,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,gBACX6C,EAAA/C,EAAAC,cAACwU,GAAD,CAAmBrO,QAASA,IAC5BrD,EAAA/C,EAAAC,cAAA,OAAKyU,IAAKpV,KAAKyT,mBAAoB7S,UAAU,uBAKzD,IAAMgS,EAAWC,aAAgBlT,GAC3B0T,EAAcC,aAAmB3T,GACjC0V,EAAMC,aAAW3V,GACjBwQ,EAAUC,aAAYzQ,GACtB4V,EAAOpD,aAASxS,GAEhBqC,EAAU4P,aAAoBjS,GAC9B6V,EAAQ,GACdxV,KAAKgC,QAAU,IAAIsS,IACnBtS,EAAQyT,QAAQ,SAAAC,GACZ,IAAMxI,EAAO7J,IAAU5B,IAAIiU,EAAOvT,SAC9B+K,IACAnF,EAAK/F,QAAQ2T,IAAIzI,EAAK3K,GAAI2K,EAAK3K,IAC/BiT,EAAMI,KAAK1I,MAInB,IAGM2I,EAHcL,EAAMM,KAAK,SAAC5T,EAAG6T,GAC/B,OAAOC,YAAmBD,GAAKC,YAAmB9T,KAE5B2P,IAAI,SAAA3E,GAAI,OAC9BzJ,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,SAAUjF,IAAKsD,EAAK3K,IACpDkB,EAAA/C,EAAAC,cAACsV,EAAD,CAAahJ,OAAQC,EAAK3K,GAAIiC,SAAUuD,EAAKmO,sBAI7CrC,EAAUrS,EAAVqS,MAEFsC,EACF1S,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KACIpI,EAAA/C,EAAAC,cAACwU,GAAD,CACIxV,OAAQA,EACRsO,WAAYA,EACZnH,QAASA,EACTlC,QAAS5E,KAAKwT,oBAElB/P,EAAA/C,EAAAC,cAAA,OAAKyU,IAAKpV,KAAKyT,mBAAoB7S,UAAU,qBACzC6C,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,qBACX6C,EAAA/C,EAAAC,cAAC2D,EAAA,EAAD,CACI3E,OAAQA,EACRgF,WAAYsP,EACZ3T,mBAAoB2T,EACpBvP,aAAcmP,EAAQ7T,KAAK4T,iBAAmB,SAGpDhB,GAAYS,GAAegC,IACzB5R,EAAA/C,EAAAC,cAACoQ,EAAArQ,EAAD,KACKkS,GACGnP,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,SAAUjK,QAAS5E,KAAK2S,oBACxDlP,EAAA/C,EAAAC,cAACoO,EAAArO,EAAD,KACI+C,EAAA/C,EAAAC,cAACyV,EAAA1V,EAAD,OAEJ+C,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIyD,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAY0F,QAAQ,UAAUgJ,QAAM,GAC/BwD,MAMpBS,GACG5P,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KACIpI,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,SAAUjK,QAAS5E,KAAKmT,iBACxD1P,EAAA/C,EAAAC,cAACoO,EAAArO,EAAD,KACI+C,EAAA/C,EAAAC,cAAC0V,EAAA3V,EAAD,OAEJ+C,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIyD,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAY0F,QAAQ,UAAUgJ,QAAM,GAC/BmE,aAAkBF,QAO1CgC,GACG5R,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUE,UAAW2C,EAAQsL,UACzBpL,EAAA/C,EAAAC,cAACoO,EAAArO,EAAD,KACI+C,EAAA/C,EAAAC,cAAC2V,EAAA5V,EAAD,CAAkBE,UAAU,4BAEhC6C,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIyD,QAASkR,EACTkB,MAAO,CAAEC,WAAY,WAAYC,SAAU,kBAM/DhT,EAAA/C,EAAAC,cAAC+V,EAAAhW,EAAD,MACA+C,EAAA/C,EAAAC,cAACoQ,EAAArQ,EAAD,MACM6U,GAAQ9R,EAAA/C,EAAAC,cAACgW,GAAD,CAAuBhX,OAAQA,IACxCwQ,GAAW1M,EAAA/C,EAAAC,cAACiW,GAAD,CAAcjX,OAAQA,KAChCwQ,GACE1M,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,SAAUjK,QAAS5E,KAAK+T,gBACxDtQ,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIwQ,OAAK,EACL/M,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAYqD,MAAM,UAAUqC,QAAQ,UAAUgJ,QAAM,GAC/CnP,EAAE,eAAe4W,mBAO1CpT,EAAA/C,EAAAC,cAAC+V,EAAAhW,EAAD,MACA+C,EAAA/C,EAAAC,cAACoQ,EAAArQ,EAAD,KACI+C,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAACkI,UAAQ,EAAClW,UAAW2C,EAAQsL,SAAUjK,QAASqQ,GAC5DxR,EAAA/C,EAAAC,cAACoO,EAAArO,EAAD,KACI+C,EAAA/C,EAAAC,cAACoW,EAAArW,EAAD,OAEJ+C,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIyD,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAY0F,QAAQ,UAAUgJ,QAAM,GAC/BnP,EAAE,mBAKlBuS,GACG/O,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChO,UAAW2C,EAAQsL,SAAUjK,QAASsQ,GACnDzR,EAAA/C,EAAAC,cAACuO,EAAAxO,EAAD,CACIwQ,OAAK,EACL/M,QACIV,EAAA/C,EAAAC,cAACwO,EAAAzO,EAAD,CAAY0F,QAAQ,UAAUgJ,QAAM,GAC/BnP,EAAE,uBAO1B4V,EAAMnD,OAAS,GACZjP,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KACIpI,EAAA/C,EAAAC,cAAC+V,EAAAhW,EAAD,MACA+C,EAAA/C,EAAAC,cAACoQ,EAAArQ,EAAD,KAAOmV,MAO3B,OAAO5B,EAAQxQ,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KAAGsK,GAAc1S,EAAA/C,EAAAC,cAAA,OAAKC,UAAW8C,IAAW,eAAgB9C,IAAauV,sDAjb5DvW,EAAOsD,GACnC,OAAItD,EAAMD,SAAWuD,EAAMC,WAChB,CACHA,WAAYvD,EAAMD,OAClB6S,mBAAmB,GAIpB,YAvBW3R,IAAMC,YAodjB8L,GARCC,YACZmK,eACAhW,cACA6C,IA9dW,SAAAC,GAAK,MAAK,CACrBmT,gBAAiB,CACbnK,OAAQ,qBAEZoK,OAAQ,GAGRhE,MAAO,CACHxD,QAAS5L,EAAMqT,QAAQC,KAAO,GAElCvI,SAAU,CACNa,QAAS,eAmdM,CAAErL,WAAW,IAChC0I,eACAsK,eAGWzK,CAAQuE,IC9gBjBmG,uBACF,SAAAA,EAAY1X,GAAQ,OAAAsB,OAAAC,EAAA,EAAAD,CAAAlB,KAAAsX,GAAApW,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAoW,GAAAhW,KAAAtB,KACVJ,0EAGD,IAAAS,EACwBL,KAAKJ,MAA1B2D,EADHlD,EACGkD,QAASuD,EADZzG,EACYyG,QAEjB,OACIrD,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,iBACX6C,EAAA/C,EAAAC,cAACyN,EAAA1N,EAAD,CAAYE,UAAW2C,EAAQgU,eAAgB3S,QAASkC,GACpDrD,EAAA/C,EAAAC,cAAC2N,GAAA5N,EAAD,OAEJ+C,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,qCACX6C,EAAA/C,EAAAC,cAAA,QAAMC,UAAU,yBAAhB,6BAdeC,IAAMC,YAyB1B+C,OA/BA,CACX0T,eAAgB,CACZzK,OAAQ,sBA6BDjJ,CAAmByT,IC1B5BE,uBACF,SAAAA,EAAY5X,GAAO,IAAAJ,EAAA,OAAA0B,OAAAC,EAAA,EAAAD,CAAAlB,KAAAwX,IACfhY,EAAA0B,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAsW,GAAAlW,KAAAtB,KAAMJ,KA0BV6X,aAAe,SAAAjW,GAAQ,IACXyS,EAAUzU,EAAKI,MAAfqU,MAERC,aAAS1S,EAAKe,IAEV0R,GACA1J,KAAgBE,aAAa,CACzBvB,QAAS,2BACTvJ,OAAQ,KAhChBH,EAAK0D,MAAQ,CACTwU,QAAS,IAJElY,mFAQC,IAAAuI,EAAA/H,KACRL,EAAWK,KAAKJ,MAAhBD,OAEFsN,EAASmF,aAAczS,GACxBsN,GAEL1C,KAAgBC,KAAK,CACjBtB,QAAS,oBACT/G,QAAS8K,EACToF,eAAgB,EAChBC,MAAO,MACRqF,KAAK,SAAA7O,GACJ,IAAM0I,EAAQC,KAAUC,WACxBC,aAAiBH,EAAO1I,EAAO2J,UAE/B1K,EAAK3F,SAAS,CAAEsV,QAAS5O,EAAO2J,8CAiB/B,IAAAmF,EAAA5X,KAAAK,EACiCL,KAAKJ,MAAnCiY,EADHxX,EACGwX,UAAW/Q,EADdzG,EACcyG,QAASmN,EADvB5T,EACuB4T,MAGtB6D,EAFc9X,KAAKkD,MAAjBwU,QAEc7F,IAAI,SAAA3P,GAAC,OACvBuB,EAAA/C,EAAAC,cAACgO,EAAAjO,EAAD,CAAUkO,QAAM,EAAChF,IAAK1H,GAClBuB,EAAA/C,EAAAC,cAAC2D,EAAA,EAAD,CAAa3E,OAAQuC,EAAGsC,SAAUoT,EAAKH,kBAIzCtB,EACF1S,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KACIpI,EAAA/C,EAAAC,cAACoX,GAAD,CAAsBjR,QAASA,IAC/BrD,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,wBAAwB2V,MAAO,CAAEsB,cAC3CC,IAKb,OAAO7D,EAAQxQ,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KAAGsK,GAAc1S,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,oBAAoBuV,UA5D9CtV,IAAMC,YAuEnC0W,GAAezW,aAAe,CAC1BkT,OAAO,EACP4D,UAAW,GAGAL,oDC5ETQ,uBACF,SAAAA,EAAYpY,GAAQ,OAAAsB,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgY,GAAA9W,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAA8W,GAAA1W,KAAAtB,KACVJ,0EAGD,IAAAS,EACsBL,KAAKJ,MAAxB2D,EADHlD,EACGkD,QAAS2P,EADZ7S,EACY6S,MAEjB,OACIzP,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,iBACX6C,EAAA/C,EAAAC,cAACyN,EAAA1N,EAAD,CAAYE,UAAW2C,EAAQgU,eAAgB3S,QAASsO,GACpDzP,EAAA/C,EAAAC,cAAC2N,GAAA5N,EAAD,OAEJ+C,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,qCACX6C,EAAA/C,EAAAC,cAAA,QAAMC,UAAU,yBAAhB,yBAdmBC,IAAMC,YAqB9B+C,OA3BA,CACX0T,eAAgB,CACZzK,OAAQ,sBAyBDjJ,CAAmBmU,ICzB5BC,sNACF/U,MAAQ,CACJsC,MAAO,KAGX0S,aAAe,SAAC9P,EAAO5C,GACnBhG,EAAK4C,SAAS,CAAEoD,mFAGX,IAAAnF,EACsBL,KAAKJ,MAAxBkH,EADHzG,EACGyG,QAASmN,EADZ5T,EACY4T,MACTzO,EAAUxF,KAAKkD,MAAfsC,MAEF2Q,EACF1S,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KACIpI,EAAA/C,EAAAC,cAACwX,GAAD,CAA0BjF,MAAOpM,IACjCrD,EAAA/C,EAAAC,cAACyX,GAAA1X,EAAD,CACI8E,MAAOA,EACP+J,SAAUvP,KAAKkY,aACfG,eAAe,UACfC,UAAU,UACVC,YAAU,EACVC,cAAc,MACdC,WAAS,GACThV,EAAA/C,EAAAC,cAAC+X,GAAAhY,EAAD,CAAKiY,MAAM,QAAQpC,MAAO,CAAEqC,SAAU,UACtCnV,EAAA/C,EAAAC,cAAC+X,GAAAhY,EAAD,CAAKiY,MAAM,OAAOpC,MAAO,CAAEqC,SAAU,UACrCnV,EAAA/C,EAAAC,cAAC+X,GAAAhY,EAAD,CAAKiY,MAAM,QAAQpC,MAAO,CAAEqC,SAAU,UACtCnV,EAAA/C,EAAAC,cAAC+X,GAAAhY,EAAD,CAAKiY,MAAM,QAAQpC,MAAO,CAAEqC,SAAU,YAKlD,OAAO3E,EAAQxQ,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KAAGsK,GAAc1S,EAAA/C,EAAAC,cAAA,OAAKC,UAAU,gBAAgBuV,UAhC7CtV,IAAMC,YA2ChCmX,GAAYlX,aAAe,CACvBkT,OAAO,EACP4D,UAAW,GAGAI,oBCrCTY,uBACF,SAAAA,EAAYjZ,GAAO,IAAAJ,EAAA0B,OAAAC,EAAA,EAAAD,CAAAlB,KAAA6Y,IACfrZ,EAAA0B,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAA2X,GAAAvX,KAAAtB,KAAMJ,KAmBVkZ,qBAAuB,SAAAvZ,GACDC,EAAKI,MAAfqU,OAGRzU,EAAK4C,SAAS,CACVzC,OAAQJ,EAAOwZ,WACfC,WAAY,KACZC,iBAAiB,EACjBC,oBAAoB,KA5BT1Z,EAgCnB2Z,sBAAwB,WACpB3Z,EAAK4C,SAAS,CAAE6W,iBAAiB,KAjClBzZ,EAoCnB4Z,uBAAyB,WACrB5Z,EAAK4C,SAAS,CAAE6W,iBAAiB,KArClBzZ,EAwCnB6Z,yBAA2B,SAAAC,GACvBzE,QAAQC,IAAI,oCAAqCwE,GACjD9Z,EAAK4C,SAAS,CAAE8W,oBAAoB,KA1CrB1Z,EA6CnB+Z,0BAA4B,WACxB/Z,EAAK4C,SAAS,CAAE8W,oBAAoB,KA9CrB1Z,EAiDnBga,uBAAyB,WAAM,IACnBvF,EAAUzU,EAAKI,MAAfqU,MACezU,EAAK0D,MAApB8V,WAEJxZ,EAAK4C,SAAS,CAAE4W,WAAY,OACrB/E,EACP1J,KAAgBE,aAAa,CACzBvB,QAAS,2BACTvJ,OAAQ,IAGZoJ,KAAiB0Q,6BAA4B,IA5DlCja,EAgEnB0W,iBAhEmB,eAAApM,EAAA5I,OAAA8Q,EAAA,EAAA9Q,CAAA+Q,EAAAvR,EAAAuJ,KAgEA,SAAAC,EAAMgD,GAAN,IAAA1L,EAAA,OAAAyQ,EAAAvR,EAAAyJ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACV4C,EADU,CAAA9C,EAAAE,KAAA,eAAAF,EAAA8H,OAAA,wBAAA9H,EAAAE,KAAA,EAGEC,KAAgBC,KAAK,CAClCtB,QAAS,oBACT/G,QAAS+K,EAAK3K,GACdmX,OAAO,IANI,UAGXlY,EAHW4I,EAAAmI,KASf/Q,EAAOtB,KAAUuB,IAAID,EAAKe,KAAOf,EATlB,CAAA4I,EAAAE,KAAA,eAAAF,EAAA8H,OAAA,iBAYf1S,EAAK4C,SAAS,CAAE4W,WAAYxX,EAAKe,KAZlB,wBAAA6H,EAAAQ,SAAAV,MAhEA,gBAAAyP,GAAA,OAAA7P,EAAAe,MAAA7K,KAAA8K,YAAA,GAGftL,EAAKoa,WAAa/Y,IAAMwT,YAHT,IAKPJ,EAAUrU,EAAVqU,MALO,OAOfzU,EAAK0D,MAAQ,CACTvD,OAAQsU,EAAQlL,KAAiB8Q,aAAe9Q,KAAiBpJ,QARtDH,mFAafuJ,KAAiB5I,GAAG,qBAAsBH,KAAK8Y,qEAI/C/P,KAAiB3I,eAAe,qBAAsBJ,KAAK8Y,uDA8DtD,IAAAzY,EACiCL,KAAKJ,MAAnC2D,EADHlD,EACGkD,QAAS3C,EADZP,EACYO,UAAWqT,EADvB5T,EACuB4T,MADvB7Q,EAE+DpD,KAAKkD,MAAjEvD,EAFHyD,EAEGzD,OAAQqZ,EAFX5V,EAEW4V,WAAYC,EAFvB7V,EAEuB6V,gBAAiBC,EAFxC9V,EAEwC8V,mBACvCnJ,EAAgBpQ,GAAUqZ,EAC1BnB,EAAY7X,KAAK4Z,YAAc5Z,KAAK4Z,WAAWlG,QAAU1T,KAAK4Z,WAAWlG,QAAQS,mBAAqB,EAExGgC,EAAU,KAiCd,OA/BIA,EADA8C,EAEIxV,EAAA/C,EAAAC,cAACmZ,GAAD,CACIna,OAAQoQ,EACRkE,MAAOA,EACP4D,UAAWA,EACX/Q,QAAS9G,KAAKoZ,yBAGfF,EAEHzV,EAAA/C,EAAAC,cAACoZ,GAAD,CACIpa,OAAQoQ,EACRkE,MAAOA,EACP4D,UAAWA,EACX/Q,QAAS9G,KAAKuZ,4BAKlB9V,EAAA/C,EAAAC,cAACqZ,GAAD,CACI5E,IAAKpV,KAAK4Z,WACVja,OAAQoQ,EACRkE,MAAOA,EACPhG,WAAY+K,IAAerZ,EAC3BsV,kBAAmBjV,KAAKmZ,sBACxBjE,qBAAsBlV,KAAKqZ,yBAC3BvS,QAAS9G,KAAKwZ,yBAKnBvF,EACHxQ,EAAA/C,EAAAC,cAAA8C,EAAA/C,EAAAmL,SAAA,KAAGsK,GAEH1S,EAAA/C,EAAAC,cAAA,OAAKC,UAAW8C,IAAWH,EAAQ0W,YAAa,CAAEC,gBAAiBjG,GAASrT,IAAauV,UA1H9EtV,IAAMC,YAqI7B+X,GAAS9X,aAAe,CACpBH,UAAW,KACX2C,QAAS,KACT0Q,OAAO,GAGIpQ,cAAWsW,KAAXtW,CAAwBgV","file":"static/js/8.ef5978ba.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport { getChatTitle } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogTitleControl.css';\n\nclass DialogTitleControl extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== this.props.t) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdateChatTitle = update => {\n        const { chatId } = this.props;\n\n        if (update.chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        const { t, chatId, showSavedMessages } = this.props;\n\n        const title = getChatTitle(chatId, showSavedMessages, t);\n\n        return <div className='dialog-title'>{title}</div>;\n    }\n}\n\nDialogTitleControl.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    showSavedMessages: PropTypes.bool\n};\n\nDialogTitleControl.defaultProps = {\n    showSavedMessages: true\n};\n\nexport default withTranslation()(DialogTitleControl);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { getChatSubtitleWithoutTyping, isAccentChatSubtitleWithoutTyping } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport UserStore from '../../Stores/UserStore';\nimport BasicGroupStore from '../../Stores/BasicGroupStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport './DialogStatusControl.css';\n\nconst styles = theme => ({\n    statusSubtitle: {\n        color: theme.palette.type === 'dark' ? theme.palette.text.secondary : '#70777b'\n    },\n    statusAccentSubtitle: {\n        color: theme.palette.primary.dark + '!important'\n    }\n});\n\nclass DialogStatusControl extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId } = this.props;\n\n        this.state = {\n            prevChatId: chatId,\n            subtitle: getChatSubtitleWithoutTyping(chatId),\n            isAccent: isAccentChatSubtitleWithoutTyping(chatId)\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId) {\n            const { chatId } = props;\n\n            return {\n                prevChatId: chatId,\n                subtitle: getChatSubtitleWithoutTyping(chatId),\n                isAccent: isAccentChatSubtitleWithoutTyping(chatId)\n            };\n        }\n\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId } = this.props;\n        const { subtitle, isAccent } = this.state;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextState.subtitle !== subtitle) {\n            return true;\n        }\n\n        if (nextState.isAccent !== isAccent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        UserStore.on('updateUserStatus', this.onUpdateUserStatus);\n        BasicGroupStore.on('updateBasicGroup', this.onUpdateBasicGroup);\n        SupergroupStore.on('updateSupergroup', this.onUpdateSupergroup);\n        UserStore.on('updateUserFullInfo', this.onUpdateUserFullInfo);\n        BasicGroupStore.on('updateBasicGroupFullInfo', this.onUpdateBasicGroupFullInfo);\n        SupergroupStore.on('updateSupergroupFullInfo', this.onUpdateSupergroupFullInfo);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeListener('updateUserStatus', this.onUpdateUserStatus);\n        BasicGroupStore.removeListener('updateBasicGroup', this.onUpdateBasicGroup);\n        SupergroupStore.removeListener('updateSupergroup', this.onUpdateSupergroup);\n        UserStore.removeListener('updateUserFullInfo', this.onUpdateUserFullInfo);\n        BasicGroupStore.removeListener('updateBasicGroupFullInfo', this.onUpdateBasicGroupFullInfo);\n        SupergroupStore.removeListener('updateSupergroupFullInfo', this.onUpdateSupergroupFullInfo);\n    }\n\n    onUpdateUserStatus = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n        if (!chat.type) return;\n\n        let updateSubtitle = false;\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                const fullInfo = BasicGroupStore.getFullInfo(chat.type.basic_group_id);\n                if (fullInfo && fullInfo.members) {\n                    const member = fullInfo.members.find(x => x.user_id === update.user_id);\n                    if (member) {\n                        updateSubtitle = true;\n                    }\n                }\n                break;\n            }\n            case 'chatTypePrivate': {\n                if (chat.type.user_id === update.user_id) {\n                    updateSubtitle = true;\n                }\n                break;\n            }\n            case 'chatTypeSecret': {\n                if (chat.type.user_id === update.user_id) {\n                    updateSubtitle = true;\n                }\n                break;\n            }\n            case 'chatTypeSupergroup': {\n                break;\n            }\n        }\n\n        if (updateSubtitle) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    updateSubtitle = chat => {\n        this.setState({\n            subtitle: getChatSubtitleWithoutTyping(chat.id),\n            isAccent: isAccentChatSubtitleWithoutTyping(chat.id)\n        });\n    };\n\n    onUpdateUserFullInfo = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') &&\n            chat.type.user_id === update.user_id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    onUpdateBasicGroupFullInfo = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeBasicGroup' &&\n            chat.type.basic_group_id === update.basic_group_id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    onUpdateSupergroupFullInfo = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeSupergroup' &&\n            chat.type.supergroup_id === update.supergroup_id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    onUpdateBasicGroup = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeBasicGroup' &&\n            chat.type.basic_group_id === update.basic_group.id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    onUpdateSupergroup = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeSupergroup' &&\n            chat.type.supergroup_id === update.supergroup.id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { subtitle, isAccent } = this.state;\n\n        return (\n            <div\n                className={classNames(\n                    'dialog-status',\n                    isAccent ? classes.statusAccentSubtitle : classes.statusSubtitle\n                )}>\n                {subtitle}\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(DialogStatusControl);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ChatTileControl from './ChatTileControl';\nimport DialogTitleControl from './DialogTitleControl';\nimport DialogStatusControl from './DialogStatusControl';\nimport ChatStore from '../../Stores/ChatStore';\nimport './ChatControl.css';\n\nclass ChatControl extends React.Component {\n    constructor(props) {\n        super(props);\n        if (process.env.NODE_ENV !== 'production') {\n            const { chatId } = this.props;\n            this.state = {\n                chat: ChatStore.get(chatId)\n            };\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.chatId !== this.props.chatId;\n    }\n\n    handleClick = () => {\n        const { chatId, onSelect } = this.props;\n        if (!onSelect) return;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        onSelect(chat);\n    };\n\n    render() {\n        const { chatId, onTileSelect, showStatus, showSavedMessages } = this.props;\n\n        return (\n            <div className='chat' onClick={this.handleClick}>\n                <div className='chat-wrapper'>\n                    <ChatTileControl chatId={chatId} onSelect={onTileSelect} showSavedMessages={showSavedMessages} />\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            <DialogTitleControl chatId={chatId} showSavedMessages={showSavedMessages} />\n                        </div>\n                        {showStatus && !showSavedMessages && (\n                            <div className='tile-second-row'>\n                                <DialogStatusControl chatId={chatId} />\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nChatControl.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    showSavedMessages: PropTypes.bool,\n    showStatus: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onTileSelect: PropTypes.func\n};\n\nChatControl.defaultProps = {\n    showSavedMessages: true,\n    showStatus: true\n};\n\nexport default ChatControl;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/es/Typography/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './NotificationTimer.css';\n\nclass NotificationTimer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            seconds: this.props.timeout / 1000,\n            value: 0\n        };\n    }\n\n    componentDidMount() {\n        this.startTime = new Date();\n        this.expire = this.startTime;\n        this.expire.setMilliseconds(this.expire.getMilliseconds() + this.props.timeout);\n        this.timerId = setInterval(this.handleTimer, 100);\n    }\n\n    handleTimer = () => {\n        const now = new Date();\n        const seconds = this.expire - now;\n        const value = 100 - (seconds / this.props.timeout) * 100;\n        // console.log(`NotificationTimer ms=${seconds} value=${value}`);\n        this.setState({\n            seconds: seconds > 0 ? seconds : 0,\n            value: value > 100 ? 100 : value\n        });\n\n        if (now >= this.expire) {\n            if (this.timerId) {\n                clearInterval(this.timerId);\n                this.timerId = null;\n            }\n        }\n    };\n\n    componentWillUnmount() {\n        if (this.timerId) {\n            clearInterval(this.timerId);\n            this.timerId = null;\n        }\n    }\n\n    render() {\n        const { value, seconds } = this.state;\n\n        return (\n            <div className='notification-timer'>\n                <div className='notification-timer-text'>\n                    <Typography color='inherit'>{(seconds / 1000).toFixed()}</Typography>\n                </div>\n                <div className='notification-timer-progress'>\n                    <CircularProgress size={32} value={100 - value} variant='static' />\n                </div>\n            </div>\n        );\n    }\n}\n\nNotificationTimer.propTypes = {\n    timeout: PropTypes.number.isRequired\n};\n\nexport default NotificationTimer;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withSnackbar } from 'notistack';\nimport { compose } from 'recompose';\nimport ChatTileControl from '../Tile/ChatTileControl';\nimport NotificationTimer from '../Additional/NotificationTimer';\nimport { canClearHistory, canDeleteChat, getChatShortTitle, isPrivateChat } from '../../Utils/Chat';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MainMenuButton.css';\n\nconst styles = theme => ({\n    menuIconButton: {\n        margin: '8px 12px 8px 0'\n    }\n});\n\nconst menuAnchorOrigin = {\n    vertical: 'bottom',\n    horizontal: 'right'\n};\n\nconst menuTransformOrigin = {\n    vertical: 'top',\n    horizontal: 'right'\n};\n\nclass LeaveChatDialog extends React.Component {\n    getDeleteDialogText = chatId => {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n        if (!chat.type) return null;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return `Are you sure you want to leave group ${chat.title}?`;\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                if (supergroup) {\n                    return supergroup.is_channel\n                        ? `Are you sure you want to leave channel ${chat.title}?`\n                        : `Are you sure you want to leave group ${chat.title}?`;\n                }\n\n                return null;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return `Are you sure you want to delete chat with ${getChatShortTitle(chatId)}?`;\n            }\n        }\n\n        return null;\n    };\n\n    render() {\n        const { onClose, chatId, ...other } = this.props;\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                onClose={() => onClose(false)}\n                aria-labelledby='delete-dialog-title'\n                {...other}>\n                <DialogTitle id='delete-dialog-title'>{getChatShortTitle(chatId)}</DialogTitle>\n                <DialogContent>\n                    <div className='delete-dialog-content'>\n                        <ChatTileControl chatId={chatId} />\n                        <DialogContentText id='delete-dialog-description'>\n                            {this.getDeleteDialogText(chatId)}\n                        </DialogContentText>\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => onClose(false)} color='primary'>\n                        Cancel\n                    </Button>\n                    <Button onClick={() => onClose(true)} color='primary' autoFocus>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nclass ClearHistoryDialog extends React.Component {\n    render() {\n        const { onClose, chatId, ...other } = this.props;\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                onClose={() => onClose(false)}\n                aria-labelledby='delete-dialog-title'\n                {...other}>\n                <DialogTitle id='delete-dialog-title'>{getChatShortTitle(chatId)}</DialogTitle>\n                <DialogContent>\n                    <div className='delete-dialog-content'>\n                        <ChatTileControl chatId={chatId} />\n                        <DialogContentText id='delete-dialog-description'>\n                            Are you sure you want clear history?\n                        </DialogContentText>\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => onClose(false)} color='primary'>\n                        Cancel\n                    </Button>\n                    <Button onClick={() => onClose(true)} color='primary' autoFocus>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nclass MainMenuButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorEl: null,\n            openDelete: false,\n            openClearHistory: false\n        };\n    }\n\n    handleButtonClick = event => {\n        this.setState({ anchorEl: event.currentTarget });\n    };\n\n    handleMenuClose = () => {\n        this.setState({ anchorEl: null });\n    };\n\n    handleChatInfo = () => {\n        this.handleMenuClose();\n        setTimeout(() => this.props.openChatDetails(), 150);\n    };\n\n    handleClearHistory = () => {\n        this.handleMenuClose();\n\n        this.setState({ openClearHistory: true });\n    };\n\n    handleClearHistoryContinue = result => {\n        this.setState({ openClearHistory: false });\n\n        if (!result) return;\n\n        const chatId = ApplicationStore.getChatId();\n        const message = 'Messages deleted';\n        const request = {\n            '@type': 'deleteChatHistory',\n            chat_id: chatId,\n            remove_from_chat_list: false\n        };\n\n        this.handleScheduledAction(chatId, 'clientUpdateClearHistory', message, request);\n    };\n\n    handleLeave = () => {\n        this.handleMenuClose();\n\n        this.setState({ openDelete: true });\n    };\n\n    handleLeaveContinue = result => {\n        this.setState({ openDelete: false });\n\n        if (!result) return;\n\n        const chatId = ApplicationStore.getChatId();\n        const message = this.getLeaveChatNotification(chatId);\n        const request = isPrivateChat(chatId)\n            ? { '@type': 'deleteChatHistory', chat_id: chatId, remove_from_chat_list: true }\n            : { '@type': 'leaveChat', chat_id: chatId };\n\n        this.handleScheduledAction(chatId, 'clientUpdateLeaveChat', message, request);\n    };\n\n    handleScheduledAction = (chatId, clientUpdateType, message, request) => {\n        if (!clientUpdateType) return;\n\n        const key = `${clientUpdateType} chatId=${chatId}`;\n        const action = async () => {\n            try {\n                await TdLibController.send(request);\n            } finally {\n                TdLibController.clientUpdate({ '@type': clientUpdateType, chatId: chatId, inProgress: false });\n            }\n        };\n        const cancel = () => {\n            TdLibController.clientUpdate({ '@type': clientUpdateType, chatId: chatId, inProgress: false });\n        };\n\n        const { enqueueSnackbar, classes } = this.props;\n        if (!enqueueSnackbar) return;\n\n        const TRANSITION_DELAY = 150;\n        if (ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS, action, cancel)) {\n            TdLibController.clientUpdate({ '@type': clientUpdateType, chatId: chatId, inProgress: true });\n            enqueueSnackbar(message, {\n                autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS - 2 * TRANSITION_DELAY,\n                action: [\n                    <IconButton key='progress' color='inherit' className='progress-button'>\n                        <NotificationTimer timeout={NOTIFICATION_AUTO_HIDE_DURATION_MS} />\n                    </IconButton>,\n                    <Button\n                        key='undo'\n                        color='primary'\n                        size='small'\n                        onClick={() => ApplicationStore.removeScheduledAction(key)}>\n                        UNDO\n                    </Button>\n                ]\n            });\n        }\n    };\n\n    getLeaveChatTitle = chatId => {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n        if (!chat.type) return null;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return 'Delete and exit';\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                if (supergroup) {\n                    return supergroup.is_channel ? 'Leave channel' : 'Leave group';\n                }\n\n                return null;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return 'Delete conversation';\n            }\n        }\n\n        return null;\n    };\n\n    getLeaveChatNotification = chatId => {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return 'Chat deleted';\n        if (!chat.type) return 'Chat deleted';\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return 'Chat deleted';\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                if (supergroup) {\n                    return supergroup.is_channel ? 'Left channel' : 'Left group';\n                }\n\n                return 'Chat deleted';\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return 'Chat deleted';\n            }\n        }\n\n        return 'Chat deleted';\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { anchorEl, openDelete, openClearHistory } = this.state;\n\n        const chatId = ApplicationStore.getChatId();\n        const clearHistory = canClearHistory(chatId);\n        const deleteChat = canDeleteChat(chatId);\n        const leaveChatTitle = this.getLeaveChatTitle(chatId);\n\n        return (\n            <>\n                <IconButton\n                    aria-owns={anchorEl ? 'simple-menu' : null}\n                    aria-haspopup='true'\n                    className={classes.menuIconButton}\n                    aria-label='Menu'\n                    onClick={this.handleButtonClick}>\n                    <MoreVertIcon />\n                </IconButton>\n                <Menu\n                    id='main-menu'\n                    anchorEl={anchorEl}\n                    open={Boolean(anchorEl)}\n                    onClose={this.handleMenuClose}\n                    getContentAnchorEl={null}\n                    disableAutoFocusItem\n                    disableRestoreFocus={true}\n                    anchorOrigin={menuAnchorOrigin}\n                    transformOrigin={menuTransformOrigin}>\n                    <MenuItem onClick={this.handleChatInfo}>Chat info</MenuItem>\n                    {clearHistory && <MenuItem onClick={this.handleClearHistory}>Clear history</MenuItem>}\n                    {deleteChat && leaveChatTitle && <MenuItem onClick={this.handleLeave}>{leaveChatTitle}</MenuItem>}\n                </Menu>\n                <LeaveChatDialog chatId={chatId} open={openDelete} onClose={this.handleLeaveContinue} />\n                <ClearHistoryDialog chatId={chatId} open={openClearHistory} onClose={this.handleClearHistoryContinue} />\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles),\n    withSnackbar\n);\n\nexport default enhance(MainMenuButton);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { getUserStatus, isUserOnline } from '../../Utils/User';\nimport UserStore from '../../Stores/UserStore';\nimport './UserStatusControl.css';\n\nconst styles = theme => ({\n    userStatusSubtitle: {\n        color: theme.palette.type === 'dark' ? theme.palette.text.secondary : '#70777b'\n    },\n    userStatusAccentSubtitle: {\n        color: theme.palette.primary.dark + '!important'\n    }\n});\n\nclass UserStatusControl extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { userId } = this.props;\n        const user = UserStore.get(userId);\n\n        this.state = {\n            prevUserId: userId,\n            status: getUserStatus(user),\n            isAccent: isUserOnline(user)\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.userId !== state.prevUserId) {\n            const { userId } = props;\n            const user = UserStore.get(userId);\n\n            return {\n                prevUserId: userId,\n                status: getUserStatus(user),\n                isAccent: isUserOnline(user)\n            };\n        }\n\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { userId, theme } = this.props;\n        const { status, isAccent } = this.state;\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextProps.userId !== userId) {\n            return true;\n        }\n\n        if (nextState.status !== status) {\n            return true;\n        }\n\n        if (nextState.isAccent !== isAccent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        UserStore.on('updateUserStatus', this.onUpdateUserStatus);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeListener('updateUserStatus', this.onUpdateUserStatus);\n    }\n\n    onUpdateUserStatus = update => {\n        const { userId } = this.props;\n        const user = UserStore.get(userId);\n\n        if (userId === update.user_id) {\n            this.setState({ status: getUserStatus(user), isAccent: isUserOnline(user) });\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { status, isAccent } = this.state;\n\n        return (\n            <div\n                className={classNames('dialog-content', classes.userStatusSubtitle, {\n                    'accent-color': isAccent,\n                    [classes.userStatusAccentSubtitle]: isAccent\n                })}>\n                {status}\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(UserStatusControl);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport UserTileControl from './UserTileControl';\nimport UserStatusControl from './UserStatusControl';\nimport { getUserFullName } from '../../Utils/User';\nimport UserStore from '../../Stores/UserStore';\nimport './UserControl.css';\n\nclass UserControl extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.userId !== this.props.userId;\n    }\n\n    handleClick = () => {\n        const { userId, onSelect } = this.props;\n\n        const user = UserStore.get(userId);\n        if (!user) return;\n        if (!onSelect) return;\n\n        onSelect(user);\n    };\n\n    render() {\n        const { userId } = this.props;\n        const user = UserStore.get(userId);\n\n        const fullName = getUserFullName(user);\n\n        return (\n            <div className='user' onClick={this.handleClick}>\n                <div className='user-wrapper'>\n                    <UserTileControl userId={userId} />\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            <div className='dialog-title'>{fullName}</div>\n                        </div>\n                        <div className='tile-second-row'>\n                            <UserStatusControl userId={userId} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nUserControl.propTypes = {\n    userId: PropTypes.number.isRequired,\n    onSelect: PropTypes.func\n};\n\nexport default UserControl;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport './ChatDetailsHeader.css';\nimport { isChannelChat, isPrivateChat } from '../../Utils/Chat';\n\nconst styles = {\n    leftIconButton: {\n        margin: '8px -2px 8px 12px'\n    },\n    rightIconButton: {\n        margin: '8px 12px 8px -2px'\n    }\n};\n\nclass ChatDetailsHeader extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { classes, chatId, t, backButton, onClick, onClose } = this.props;\n\n        let info = t('ChatInfo');\n        if (isPrivateChat(chatId)) {\n            info = t('Info');\n        } else if (isChannelChat(chatId)) {\n            info = t('ChannelInfo');\n        }\n\n        return (\n            <div className='header-master'>\n                {backButton && (\n                    <IconButton className={classes.leftIconButton} onClick={onClose}>\n                        <ArrowBackIcon />\n                    </IconButton>\n                )}\n                <div className='header-status grow cursor-pointer' onClick={onClick}>\n                    <span className='header-status-content'>{info}</span>\n                </div>\n                {!backButton && (\n                    <IconButton className={classes.rightIconButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                )}\n            </div>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(ChatDetailsHeader);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\nimport Switch from '@material-ui/core/Switch';\nimport Typography from '@material-ui/core/Typography';\nimport NotificationsControl from '../ColumnMiddle/NotificationsControl';\n\nconst styles = {\n    listItem: {\n        padding: '11px 22px'\n    }\n};\n\nclass NotificationsListItem extends NotificationsControl {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { classes, t } = this.props;\n        const { isMuted } = this.state;\n\n        return (\n            <ListItem button className={classes.listItem} onClick={this.handleSetChatNotifications}>\n                <ListItemIcon>{!isMuted ? <NotificationsActiveIcon /> : <NotificationsIcon />}</ListItemIcon>\n                <ListItemText\n                    primary={\n                        <Typography variant='inherit' noWrap>\n                            {t('Notifications')}\n                        </Typography>\n                    }\n                />\n                <ListItemSecondaryAction>\n                    <Switch color='primary' onChange={this.handleSetChatNotifications} checked={!isMuted} />\n                </ListItemSecondaryAction>\n            </ListItem>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(NotificationsListItem);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { isUserBlocked } from '../../Utils/User';\nimport { isChannelChat, isChatMember, isGroupChat } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport ApplicationStore from '../../Stores/ApplicationStore';\n\nconst styles = {\n    listItem: {\n        padding: '11px 22px'\n    }\n};\n\nclass MoreListItem extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId } = this.props;\n        this.state = {\n            prevChatId: chatId,\n            openMore: false\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId) {\n            return {\n                prevChatId: props.chatId,\n                openMore: false\n            };\n        }\n\n        return null;\n    }\n\n    handleMoreClick = () => {\n        this.setState({ openMore: !this.state.openMore });\n    };\n\n    handleSendMessage = () => {\n        const currentChatId = ApplicationStore.getChatId();\n        const { chatId } = this.props;\n        if (currentChatId === chatId) {\n            //this.dialogDetails.current.scrollToBottom();\n        } else {\n            TdLibController.setChatId(chatId);\n        }\n    };\n\n    handleBlock = () => {\n        const { chatId } = this.state;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n        if (!chat.type) return;\n\n        const { user_id } = chat.type;\n        if (!user_id) return;\n\n        TdLibController.send({\n            '@type': isUserBlocked(user_id) ? 'unblockUser' : 'blockUser',\n            user_id: user_id\n        });\n    };\n\n    render() {\n        const { t, chatId, classes } = this.props;\n        const { openMore } = this.state;\n\n        const chat = ChatStore.get(chatId);\n\n        const isGroup = isGroupChat(chatId);\n        let isBlocked = false;\n        if (!isGroup && chat.type) {\n            isBlocked = isUserBlocked(chat.type.user_id);\n        }\n        const isMember = isChatMember(chatId);\n        const isChannel = isChannelChat(chatId);\n\n        return (\n            <>\n                <ListItem button className={classes.listItem} onClick={this.handleMoreClick}>\n                    <ListItemIcon>\n                        <MoreHorizIcon />\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Typography variant='inherit' noWrap>\n                                {t('More')}\n                            </Typography>\n                        }\n                    />\n                    {openMore ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={openMore} timeout='auto' unmountOnExit>\n                    <List component='div' disablePadding>\n                        {!isGroup && (\n                            <>\n                                <ListItem button className={classes.listItem} onClick={this.handleSendMessage}>\n                                    <ListItemText\n                                        inset\n                                        primary={\n                                            <Typography variant='inherit' noWrap>\n                                                {t('SendMessage')}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                                <ListItem button className={classes.listItem} onClick={this.handleBlock}>\n                                    <ListItemText\n                                        inset\n                                        primary={\n                                            <Typography color='secondary' variant='inherit' noWrap>\n                                                {isBlocked ? t('Unblock') : t('BlockContact')}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                            </>\n                        )}\n                        {isGroup && isMember && (\n                            <ListItem button className={classes.listItem}>\n                                <ListItemText\n                                    inset\n                                    primary={\n                                        <Typography color='secondary' variant='inherit' noWrap>\n                                            {isChannel ? t('LeaveChannel') : t('DeleteChat')}\n                                        </Typography>\n                                    }\n                                />\n                            </ListItem>\n                        )}\n                        {isGroup && !isMember && (\n                            <ListItem button className={classes.listItem}>\n                                <ListItemText\n                                    inset\n                                    primary={\n                                        <Typography color='secondary' variant='inherit' noWrap>\n                                            {t('ReportChat')}\n                                        </Typography>\n                                    }\n                                />\n                            </ListItem>\n                        )}\n                    </List>\n                </Collapse>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(MoreListItem);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport copy from 'copy-to-clipboard';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withSnackbar } from 'notistack';\nimport { withTranslation } from 'react-i18next';\nimport PhotoIcon from '@material-ui/icons/Photo';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport CallIcon from '@material-ui/icons/Call';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '../ColumnMiddle/MainMenuButton';\nimport NotificationTimer from '../Additional/NotificationTimer';\nimport UserControl from '../Tile/UserControl';\nimport ChatControl from '../Tile/ChatControl';\nimport ChatDetailsHeader from './ChatDetailsHeader';\nimport NotificationsListItem from './NotificationsListItem';\nimport MoreListItem from './MoreListItem';\nimport {\n    getChatUsername,\n    getChatPhoneNumber,\n    getChatBio,\n    isGroupChat,\n    getGroupChatMembers,\n    getChatFullInfo,\n    isPrivateChat,\n    getChatUserId,\n    isMeChat\n} from '../../Utils/Chat';\nimport { getUserStatusOrder } from '../../Utils/User';\nimport { loadUsersContent, loadChatsContent } from '../../Utils/File';\nimport { formatPhoneNumber } from '../../Utils/Common';\nimport { openChat } from '../../Actions/Client';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ChatStore from '../../Stores/ChatStore';\nimport UserStore from '../../Stores/UserStore';\nimport BasicGroupStore from '../../Stores/BasicGroupStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport OptionStore from '../../Stores/OptionStore';\nimport FileStore from '../../Stores/FileStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ChatDetails.css';\n\nconst styles = theme => ({\n    closeIconButton: {\n        margin: '8px -2px 8px 12px'\n    },\n    nested: {\n        // paddingLeft: theme.spacing.unit * 4,\n    },\n    close: {\n        padding: theme.spacing.unit / 2\n    },\n    listItem: {\n        padding: '11px 22px'\n    }\n});\n\nclass ChatDetails extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.chatDetailsListRef = React.createRef();\n\n        const { chatId } = this.props;\n\n        this.members = new Map();\n        this.state = {\n            prevChatId: chatId,\n            hasGroupsInCommon: false\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId) {\n            return {\n                prevChatId: props.chatId,\n                hasGroupsInCommon: false\n            };\n        }\n\n        return null;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        const { chatId } = this.props;\n\n        const list = this.chatDetailsListRef.current;\n        const { scrollTop, scrollHeight, offsetHeight } = list;\n        const snapshot = {\n            scrollTop: scrollTop,\n            scrollHeight: scrollHeight,\n            offsetHeight: offsetHeight\n        };\n\n        console.log(\n            `[ChatDetails] getSnapshotBeforeUpdate chatId=${chatId} scrollTop=${scrollTop} scrollHeight=${scrollHeight} offsetHeight=${offsetHeight}`\n        );\n\n        return snapshot;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, theme } = this.props;\n        const { hasGroupsInCommon } = this.state;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextState.hasGroupsInCommon !== hasGroupsInCommon) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { chatId } = this.props;\n        if (prevProps.chatId !== chatId) {\n            this.handleSelectChat();\n        }\n\n        console.log('chatDetailsListRef', this.chatDetailsListRef);\n        const list = this.chatDetailsListRef.current;\n        const { scrollTop, scrollHeight, offsetHeight } = snapshot;\n        console.log(\n            `[ChatDetails] componentDidUpdate before chatId=${chatId} list.scrollTop=${\n                list.scrollTop\n            } list.offsetHeight=${list.offsetHeight} list.scrollHeight=${list.scrollHeight}`\n        );\n        list.scrollTop = scrollTop + (list.scrollHeight - scrollHeight);\n        console.log(\n            `[ChatDetails] componentDidUpdate after chatId=${chatId} list.scrollTop=${\n                list.scrollTop\n            } list.offsetHeight=${list.offsetHeight} list.scrollHeight=${list.scrollHeight}`\n        );\n    }\n\n    componentDidMount() {\n        this.handleSelectChat();\n\n        UserStore.on('updateUserStatus', this.onUpdateUserStatus);\n        UserStore.on('updateUserFullInfo', this.onUpdateUserFullInfo);\n        BasicGroupStore.on('updateBasicGroupFullInfo', this.onUpdateBasicGroupFullInfo);\n        SupergroupStore.on('updateSupergroupFullInfo', this.onUpdateSupergroupFullInfo);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeListener('updateUserStatus', this.onUpdateUserStatus);\n        UserStore.removeListener('updateUserFullInfo', this.onUpdateUserFullInfo);\n        BasicGroupStore.removeListener('updateBasicGroupFullInfo', this.onUpdateBasicGroupFullInfo);\n        SupergroupStore.removeListener('updateSupergroupFullInfo', this.onUpdateSupergroupFullInfo);\n    }\n\n    onUpdateBasicGroupFullInfo = update => {\n        const chat = ChatStore.get(this.props.chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeBasicGroup' &&\n            chat.type.basic_group_id === update.basic_group_id\n        ) {\n            this.handleSelectChat();\n\n            this.forceUpdate(); // update bio\n        }\n    };\n\n    onUpdateSupergroupFullInfo = update => {\n        const chat = ChatStore.get(this.props.chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeSupergroup' &&\n            chat.type.supergroup_id === update.supergroup_id\n        ) {\n            this.forceUpdate(); // update bio\n        }\n    };\n\n    onUpdateUserFullInfo = update => {\n        const chat = ChatStore.get(this.props.chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') &&\n            chat.type.user_id === update.user_id\n        ) {\n            this.forceUpdate(); // update bio\n        }\n    };\n\n    onUpdateUserStatus = update => {\n        if (this.members.has(update.user_id)) {\n            this.forceUpdate();\n        }\n    };\n\n    handleSelectChat = () => {\n        this.getFullInfo();\n\n        this.getGroupsInCommon();\n\n        this.loadChatContents();\n    };\n\n    loadChatContents = () => {\n        const { chatId } = this.props;\n\n        const store = FileStore.getStore();\n\n        loadChatsContent(store, [chatId]);\n        const members = getGroupChatMembers(chatId).map(x => x.user_id);\n        loadUsersContent(store, members);\n    };\n\n    getFullInfo = () => {\n        const { chatId } = this.props;\n\n        getChatFullInfo(chatId);\n    };\n\n    getGroupsInCommon = async () => {\n        const { chatId } = this.props;\n\n        const isGroup = isGroupChat(chatId);\n        if (isGroup) return;\n\n        const isMe = isMeChat(chatId);\n        if (isMe) return;\n\n        const result = await TdLibController.send({\n            '@type': 'getGroupsInCommon',\n            user_id: getChatUserId(chatId),\n            offset_chat_id: 0,\n            limit: 1\n        });\n\n        this.setState({ hasGroupsInCommon: result.chat_ids.length > 0 });\n    };\n\n    handleUsernameHint = () => {\n        const { t, chatId } = this.props;\n        const username = getChatUsername(chatId);\n        if (!username) return;\n\n        const telegramUrlOption = OptionStore.get('t_me_url');\n        const usernameLink = telegramUrlOption ? telegramUrlOption.value : 'https://telegram.org/';\n\n        copy(usernameLink + username);\n\n        const key = `${chatId}_copy_username`;\n        const message = t('TextCopied');\n        const action = null;\n\n        this.handleScheduledAction(key, message, action);\n    };\n\n    handleScheduledAction = (key, message, action) => {\n        if (!key) return;\n\n        const { enqueueSnackbar, classes } = this.props;\n        if (!enqueueSnackbar) return;\n\n        const TRANSITION_DELAY = 150;\n        if (\n            ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS + 2 * TRANSITION_DELAY, action)\n        ) {\n            enqueueSnackbar(message, {\n                autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n                action: [\n                    <IconButton\n                        key='close'\n                        aria-label='Close'\n                        color='inherit'\n                        className={classes.close}\n                        onClick={() => ApplicationStore.removeScheduledAction(key)}>\n                        <CloseIcon />\n                    </IconButton>\n                ]\n            });\n        }\n    };\n\n    handlePhoneHint = () => {\n        const { t, chatId } = this.props;\n        const phoneNumber = getChatPhoneNumber(chatId);\n        if (!phoneNumber) return;\n\n        copy(formatPhoneNumber(phoneNumber));\n\n        const key = `${chatId}_copy_phone`;\n        const message = t('PhoneCopied');\n        const action = null;\n\n        this.handleScheduledAction(key, message, action);\n    };\n\n    handleHeaderClick = () => {\n        this.chatDetailsListRef.current.scrollTop = 0;\n    };\n\n    handleOpenViewer = () => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n        if (!chat.photo) return;\n\n        ApplicationStore.setProfileMediaViewerContent({ chatId: chatId });\n    };\n\n    handleOpenChat = () => {\n        const { chatId, popup } = this.props;\n\n        openChat(chatId, null, false);\n\n        if (popup) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateDialogChatId',\n                chatId: 0\n            });\n        }\n    };\n\n    getContentHeight = () => {\n        if (!this.chatDetailsListRef) return 0;\n\n        return this.chatDetailsListRef.current.clientHeight;\n    };\n\n    render() {\n        const {\n            t,\n            className,\n            chatId,\n            classes,\n            onOpenSharedMedia,\n            onOpenGroupsInCommon,\n            popup,\n            backButton,\n            onClose\n        } = this.props;\n        const { hasGroupsInCommon } = this.state;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) {\n            return (\n                <div className='chat-details'>\n                    <ChatDetailsHeader onClose={onClose} />\n                    <div ref={this.chatDetailsListRef} className='chat-details-list' />\n                </div>\n            );\n        }\n\n        const username = getChatUsername(chatId);\n        const phoneNumber = getChatPhoneNumber(chatId);\n        const bio = getChatBio(chatId);\n        const isGroup = isGroupChat(chatId);\n        const isMe = isMeChat(chatId);\n\n        const members = getGroupChatMembers(chatId);\n        const users = [];\n        this.members = new Map();\n        members.forEach(member => {\n            const user = UserStore.get(member.user_id);\n            if (user) {\n                this.members.set(user.id, user.id);\n                users.push(user);\n            }\n        });\n\n        const sortedUsers = users.sort((x, y) => {\n            return getUserStatusOrder(y) - getUserStatusOrder(x);\n        });\n        const items = sortedUsers.map(user => (\n            <ListItem button className={classes.listItem} key={user.id}>\n                <UserControl userId={user.id} onSelect={this.handleSelectUser} />\n            </ListItem>\n        ));\n\n        const { photo } = chat;\n\n        const content = (\n            <>\n                <ChatDetailsHeader\n                    chatId={chatId}\n                    backButton={backButton}\n                    onClose={onClose}\n                    onClick={this.handleHeaderClick}\n                />\n                <div ref={this.chatDetailsListRef} className='chat-details-list'>\n                    <div className='chat-details-info'>\n                        <ChatControl\n                            chatId={chatId}\n                            showStatus={popup}\n                            showSavedMessages={!popup}\n                            onTileSelect={photo ? this.handleOpenViewer : null}\n                        />\n                    </div>\n                    {(username || phoneNumber || bio) && (\n                        <List>\n                            {username && (\n                                <ListItem button className={classes.listItem} onClick={this.handleUsernameHint}>\n                                    <ListItemIcon>\n                                        <AlternateEmailIcon />\n                                    </ListItemIcon>\n                                    <ListItemText\n                                        primary={\n                                            <Typography variant='inherit' noWrap>\n                                                {username}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                            )}\n                            {phoneNumber && (\n                                <>\n                                    <ListItem button className={classes.listItem} onClick={this.handlePhoneHint}>\n                                        <ListItemIcon>\n                                            <CallIcon />\n                                        </ListItemIcon>\n                                        <ListItemText\n                                            primary={\n                                                <Typography variant='inherit' noWrap>\n                                                    {formatPhoneNumber(phoneNumber)}\n                                                </Typography>\n                                            }\n                                        />\n                                    </ListItem>\n                                </>\n                            )}\n                            {bio && (\n                                <ListItem className={classes.listItem}>\n                                    <ListItemIcon>\n                                        <ErrorOutlineIcon className='chat-details-info-icon' />\n                                    </ListItemIcon>\n                                    <ListItemText\n                                        primary={bio}\n                                        style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}\n                                    />\n                                </ListItem>\n                            )}\n                        </List>\n                    )}\n                    <Divider />\n                    <List>\n                        {!isMe && <NotificationsListItem chatId={chatId} />}\n                        {isGroup && <MoreListItem chatId={chatId} />}\n                        {!isGroup && (\n                            <ListItem button className={classes.listItem} onClick={this.handleOpenChat}>\n                                <ListItemText\n                                    inset\n                                    primary={\n                                        <Typography color='primary' variant='inherit' noWrap>\n                                            {t('SendMessage').toUpperCase()}\n                                        </Typography>\n                                    }\n                                />\n                            </ListItem>\n                        )}\n                    </List>\n                    <Divider />\n                    <List>\n                        <ListItem button disabled className={classes.listItem} onClick={onOpenSharedMedia}>\n                            <ListItemIcon>\n                                <PhotoIcon />\n                            </ListItemIcon>\n                            <ListItemText\n                                primary={\n                                    <Typography variant='inherit' noWrap>\n                                        {t('SharedMedia')}\n                                    </Typography>\n                                }\n                            />\n                        </ListItem>\n                        {hasGroupsInCommon && (\n                            <ListItem button className={classes.listItem} onClick={onOpenGroupsInCommon}>\n                                <ListItemText\n                                    inset\n                                    primary={\n                                        <Typography variant='inherit' noWrap>\n                                            {t('GroupsInCommon')}\n                                        </Typography>\n                                    }\n                                />\n                            </ListItem>\n                        )}\n                    </List>\n                    {items.length > 0 && (\n                        <>\n                            <Divider />\n                            <List>{items}</List>\n                        </>\n                    )}\n                </div>\n            </>\n        );\n\n        return popup ? <>{content}</> : <div className={classNames('chat-details', className)}>{content}</div>;\n    }\n}\n\nChatDetails.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    popup: PropTypes.bool,\n    onClose: PropTypes.func,\n    onOpenSharedMedia: PropTypes.func,\n    onOpenGroupsInCommon: PropTypes.func\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withStyles(styles, { withTheme: true }),\n    withSnackbar,\n    withRestoreRef()\n);\n\nexport default enhance(ChatDetails);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport './GroupsInCommonHeader.css';\n\nconst styles = {\n    backIconButton: {\n        margin: '8px -2px 8px 12px'\n    }\n};\n\nclass GroupsInCommonHeader extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { classes, onClose } = this.props;\n\n        return (\n            <div className='header-master'>\n                <IconButton className={classes.backIconButton} onClick={onClose}>\n                    <ArrowBackIcon />\n                </IconButton>\n                <div className='header-status grow cursor-pointer'>\n                    <span className='header-status-content'>Groups in common</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nGroupsInCommonHeader.propTypes = {\n    onClose: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(GroupsInCommonHeader);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport ChatControl from '../Tile/ChatControl';\nimport GroupsInCommonHeader from './GroupsInCommonHeader';\nimport { getChatUserId } from '../../Utils/Chat';\nimport { loadChatsContent } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './GroupsInCommon.css';\n\nclass GroupsInCommon extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatIds: []\n        };\n    }\n\n    componentDidMount() {\n        const { chatId } = this.props;\n\n        const userId = getChatUserId(chatId);\n        if (!userId) return;\n\n        TdLibController.send({\n            '@type': 'getGroupsInCommon',\n            user_id: userId,\n            offset_chat_id: 0,\n            limit: 100\n        }).then(result => {\n            const store = FileStore.getStore();\n            loadChatsContent(store, result.chat_ids);\n\n            this.setState({ chatIds: result.chat_ids });\n        });\n    }\n\n    handleSelect = chat => {\n        const { popup } = this.props;\n\n        openChat(chat.id);\n\n        if (popup) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateDialogChatId',\n                chatId: 0\n            });\n        }\n    };\n\n    render() {\n        const { minHeight, onClose, popup } = this.props;\n        const { chatIds } = this.state;\n\n        const chats = chatIds.map(x => (\n            <ListItem button key={x}>\n                <ChatControl chatId={x} onSelect={this.handleSelect} />\n            </ListItem>\n        ));\n\n        const content = (\n            <>\n                <GroupsInCommonHeader onClose={onClose} />\n                <div className='groups-in-common-list' style={{ minHeight }}>\n                    {chats}\n                </div>\n            </>\n        );\n\n        return popup ? <>{content}</> : <div className='groups-in-common'>{content}</div>;\n    }\n}\n\nGroupsInCommon.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    onClose: PropTypes.func.isRequired,\n    popup: PropTypes.bool,\n    minHeight: PropTypes.number\n};\n\nGroupsInCommon.defaultProps = {\n    popup: false,\n    minHeight: 0\n};\n\nexport default GroupsInCommon;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport './SharedMediaHeaderControl.css';\n\nconst styles = {\n    backIconButton: {\n        margin: '8px -2px 8px 12px'\n    }\n};\n\nclass SharedMediaHeaderControl extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { classes, close } = this.props;\n\n        return (\n            <div className='header-master'>\n                <IconButton className={classes.backIconButton} onClick={close}>\n                    <ArrowBackIcon />\n                </IconButton>\n                <div className='header-status grow cursor-pointer'>\n                    <span className='header-status-content'>Shared Media</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(SharedMediaHeaderControl);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SharedMediaHeaderControl from './SharedMediaHeaderControl';\nimport './SharedMedia.css';\nimport PropTypes from 'prop-types';\nimport GroupsInCommon from './GroupsInCommon';\n\nclass SharedMedia extends React.Component {\n    state = {\n        value: 0\n    };\n\n    handleChange = (event, value) => {\n        this.setState({ value });\n    };\n\n    render() {\n        const { onClose, popup } = this.props;\n        const { value } = this.state;\n\n        const content = (\n            <>\n                <SharedMediaHeaderControl close={onClose} />\n                <Tabs\n                    value={value}\n                    onChange={this.handleChange}\n                    indicatorColor='primary'\n                    textColor='primary'\n                    scrollable\n                    scrollButtons='off'\n                    fullWidth>\n                    <Tab label='Media' style={{ minWidth: '40px' }} />\n                    <Tab label='Docs' style={{ minWidth: '40px' }} />\n                    <Tab label='Links' style={{ minWidth: '40px' }} />\n                    <Tab label='Audio' style={{ minWidth: '40px' }} />\n                </Tabs>\n            </>\n        );\n\n        return popup ? <>{content}</> : <div className='shared-media'>{content}</div>;\n    }\n}\n\nSharedMedia.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    onClose: PropTypes.func.isRequired,\n    popup: PropTypes.bool,\n    minHeight: PropTypes.number\n};\n\nSharedMedia.defaultProps = {\n    popup: false,\n    minHeight: 0\n};\n\nexport default SharedMedia;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport ChatDetails from './ChatDetails';\nimport GroupsInCommon from './GroupsInCommon';\nimport SharedMedia from './SharedMedia';\nimport { borderStyle } from '../Theme';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ChatInfo.css';\n\n// const styles = (theme) => ({\n//     borderColor: {\n//         borderColor: theme.palette.divider\n//     }\n// });\n\nclass ChatInfo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.detailsRef = React.createRef();\n\n        const { popup } = props;\n\n        this.state = {\n            chatId: popup ? ApplicationStore.dialogChatId : ApplicationStore.chatId\n        };\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    onClientUpdateChatId = update => {\n        const { popup } = this.props;\n        if (popup) return;\n\n        this.setState({\n            chatId: update.nextChatId,\n            userChatId: null,\n            openSharedMedia: false,\n            openGroupsInCommon: false\n        });\n    };\n\n    handelOpenSharedMedia = () => {\n        this.setState({ openSharedMedia: true });\n    };\n\n    handleCloseSharedMedia = () => {\n        this.setState({ openSharedMedia: false });\n    };\n\n    handleOpenGroupsInCommon = height => {\n        console.log('ChatInfo.handleOpenGroupsInCommon', height);\n        this.setState({ openGroupsInCommon: true });\n    };\n\n    handleCloseGroupsInCommon = () => {\n        this.setState({ openGroupsInCommon: false });\n    };\n\n    handleCloseChatDetails = () => {\n        const { popup } = this.props;\n        const { userChatId } = this.state;\n        if (userChatId) {\n            this.setState({ userChatId: null });\n        } else if (popup) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateDialogChatId',\n                chatId: 0\n            });\n        } else {\n            ApplicationStore.changeChatDetailsVisibility(false);\n        }\n    };\n\n    handleSelectUser = async user => {\n        if (!user) return;\n\n        let chat = await TdLibController.send({\n            '@type': 'createPrivateChat',\n            user_id: user.id,\n            force: true\n        });\n\n        chat = ChatStore.get(chat.id) || chat;\n        if (!chat) return;\n\n        this.setState({ userChatId: chat.id });\n    };\n\n    render() {\n        const { classes, className, popup } = this.props;\n        const { chatId, userChatId, openSharedMedia, openGroupsInCommon } = this.state;\n        const currentChatId = chatId || userChatId;\n        const minHeight = this.detailsRef && this.detailsRef.current ? this.detailsRef.current.getContentHeight() : 0;\n\n        let content = null;\n        if (openSharedMedia) {\n            content = (\n                <SharedMedia\n                    chatId={currentChatId}\n                    popup={popup}\n                    minHeight={minHeight}\n                    onClose={this.handleCloseSharedMedia}\n                />\n            );\n        } else if (openGroupsInCommon) {\n            content = (\n                <GroupsInCommon\n                    chatId={currentChatId}\n                    popup={popup}\n                    minHeight={minHeight}\n                    onClose={this.handleCloseGroupsInCommon}\n                />\n            );\n        } else {\n            content = (\n                <ChatDetails\n                    ref={this.detailsRef}\n                    chatId={currentChatId}\n                    popup={popup}\n                    backButton={userChatId === chatId}\n                    onOpenSharedMedia={this.handelOpenSharedMedia}\n                    onOpenGroupsInCommon={this.handleOpenGroupsInCommon}\n                    onClose={this.handleCloseChatDetails}\n                />\n            );\n        }\n\n        return popup ? (\n            <>{content}</>\n        ) : (\n            <div className={classNames(classes.borderColor, { 'right-column': !popup }, className)}>{content}</div>\n        );\n    }\n}\n\nChatInfo.propTypes = {\n    className: PropTypes.string,\n    classes: PropTypes.object,\n    popup: PropTypes.bool\n};\n\nChatInfo.defaultProps = {\n    className: null,\n    classes: null,\n    popup: false\n};\n\nexport default withStyles(borderStyle)(ChatInfo);\n"],"sourceRoot":""}