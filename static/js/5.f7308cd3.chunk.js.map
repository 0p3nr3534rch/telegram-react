{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","loadContent","info","_this","props","stickers","store","FileStore","getStore","forEach","x","loadStickerContent","nextProps","nextState","nextContext","this","_this$props","classes","onSelect","title","items","map","react_default","a","createElement","className","classNames","stickerSetItem","key","sticker","id","data-sticker-id","onClick","Sticker","displaySize","STICKER_SMALL_DISPLAY_SIZE","blur","React","Component","withStyles","theme","background","palette","type","paper","color","text","primary","width","height","padding","boxSizing","&:hover","borderRadius","StickersPicker","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","asyncToGenerator","regenerator_default","mark","_callee","result","promises","sets","wrap","_context","prev","next","state","stickerSets","abrupt","TdLibController","send","@type","is_masks","sent","slice","push","set_id","Promise","all","setsLength","length","setState","stop","handleScroll","_callee2","scroll","loadChunk","_this$state","date","concatSets","_context2","scrollRef","current","loadingChunk","scrollTop","offsetHeight","scrollHeight","Date","now","finally","console","log","concat","getItems","set","loadPreviewContent","stickerId","find","then","previewStickerId","previewStickerEmojis","emojis","join","handleMouseOver","event","handleMouseOut","handleMouseDown","Number","target","dataset","mouseDownStickerId","timestamp","showPreview","cancelSend","setTimeout","mouseDown","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","createRef","position","_this$state2","Components_ColumnMiddle_StickerSet","ref","onScroll","Boolean","StickersHint","STICKER_PREVIEW_DISPLAY_SIZE","EmojiPickerButton","onClientUpdateChange","update","picker","updateAnchorEl","anchorEl","tab","switchPopover","currentTarget","handleMouseLeave","handleEmojiClick","handleStickersClick","stickersPickerRef","handleStickerSend","clientUpdate","popoverRef","ApplicationStore","on","LocalizationStore","removeListener","_this2","t","open","i18n","search","notfound","skintext","categories","recent","people","nature","foods","activity","places","objects","symbols","flags","custom","dist_es","showSkinTones","dark","style","overflowX","Fragment","rel","href","IconButton_default","iconButton","aria-label","onMouseEnter","InsertEmoticon_default","Popover_default","onClose","anchorOrigin","vertical","horizontal","transformOrigin","transitionDuration","Button_default","headerButton","emoji-picker-content-stickers","Components_ColumnMiddle_StickersPicker","enhance","compose","margin","flex","withTheme","withTranslation"],"mappings":"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","file":"static/js/5.f7308cd3.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Sticker from '../Message/Media/Sticker';\nimport { loadStickerContent } from '../../Utils/File';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport './StickerSet.css';\n\nconst styles = theme => ({\n    title: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.paper : '#FFFFFF',\n        color: theme.palette.text.primary\n    },\n    stickerSetItem: {\n        width: STICKER_SMALL_DISPLAY_SIZE,\n        height: STICKER_SMALL_DISPLAY_SIZE,\n        padding: 3,\n        boxSizing: 'border-box',\n        '&:hover': {\n            background: theme.palette.type === 'dark' ? '#303030' : '#f4f4f4',\n            borderRadius: 6\n        }\n    }\n});\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info } = this.props;\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        this.loadContent();\n    }\n\n    loadContent = () => {\n        //return;\n        const { info } = this.props;\n        if (!info) return;\n\n        const { stickers } = info;\n        if (!stickers) return;\n\n        const store = FileStore.getStore();\n        stickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    render() {\n        const { classes, info, onSelect } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map(x => (\n            <div\n                className={classNames('sticker-set-item', classes.stickerSetItem)}\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}>\n                <Sticker\n                    key={x.sticker.id}\n                    className='sticker-set-item-sticker'\n                    sticker={x}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    blur={false}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className={classNames('sticker-set-title', classes.title)}>\n                    <span>{title}</span>\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(StickerSet);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StickerSet from './StickerSet';\nimport Sticker from './StickersHint';\nimport { loadStickerContent } from '../../Utils/File';\nimport { STICKER_PREVIEW_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n\n        this.state = {\n            stickerSets: null,\n            sets: [],\n            position: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return (\n            nextState.stickerSets !== this.state.stickerSets ||\n            nextState.sets !== this.state.sets ||\n            nextState.position !== this.state.position\n        );\n    }\n\n    loadContent = async () => {\n        const { stickerSets } = this.state;\n        if (stickerSets) return;\n\n        const result = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        result.sets.slice(0, 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const sets = await Promise.all(promises);\n        this.setsLength = sets.length;\n        this.setState({ stickerSets: result, sets });\n    };\n\n    handleScroll = async () => {\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const date = Date.now();\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n        this.setsLength += result.length;\n        console.log('StickersPicker.handleScroll', Date.now() - date, sets.concat(result), stickerSets);\n        let concatSets = sets.concat(result);\n        // if (concatSets.length > 10) {\n        //     concatSets = concatSets.slice(5);\n        // }\n        this.setState({ sets: concatSets });\n    };\n\n    getItems = sets => {\n        const stickers = [];\n        sets.forEach(set => {\n            set.stickers.forEach(sticker => {\n                stickers.push(sticker);\n            });\n        });\n\n        return stickers;\n    };\n\n    loadPreviewContent = stickerId => {\n        const { sets } = this.state;\n        const items = this.getItems(sets);\n\n        const sticker = items.find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n\n        TdLibController.send({\n            '@type': 'getStickerEmojis',\n            sticker: {\n                '@type': 'inputFileId',\n                id: stickerId\n            }\n        }).then(result => {\n            const { previewStickerId } = this.state;\n            if (previewStickerId === stickerId) {\n                this.setState({\n                    previewStickerEmojis: result.emojis.join(' ')\n                });\n            }\n        });\n\n        // const preloadStickers = this.getNeighborStickers(stickerId, items, stickersPerRow);\n        // preloadStickers.forEach(x => {\n        //     loadStickerContent(store, x, null);\n        // });\n    };\n\n    handleMouseOver = event => {};\n\n    handleMouseOut = event => {};\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.target.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    render() {\n        const { onSelect } = this.props;\n        const { stickerSets, sets, previewStickerId, showPreview, previewStickerEmojis, position } = this.state;\n        if (!stickerSets) return null;\n\n        if (!sets) return null;\n        if (!sets.length) return null;\n\n        const items = sets.map(x => <StickerSet key={x.id} info={x} onSelect={onSelect} />);\n        const sticker = this.getItems(sets).find(x => x.sticker.id === previewStickerId);\n\n        return (\n            <div className='stickers-picker'>\n                <div className='stickers-picker-header' />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {items}\n                </div>\n                {/*<div>{position}</div>*/}\n                {Boolean(sticker) && showPreview && (\n                    <div className='sticker-set-dialog-preview'>\n                        <div className='sticker-set-dialog-preview-emoji'>{previewStickerEmojis}</div>\n                        <Sticker sticker={sticker} displaySize={STICKER_PREVIEW_DISPLAY_SIZE} />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPicker;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport Popover from '@material-ui/core/Popover';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickersPicker from './StickersPicker';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nconst styles = {\n    iconButton: {\n        margin: '8px 0px'\n    },\n    headerButton: {\n        borderRadius: 0,\n        flex: '50%'\n    }\n};\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorEl: null,\n            tab: 0\n        };\n\n        this.stickersPickerRef = React.createRef();\n        this.popoverRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.removeListener('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    updateAnchorEl = anchorEl => {\n        this.setState({ anchorEl: anchorEl, tab: anchorEl === null ? 0 : this.state.tab });\n    };\n\n    switchPopover = event => {\n        this.updateAnchorEl(this.state.anchorEl ? null : event.currentTarget);\n    };\n\n    handleMouseOut = event => {\n        //console.log('Popover.handleMouseOut', event.target, event.currentTarget);\n    };\n\n    handleMouseLeave = event => {\n        //console.log('Popover.handleMouseLeave', event);\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        this.stickersPickerRef.current.loadContent();\n\n        this.setState({ tab: 1 });\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updateAnchorEl(null);\n    };\n\n    render() {\n        const { classes, theme, t } = this.props;\n        const { anchorEl, tab } = this.state;\n\n        const open = Boolean(anchorEl);\n\n        if (!this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className={classes.iconButton}\n                    aria-label='Emoticon'\n                    onMouseEnter={this.switchPopover}\n                    onClick={this.switchPopover}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <Popover\n                    id='render-props-popover'\n                    ref={this.popoverRef}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={() => this.updateAnchorEl(null)}\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left'\n                    }}\n                    transformOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left'\n                    }}\n                    transitionDuration={0}>\n                    <div style={{ width: 338, overflowX: 'hidden', background: 'transparent' }}>\n                        <div className='emoji-picker-header'>\n                            <Button\n                                color={tab === 0 ? 'primary' : 'default'}\n                                className={classes.headerButton}\n                                onClick={this.handleEmojiClick}>\n                                EMOJI\n                            </Button>\n                            <Button\n                                color={tab === 1 ? 'primary' : 'default'}\n                                className={classes.headerButton}\n                                onClick={this.handleStickersClick}>\n                                STICKERS\n                            </Button>\n                        </div>\n                        <div\n                            className={classNames('emoji-picker-content', {\n                                'emoji-picker-content-stickers': tab === 1\n                            })}>\n                            {this.picker}\n                            <StickersPicker ref={this.stickersPickerRef} onSelect={this.handleStickerSend} />\n                        </div>\n                    </div>\n                </Popover>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}