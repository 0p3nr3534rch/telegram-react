{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","loadContent","info","_this","props","stickers","store","FileStore","getStore","forEach","x","loadStickerContent","nextProps","nextState","nextContext","this","console","log","_this$props","classes","onSelect","title","items","map","react_default","a","createElement","className","key","sticker","id","data-sticker-id","style","width","STICKER_SMALL_DISPLAY_SIZE","height","onClick","Sticker","displaySize","blur","classNames","React","Component","withStyles","theme","background","palette","type","paper","color","text","primary","StickersPicker","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","asyncToGenerator","regenerator_default","mark","_callee","result","promises","sets","wrap","_context","prev","next","state","stickerSets","abrupt","TdLibController","send","@type","is_masks","sent","slice","push","set_id","Promise","all","setState","stop","handleScroll","_callee2","loadChunk","scroll","_this$state","date","_context2","scrollRef","current","scrollTop","offsetHeight","scrollHeight","loadingChunk","length","Date","now","finally","concat","getItems","set","loadPreviewContent","stickerId","find","then","previewStickerId","previewStickerEmojis","emojis","join","handleMouseOver","event","handleMouseOut","handleMouseDown","Number","target","dataset","mouseDownStickerId","timestamp","showPreview","cancelSend","setTimeout","mouseDown","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","createRef","_this$state2","Components_ColumnMiddle_StickerSet","ref","onScroll","Boolean","StickersHint","STICKER_PREVIEW_DISPLAY_SIZE","EmojiPickerButton","onClientUpdateChange","update","picker","updateAnchorEl","anchorEl","tab","switchPopover","currentTarget","handleMouseLeave","handleEmojiClick","handleStickersClick","stickersPickerRef","handleStickerSend","clientUpdate","popoverRef","ApplicationStore","on","LocalizationStore","removeListener","_this2","t","open","i18n","search","notfound","skintext","categories","recent","people","nature","foods","activity","places","objects","symbols","flags","custom","dist_es","showSkinTones","dark","overflowX","Fragment","rel","href","IconButton_default","iconButton","aria-label","onMouseEnter","InsertEmoticon_default","Popover_default","onClose","anchorOrigin","vertical","horizontal","transformOrigin","transitionDuration","Button_default","headerButton","emoji-picker-content-stickers","Components_ColumnMiddle_StickersPicker","enhance","compose","margin","borderRadius","flex","withTheme","withTranslation"],"mappings":"wZAwBMA,qNAkBFC,YAAc,WAAM,IACRC,EAASC,EAAKC,MAAdF,KACR,GAAKA,EAAL,CAFgB,IAIRG,EAAaH,EAAbG,SACR,GAAKA,EAAL,CAEA,IAAMC,EAAQC,IAAUC,WACxBH,EAASI,QAAQ,SAAAC,GACbC,YAAmBL,EAAOI,EAAG,gGAzBfE,EAAWC,EAAWC,GAGxC,OAFiBC,KAAKX,MAAdF,OAEKU,EAAUV,MACnBc,QAAQC,IAAI,yDACL,IAGXD,QAAQC,IAAI,0DACL,+CAIPF,KAAKd,+CAgBA,IAAAiB,EAC+BH,KAAKX,MAAjCe,EADHD,EACGC,QAASjB,EADZgB,EACYhB,KAAMkB,EADlBF,EACkBE,SACvB,IAAKlB,EAAM,OAAO,KAFb,IAIGmB,EAAoBnB,EAApBmB,MAEFC,EAFsBpB,EAAbG,SAEQkB,IAAI,SAAAb,GAAC,OACxBc,EAAAC,EAAAC,cAAA,OACIC,UAAU,mBACVC,IAAKlB,EAAEmB,QAAQC,GACfC,kBAAiBrB,EAAEmB,QAAQC,GAC3BE,MAAO,CAAEC,MAAOC,IAA4BC,OAAQD,KACpDE,QAAS,kBAAMhB,EAASV,KACxBc,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIT,IAAKlB,EAAEmB,QAAQC,GACfH,UAAU,2BACVE,QAASnB,EACT4B,YAAaJ,IACbK,MAAM,OAKlB,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAWa,IAAW,oBAAqBrB,EAAQE,QACpDG,EAAAC,EAAAC,cAAA,YAAOL,IAEXG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBL,WA3D7BmB,IAAMC,YAsEhBC,MA7EA,SAAAC,GAAK,MAAK,CACrBvB,MAAO,CACHwB,WAAmC,SAAvBD,EAAME,QAAQC,KAAkBH,EAAME,QAAQD,WAAWG,MAAQ,UAC7EC,MAAOL,EAAME,QAAQI,KAAKC,WA0EnBR,CAAmB3C,mBCsHnBoD,sBAlMX,SAAAA,EAAYhD,GAAO,IAAAD,EAAA,OAAAkD,OAAAC,EAAA,EAAAD,CAAAtC,KAAAqC,IACfjD,EAAAkD,OAAAE,EAAA,EAAAF,CAAAtC,KAAAsC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1C,KAAMX,KAcVH,YAfmBoD,OAAAK,EAAA,EAAAL,CAAAM,EAAAlC,EAAAmC,KAeL,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAlC,EAAAwC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACcjE,EAAKkE,MAArBC,YADE,CAAAJ,EAAAE,KAAA,eAAAF,EAAAK,OAAA,wBAAAL,EAAAE,KAAA,EAIWI,IAAgBC,KAAK,CACtCC,QAAS,0BACTC,UAAU,IANJ,cAIJb,EAJII,EAAAU,KASJb,EAAW,GACjBD,EAAOE,KAAKa,MAAM,EAAG,GAAGpE,QAAQ,SAAAC,GAC5BqD,EAASe,KACLN,IAAgBC,KAAK,CACjBC,QAAS,gBACTK,OAAQrE,EAAEoB,QAdZoC,EAAAE,KAAA,GAmBSY,QAAQC,IAAIlB,GAnBrB,QAmBJC,EAnBIE,EAAAU,KAoBVzE,EAAK+E,SAAS,CAAEZ,YAAaR,EAAQE,SApB3B,yBAAAE,EAAAiB,SAAAtB,MAfK1D,EAsCnBiF,aAtCmB/B,OAAAK,EAAA,EAAAL,CAAAM,EAAAlC,EAAAmC,KAsCJ,SAAAyB,IAAA,IAAAC,EAAAC,EAAAC,EAAAxB,EAAAM,EAAAmB,EAAA1B,EAAAD,EAAA,OAAAH,EAAAlC,EAAAwC,KAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,UACXpD,QAAQC,IAAI,8BACRd,EAAKwF,UAAUC,QAAQC,UACvB1F,EAAKwF,UAAUC,QAAQE,aACvB3F,EAAKwF,UAAUC,QAAQG,eAGvB5F,EAAK6F,aAPE,CAAAN,EAAAtB,KAAA,eAAAsB,EAAAnB,OAAA,oBASPe,GAAY,GACVC,EAASpF,EAAKwF,UAAUC,SACnBC,UAAYN,EAAOO,cAAgBP,EAAOQ,aAAe,MAChET,GAAY,GAGXA,EAfM,CAAAI,EAAAtB,KAAA,eAAAsB,EAAAnB,OAAA,UAgBA,GAhBA,UAAAiB,EAmBmBrF,EAAKkE,MAA3BL,EAnBGwB,EAmBHxB,MAAMM,EAnBHkB,EAmBGlB,aACEN,KAAKiC,SAAWjC,EAAKiC,OApB1B,CAAAP,EAAAtB,KAAA,gBAAAsB,EAAAnB,OAAA,yBAsBXpE,EAAK6F,cAAe,EACdP,EAAOS,KAAKC,MACZpC,EAAW,GACjBO,EAAYN,KAAKa,MAAMb,EAAKiC,OAAQjC,EAAKiC,OAAS,GAAGxF,QAAQ,SAAAC,GACzDqD,EAASe,KACLN,IAAgBC,KAAK,CACjBC,QAAS,gBACTK,OAAQrE,EAAEoB,QA7BX4D,EAAAtB,KAAA,GAkCUY,QAAQC,IAAIlB,GAAUqC,QAAQ,kBAAMjG,EAAK6F,cAAe,IAlClE,QAkCLlC,EAlCK4B,EAAAd,KAoCX5D,QAAQC,IAAI,8BAA+BiF,KAAKC,MAAQV,EAAMzB,EAAKqC,OAAOvC,GAASQ,GACnFnE,EAAK+E,SAAS,CAAElB,KAAMA,EAAKqC,OAAOvC,KArCvB,yBAAA4B,EAAAP,SAAAE,MAtCIlF,EA+EnBmG,SAAW,SAAAtC,GACP,IAAM3D,EAAW,GAOjB,OANA2D,EAAKvD,QAAQ,SAAA8F,GACTA,EAAIlG,SAASI,QAAQ,SAAAoB,GACjBxB,EAASyE,KAAKjD,OAIfxB,GAvFQF,EA0FnBqG,mBAAqB,SAAAC,GAAa,IACtBzC,EAAS7D,EAAKkE,MAAdL,KAGFnC,EAFQ1B,EAAKmG,SAAStC,GAEN0C,KAAK,SAAAhG,GAAC,OAAIA,EAAEmB,QAAQC,KAAO2E,IACjD,GAAK5E,EAAL,CAEA,IAAMvB,EAAQC,IAAUC,WACxBG,YAAmBL,EAAOuB,EAAS,MAInC2C,IAAgBC,KAAK,CACjBC,QAAS,mBACT7C,QAAS,CACL6C,QAAS,cACT5C,GAAI2E,KAETE,KAAK,SAAA7C,GACyB3D,EAAKkE,MAA1BuC,mBACiBH,GACrBtG,EAAK+E,SAAS,CACV2B,qBAAsB/C,EAAOgD,OAAOC,KAAK,WAhHtC5G,EA2HnB6G,gBAAkB,SAAAC,KA3HC9G,EA6HnB+G,eAAiB,SAAAD,KA7HE9G,EA+HnBgH,gBAAkB,SAAAF,GACd,IAAMR,EAAYW,OAAOH,EAAMI,OAAOC,QAAQb,WAC9C,GAAKA,EAAL,CAEAtG,EAAKoH,mBAAqBd,EAC1B,IAAMN,EAAMD,KAAKC,MAiBjB,OAfAhG,EAAK+E,SAAS,CAAE0B,iBAAkBH,EAAWe,UAAWrB,EAAKsB,aAAa,EAAOC,YAAY,IAC7FC,WAAW,WACexH,EAAKkE,MAAnBmD,YACUrB,GACdhG,EAAK+E,SAAS,CAAEuC,aAAa,EAAMC,YAAY,KAEpD,KAEHvH,EAAKqG,mBAAmBC,GAExBtG,EAAKyH,WAAY,EACjBC,SAASC,iBAAiB,UAAW3H,EAAK4H,eAE1Cd,EAAMe,iBACNf,EAAMgB,mBACC,IArJQ9H,EAwJnB4H,cAAgB,WACZ5H,EAAK+E,SAAS,CAAE0B,iBAAkB,EAAGY,UAAW,EAAGC,aAAa,IAChEtH,EAAKyH,WAAY,EACjBC,SAASK,oBAAoB,UAAW/H,EAAK4H,gBAxJ7C5H,EAAKwF,UAAYlD,IAAM0F,YAEvBhI,EAAKkE,MAAQ,CACTC,YAAa,KACbN,KAAM,IAPK7D,qFAWGS,EAAWC,EAAWC,GACxC,OAAOD,EAAUyD,cAAgBvD,KAAKsD,MAAMC,aAAezD,EAAUmD,OAASjD,KAAKsD,MAAML,sCAkJpF,IACG5C,EAAaL,KAAKX,MAAlBgB,SADHgH,EAE8ErH,KAAKsD,MAAhFC,EAFH8D,EAEG9D,YAAaN,EAFhBoE,EAEgBpE,KAAM4C,EAFtBwB,EAEsBxB,iBAAkBa,EAFxCW,EAEwCX,YAAaZ,EAFrDuB,EAEqDvB,qBAC1D,IAAKvC,EAAa,OAAO,KAEzB,IAAKN,EAAM,OAAO,KAClB,IAAKA,EAAKiC,OAAQ,OAAO,KAEzB,IAAM3E,EAAQ0C,EAAKzC,IAAI,SAAAb,GAAC,OAAIc,EAAAC,EAAAC,cAAC2G,EAAD,CAAYzG,IAAKlB,EAAEoB,GAAI5B,KAAMQ,EAAGU,SAAUA,MAChES,EAAUd,KAAKuF,SAAStC,GAAM0C,KAAK,SAAAhG,GAAC,OAAIA,EAAEmB,QAAQC,KAAO8E,IAE/D,OACIpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACfH,EAAAC,EAAAC,cAAA,OACI4G,IAAKvH,KAAK4E,UACVhE,UAAU,yBACV4G,SAAUxH,KAAKqE,cAEd9D,GAEJkH,QAAQ3G,IAAY4F,GACjBjG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCAAoCkF,GACnDrF,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CAAS5G,QAASA,EAASS,YAAaoG,eAvLnCjG,IAAMC,4BCgB7BiG,sBACF,SAAAA,EAAYvI,GAAO,IAAAD,EAAA,OAAAkD,OAAAC,EAAA,EAAAD,CAAAtC,KAAA4H,IACfxI,EAAAkD,OAAAE,EAAA,EAAAF,CAAAtC,KAAAsC,OAAAG,EAAA,EAAAH,CAAAsF,GAAAlF,KAAA1C,KAAMX,KAqBVwI,qBAAuB,SAAAC,GACnB1I,EAAK2I,OAAS,MAvBC3I,EA0BnB4I,eAAiB,SAAAC,GACb7I,EAAK+E,SAAS,CAAE8D,SAAUA,EAAUC,IAAkB,OAAbD,EAAoB,EAAI7I,EAAKkE,MAAM4E,OA3B7D9I,EA8BnB+I,cAAgB,SAAAjC,GACZ9G,EAAK4I,eAAe5I,EAAKkE,MAAM2E,SAAW,KAAO/B,EAAMkC,gBA/BxChJ,EAkCnB+G,eAAiB,SAAAD,KAlCE9G,EAsCnBiJ,iBAAmB,SAAAnC,KAtCA9G,EA0CnBkJ,iBAAmB,WACflJ,EAAK+E,SAAS,CAAE+D,IAAK,KA3CN9I,EA8CnBmJ,oBAAsB,WAClBnJ,EAAKoJ,kBAAkB3D,QAAQ3F,cAE/BE,EAAK+E,SAAS,CAAE+D,IAAK,KAjDN9I,EAoDnBqJ,kBAAoB,SAAA3H,GACXA,IAEL2C,IAAgBiF,aAAa,CACzB/E,QAAS,0BACT7C,YAGJ1B,EAAK4I,eAAe,QAzDpB5I,EAAKkE,MAAQ,CACT2E,SAAU,KACVC,IAAK,GAGT9I,EAAKoJ,kBAAoB9G,IAAM0F,YAC/BhI,EAAKuJ,WAAajH,IAAM0F,YATThI,mFAafwJ,IAAiBC,GAAG,0BAA2B7I,KAAK6H,sBACpDiB,IAAkBD,GAAG,6BAA8B7I,KAAK6H,qEAIxDe,IAAiBG,eAAe,0BAA2B/I,KAAK6H,sBAChEiB,IAAkBC,eAAe,6BAA8B/I,KAAK6H,uDA4C/D,IAAAmB,EAAAhJ,KAAAG,EACyBH,KAAKX,MAA3Be,EADHD,EACGC,QAASyB,EADZ1B,EACY0B,MAAOoH,EADnB9I,EACmB8I,EADnBxE,EAEqBzE,KAAKsD,MAAvB2E,EAFHxD,EAEGwD,SAAUC,EAFbzD,EAEayD,IAEZgB,EAAOzB,QAAQQ,GAErB,IAAKjI,KAAK+H,OAAQ,CACd,IAAMoB,EAAO,CACTC,OAAQH,EAAE,UACVI,SAAUJ,EAAE,iBACZK,SAAUL,EAAE,yBACZM,WAAY,CACRH,OAAQH,EAAE,iBACVO,OAAQP,EAAE,UACVQ,OAAQR,EAAE,iBACVS,OAAQT,EAAE,iBACVU,MAAOV,EAAE,aACTW,SAAUX,EAAE,YACZY,OAAQZ,EAAE,gBACVa,QAASb,EAAE,WACXc,QAASd,EAAE,WACXe,MAAOf,EAAE,SACTgB,OAAQhB,EAAE,YAIlBjJ,KAAK+H,OACDtH,EAAAC,EAAAC,cAACuJ,EAAA,EAAD,CACI1E,IAAI,QACJkB,aAAa,EACbyD,eAAe,EACf9J,SAAUL,KAAKX,MAAMgB,SACrB6B,MAAOL,EAAME,QAAQK,QAAQgI,KAC7BjB,KAAMA,EACNlI,MAAO,CAAEC,MAAO,IAAKmJ,UAAW,YAK5C,OACI5J,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4J,SAAA,KACI7J,EAAAC,EAAAC,cAAA,QACI4J,IAAI,aACJvI,KAAK,WACLwI,KAA6B,SAAvB3I,EAAME,QAAQC,KAAkB,sBAAwB,yBAElEvB,EAAAC,EAAAC,cAAC8J,EAAA/J,EAAD,CACIE,UAAWR,EAAQsK,WACnBC,aAAW,WACXC,aAAc5K,KAAKmI,cACnB9G,QAASrB,KAAKmI,eACd1H,EAAAC,EAAAC,cAACkK,EAAAnK,EAAD,OAEJD,EAAAC,EAAAC,cAACmK,EAAApK,EAAD,CACIK,GAAG,uBACHwG,IAAKvH,KAAK2I,WACVO,KAAMA,EACNjB,SAAUA,EACV8C,QAAS,kBAAM/B,EAAKhB,eAAe,OACnCgD,aAAc,CACVC,SAAU,MACVC,WAAY,QAEhBC,gBAAiB,CACbF,SAAU,SACVC,WAAY,QAEhBE,mBAAoB,GACpB3K,EAAAC,EAAAC,cAAA,OACIM,MAAO,CAAEC,MAAO,IAAKmJ,UAAW,SAAUvI,WAAY,gBAEtDrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAC0K,EAAA3K,EAAD,CACIwB,MAAe,IAARgG,EAAY,UAAY,UAC/BtH,UAAWR,EAAQkL,aACnBjK,QAASrB,KAAKsI,kBAHlB,SAMA7H,EAAAC,EAAAC,cAAC0K,EAAA3K,EAAD,CACIwB,MAAe,IAARgG,EAAY,UAAY,UAC/BtH,UAAWR,EAAQkL,aACnBjK,QAASrB,KAAKuI,qBAHlB,aAOJ9H,EAAAC,EAAAC,cAAA,OACIC,UAAWa,IAAW,uBAAwB,CAC1C8J,gCAAyC,IAARrD,KAEpClI,KAAK+H,OACNtH,EAAAC,EAAAC,cAAC6K,EAAD,CAAgBjE,IAAKvH,KAAKwI,kBAAmBnI,SAAUL,KAAKyI,+BA1JxD/G,IAAMC,YAmKhC8J,EAAUC,YACZ9J,IA9KW,CACX8I,WAAY,CACRiB,OAAQ,WAEZL,aAAc,CACVM,aAAc,EACdC,KAAM,QAwKS,CAAEC,WAAW,IAChCC,eAGWN,YAAQ7D","file":"static/js/5.5cd5b515.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Sticker from '../Message/Media/Sticker';\nimport { loadStickerContent } from '../../Utils/File';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport './StickerSet.css';\n\nconst styles = theme => ({\n    title: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.paper : '#FFFFFF',\n        color: theme.palette.text.primary\n    }\n});\n\nclass StickerSet extends React.Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info } = this.props;\n\n        if (info !== nextProps.info) {\n            console.log('StickersPicker.StickerSet.shouldComponentUpdate=true');\n            return true;\n        }\n\n        console.log('StickersPicker.StickerSet.shouldComponentUpdate=false');\n        return false;\n    }\n\n    componentDidMount() {\n        this.loadContent();\n    }\n\n    loadContent = () => {\n        const { info } = this.props;\n        if (!info) return;\n\n        const { stickers } = info;\n        if (!stickers) return;\n\n        const store = FileStore.getStore();\n        stickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    render() {\n        const { classes, info, onSelect } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map(x => (\n            <div\n                className='sticker-set-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                style={{ width: STICKER_SMALL_DISPLAY_SIZE, height: STICKER_SMALL_DISPLAY_SIZE }}\n                onClick={() => onSelect(x)}>\n                <Sticker\n                    key={x.sticker.id}\n                    className='sticker-set-item-sticker'\n                    sticker={x}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE}\n                    blur={false}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className={classNames('sticker-set-title', classes.title)}>\n                    <span>{title}</span>\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(StickerSet);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StickerSet from './StickerSet';\nimport Sticker from './StickersHint';\nimport { loadStickerContent } from '../../Utils/File';\nimport { STICKER_PREVIEW_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n\n        this.state = {\n            stickerSets: null,\n            sets: []\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return nextState.stickerSets !== this.state.stickerSets || nextState.sets !== this.state.sets;\n    }\n\n    loadContent = async () => {\n        const { stickerSets } = this.state;\n        if (stickerSets) return;\n\n        const result = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        result.sets.slice(0, 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const sets = await Promise.all(promises);\n        this.setState({ stickerSets: result, sets });\n    };\n\n    handleScroll = async () => {\n        console.log('StickersPicker.handleScroll',\n            this.scrollRef.current.scrollTop,\n            this.scrollRef.current.offsetHeight,\n            this.scrollRef.current.scrollHeight\n        );\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        const scroll = this.scrollRef.current;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const date = Date.now();\n        const promises = [];\n        stickerSets.sets.slice(sets.length, sets.length + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => this.loadingChunk = false);\n\n        console.log('StickersPicker.handleScroll', Date.now() - date, sets.concat(result), stickerSets);\n        this.setState({ sets: sets.concat(result) });\n\n    };\n\n    getItems = sets => {\n        const stickers = [];\n        sets.forEach(set => {\n            set.stickers.forEach(sticker => {\n                stickers.push(sticker);\n            });\n        });\n\n        return stickers;\n    };\n\n    loadPreviewContent = stickerId => {\n        const { sets } = this.state;\n        const items = this.getItems(sets);\n\n        const sticker = items.find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n\n        TdLibController.send({\n            '@type': 'getStickerEmojis',\n            sticker: {\n                '@type': 'inputFileId',\n                id: stickerId\n            }\n        }).then(result => {\n            const { previewStickerId } = this.state;\n            if (previewStickerId === stickerId) {\n                this.setState({\n                    previewStickerEmojis: result.emojis.join(' ')\n                });\n            }\n        });\n\n        // const preloadStickers = this.getNeighborStickers(stickerId, items, stickersPerRow);\n        // preloadStickers.forEach(x => {\n        //     loadStickerContent(store, x, null);\n        // });\n    };\n\n    handleMouseOver = event => {};\n\n    handleMouseOut = event => {};\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.target.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    render() {\n        const { onSelect } = this.props;\n        const { stickerSets, sets, previewStickerId, showPreview, previewStickerEmojis } = this.state;\n        if (!stickerSets) return null;\n\n        if (!sets) return null;\n        if (!sets.length) return null;\n\n        const items = sets.map(x => <StickerSet key={x.id} info={x} onSelect={onSelect} />);\n        const sticker = this.getItems(sets).find(x => x.sticker.id === previewStickerId);\n\n        return (\n            <div className='stickers-picker'>\n                <div className='stickers-picker-header' />\n                <div\n                    ref={this.scrollRef}\n                    className='stickers-picker-scroll'\n                    onScroll={this.handleScroll}\n                >\n                    {items}\n                </div>\n                {Boolean(sticker) && showPreview && (\n                    <div className='sticker-set-dialog-preview'>\n                        <div className='sticker-set-dialog-preview-emoji'>{previewStickerEmojis}</div>\n                        <Sticker sticker={sticker} displaySize={STICKER_PREVIEW_DISPLAY_SIZE} />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPicker;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport Popover from '@material-ui/core/Popover';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickersPicker from './StickersPicker';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nconst styles = {\n    iconButton: {\n        margin: '8px 0px'\n    },\n    headerButton: {\n        borderRadius: 0,\n        flex: '50%'\n    }\n};\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorEl: null,\n            tab: 0\n        };\n\n        this.stickersPickerRef = React.createRef();\n        this.popoverRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.removeListener('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    updateAnchorEl = anchorEl => {\n        this.setState({ anchorEl: anchorEl, tab: anchorEl === null ? 0 : this.state.tab });\n    };\n\n    switchPopover = event => {\n        this.updateAnchorEl(this.state.anchorEl ? null : event.currentTarget);\n    };\n\n    handleMouseOut = event => {\n        //console.log('Popover.handleMouseOut', event.target, event.currentTarget);\n    };\n\n    handleMouseLeave = event => {\n        //console.log('Popover.handleMouseLeave', event);\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        this.stickersPickerRef.current.loadContent();\n\n        this.setState({ tab: 1 });\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updateAnchorEl(null);\n    };\n\n    render() {\n        const { classes, theme, t } = this.props;\n        const { anchorEl, tab } = this.state;\n\n        const open = Boolean(anchorEl);\n\n        if (!this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className={classes.iconButton}\n                    aria-label='Emoticon'\n                    onMouseEnter={this.switchPopover}\n                    onClick={this.switchPopover}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <Popover\n                    id='render-props-popover'\n                    ref={this.popoverRef}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={() => this.updateAnchorEl(null)}\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left'\n                    }}\n                    transformOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left'\n                    }}\n                    transitionDuration={0}>\n                    <div\n                        style={{ width: 338, overflowX: 'hidden', background: 'transparent' }}\n                        >\n                        <div className='emoji-picker-header'>\n                            <Button\n                                color={tab === 0 ? 'primary' : 'default'}\n                                className={classes.headerButton}\n                                onClick={this.handleEmojiClick}>\n                                EMOJI\n                            </Button>\n                            <Button\n                                color={tab === 1 ? 'primary' : 'default'}\n                                className={classes.headerButton}\n                                onClick={this.handleStickersClick}>\n                                STICKERS\n                            </Button>\n                        </div>\n                        <div\n                            className={classNames('emoji-picker-content', {\n                                'emoji-picker-content-stickers': tab === 1\n                            })}>\n                            {this.picker}\n                            <StickersPicker ref={this.stickersPickerRef} onSelect={this.handleStickerSend} />\n                        </div>\n                    </div>\n                </Popover>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}