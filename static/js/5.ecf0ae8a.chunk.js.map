{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","loadContent","info","_this","props","stickers","store","FileStore","getStore","forEach","x","loadStickerContent","nextProps","nextState","nextContext","this","_this$props","classes","onSelect","onMouseDown","title","items","map","react_default","a","createElement","className","classNames","stickerSetItem","key","sticker","id","data-sticker-id","onClick","Sticker","displaySize","STICKER_SMALL_DISPLAY_SIZE","blur","React","Component","withStyles","theme","backgroundColor","palette","background","paper","color","text","primary","width","height","padding","boxSizing","&:hover","type","borderRadius","StickersPicker","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","stickerSets","sets","result","promises","slicedSets","wrap","_context","prev","next","state","abrupt","TdLibController","send","@type","is_masks","sent","push","set_id","Promise","all","slice","setState","setsLength","length","stop","_x","_x2","apply","arguments","updateItemsInView","scroll","scrollRef","current","inViewItems","item","itemsMap","get","node","ReactDOM","topBorder","scrollTop","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","console","log","loadStickerSetContent","handleScroll","_callee2","loadChunk","_this$state","date","concatSets","_context2","loadingChunk","scrollHeight","Date","now","finally","concat","getItems","set","loadPreviewContent","stickerId","find","then","previewStickerId","previewStickerEmojis","emojis","join","handleMouseOver","event","handleMouseOut","handleMouseDown","Number","target","dataset","mouseDownStickerId","timestamp","showPreview","cancelSend","setTimeout","mouseDown","preventDefault","stopPropagation","handleMouseUp","document","removeEventListener","createRef","Map","position","debounce","_this$state2","_this2","_this$state3","clear","Components_ColumnMiddle_StickerSet","ref","el","onScroll","Boolean","StickersHint","STICKER_PREVIEW_DISPLAY_SIZE","EmojiPickerButton","onClientUpdateChange","update","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","EMOJI_PICKER_TIMEOUT_MS","reverse","handleButtonMouseLeave","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","switchPicker","handleEmojiClick","tab","handleStickersClick","stickersPickerRef","handleStickerSend","clientUpdate","ApplicationStore","on","LocalizationStore","removeListener","t","i18n","search","notfound","skintext","categories","recent","people","nature","foods","activity","places","objects","symbols","flags","custom","dist_es","showSkinTones","dark","style","overflowX","stickersPicker","Components_ColumnMiddle_StickersPicker","Fragment","rel","href","IconButton_default","iconButton","aria-label","onMouseEnter","onMouseLeave","InsertEmoticon_default","pickerRoot","defineProperty","pickerRootOpened","Button_default","headerButton","emoji-picker-content-stickers","enhance","compose","margin","flex","shape","boxShadow","shadows","bottom","display","withTheme","withTranslation"],"mappings":"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","file":"static/js/5.ecf0ae8a.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Sticker from '../Message/Media/Sticker';\nimport { loadStickerContent } from '../../Utils/File';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport './StickerSet.css';\n\nconst styles = theme => ({\n    title: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary\n    },\n    stickerSetItem: {\n        width: STICKER_SMALL_DISPLAY_SIZE,\n        height: STICKER_SMALL_DISPLAY_SIZE,\n        padding: 3,\n        boxSizing: 'border-box',\n        '&:hover': {\n            background: theme.palette.type === 'dark' ? '#303030' : '#f4f4f4',\n            borderRadius: 6\n        }\n    }\n});\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info } = this.props;\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        //this.loadContent();\n    }\n\n    loadContent = () => {\n        const { info } = this.props;\n        if (!info) return;\n\n        const { stickers } = info;\n        if (!stickers) return;\n\n        const store = FileStore.getStore();\n        stickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    render() {\n        const { classes, info, onSelect, onMouseDown } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map(x => (\n            <div\n                className={classNames('sticker-set-item', classes.stickerSetItem)}\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseDown={onMouseDown}\n            >\n                <Sticker\n                    key={x.sticker.id}\n                    className='sticker-set-item-sticker'\n                    sticker={x}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    blur={false}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className={classNames('sticker-set-title', classes.title)}>\n                    <span>{title}</span>\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(StickerSet);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StickerSet from './StickerSet';\nimport Sticker from './StickersHint';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { STICKER_PREVIEW_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\nimport { debounce } from '../../Utils/Common';\nimport * as ReactDOM from 'react-dom';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n\n        this.state = {\n            stickerSets: null,\n            sets: [],\n            position: 0\n        };\n\n        this.updateItemsInView = debounce(this.updateItemsInView, 100);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        return false;\n    }\n\n    loadContent = async (stickerSets, sets) => {\n        if (this.state.stickerSets) return;\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        this.setState({ stickerSets, sets: slicedSets });\n        this.setsLength = slicedSets.length;\n    };\n\n    updateItemsInView = () => {\n        const scroll = this.scrollRef.current;\n        // console.log('Stickers.inView', scroll.scrollTop, scroll.offsetHeight, scroll.scrollHeight);\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node){\n                const padding = 800;\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        console.log('Stickers.inViewItems', inViewItems);\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            loadStickerSetContent(store, x);\n        })\n    };\n\n    handleScroll = async () => {\n        this.updateItemsInView();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const date = Date.now();\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n        this.setsLength += result.length;\n        console.log('StickersPicker.handleScroll', Date.now() - date, sets.concat(result), stickerSets);\n        let concatSets = sets.concat(result);\n        // if (concatSets.length > 10) {\n        //     concatSets = concatSets.slice(5);\n        // }\n        this.setState({ sets: concatSets });\n    };\n\n    getItems = sets => {\n        const stickers = [];\n        sets.forEach(set => {\n            set.stickers.forEach(sticker => {\n                stickers.push(sticker);\n            });\n        });\n\n        return stickers;\n    };\n\n    loadPreviewContent = stickerId => {\n        const { sets } = this.state;\n        const items = this.getItems(sets);\n\n        const sticker = items.find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n\n        TdLibController.send({\n            '@type': 'getStickerEmojis',\n            sticker: {\n                '@type': 'inputFileId',\n                id: stickerId\n            }\n        }).then(result => {\n            const { previewStickerId } = this.state;\n            if (previewStickerId === stickerId) {\n                this.setState({\n                    previewStickerEmojis: result.emojis.join(' ')\n                });\n            }\n        });\n\n        // const preloadStickers = this.getNeighborStickers(stickerId, items, stickersPerRow);\n        // preloadStickers.forEach(x => {\n        //     loadStickerContent(store, x, null);\n        // });\n    };\n\n    handleMouseOver = event => {};\n\n    handleMouseOut = event => {};\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.target.dataset.stickerId);\n        console.log('Stickers.handleMouseDown', stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        //document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    render() {\n        const { onSelect } = this.props;\n        const { stickerSets, sets, previewStickerId, showPreview, previewStickerEmojis, position } = this.state;\n        if (!stickerSets) return null;\n\n        if (!sets) return null;\n        if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={onSelect}\n            />\n        ));\n        const sticker = this.getItems(sets).find(x => x.sticker.id === previewStickerId);\n\n        return (\n            <div className='stickers-picker'>\n                <div className='stickers-picker-header' />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {items}\n                </div>\n                {Boolean(sticker) && showPreview && (\n                    <div className='sticker-set-dialog-preview'>\n                        <div className='sticker-set-dialog-preview-emoji'>{previewStickerEmojis}</div>\n                        <Sticker sticker={sticker} displaySize={STICKER_PREVIEW_DISPLAY_SIZE} />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPicker;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickersPicker from './StickersPicker';\nimport { EMOJI_PICKER_TIMEOUT_MS, STICKER_PREVIEW_DISPLAY_SIZE } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\nimport { loadStickerSetContent } from '../../Utils/File';\n\nconst styles = theme => ({\n    iconButton: {\n        margin: '8px 0px'\n    },\n    headerButton: {\n        borderRadius: 0,\n        flex: '50%'\n    },\n    pickerRoot: {\n        width: 338,\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary,\n        borderRadius: theme.shape.borderRadius,\n        boxShadow: theme.shadows[8],\n        position: 'absolute',\n        bottom: 80,\n        display: 'none'\n    },\n    pickerRootOpened: {\n        display: 'block'\n    }\n});\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.removeListener('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const store = FileStore.getStore();\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n        });\n\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            if (this.paperEnter || this.buttonEnter) return;\n\n            this.updatePicker(false);\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        this.paperEnter = false;\n        setTimeout(() => {\n            if (this.paperEnter || this.buttonEnter) return;\n\n            this.updatePicker(false);\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    switchPicker = () => {\n        this.updatePicker(!this.state.open);\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        this.stickersPickerRef.current.loadContent(this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    render() {\n        const { classes, theme, t } = this.props;\n        const { open, tab } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = <StickersPicker ref={this.stickersPickerRef} onSelect={this.handleStickerSend} />;\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className={classes.iconButton}\n                    aria-label='Emoticon'\n                    onClick={this.switchPicker}\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}\n                >\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames(classes.pickerRoot, { [classes.pickerRootOpened]: open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}\n                >\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    {/*{Boolean(sticker) && showPreview && (*/}\n                        {/*<div className='sticker-set-dialog-preview'>*/}\n                            {/*<div className='sticker-set-dialog-preview-emoji'>{previewStickerEmojis}</div>*/}\n                            {/*<Sticker sticker={sticker} displaySize={STICKER_PREVIEW_DISPLAY_SIZE} />*/}\n                        {/*</div>*/}\n                    {/*)}*/}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}