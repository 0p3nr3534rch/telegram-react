{"version":3,"sources":["Components/ColumnMiddle/AnimationPreview.js","Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/GifsPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["AnimationPreview","animation","this","props","className","Animation","type","stretch","style","borderRadius","React","Component","StickerSet","nextProps","nextState","nextContext","info","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","key","sticker","id","data-sticker-id","onClick","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","classes","root","size","fontSize","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","stop","Animator","from","to","func","Math","abs","sign","setTimeout","start","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","off","prevProps","prevState","snapshot","recent","recentItem","play","PICKER_HEADER","openMedia","ref","classNames","onWheel","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","stickerSets","sets","TdLibController","send","is_attached","result","promises","forEach","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","startPosition","element","diff","pos","clientUpdate","handleScroll","scrolling","now","Date","lastScrollTime","scrollTimer","clearTimeout","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","GifsPicker","begin","end","cancel","prevScrollTop","savedAnimations","AnimationStore","animations","inViewMap","inViewIndexes","index","animationsInView","mapEquals","animationIndex","openAnimation","forceUpdate","loadAnimationThumbnailContent","loadAnimationContent","data-animation-index","margin","EmojiPickerButton","onClientUpdateChange","open","removePicker","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","loadSavedAnimations","tab","gifsPicker","gifsPickerRef","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","handleEmojiClick","stickersPicker","handleStickersClick","handleGifsClick","handleStickerSend","handleStickerPreview","handleGifSend","handleGifPreview","emojiPickerRef","AppStore","LocalizationStore","theme","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","top","rel","href","onMouseLeave","Button","withTheme"],"mappings":";gYAkCeA,G,mKArBX,WACI,IAAQC,EAAcC,KAAKC,MAAnBF,UACR,OAAKA,EAGD,yBAAKG,UAAU,mBACX,kBAACC,EAAA,EAAD,CACIC,KAAK,UACLC,SAAS,EACTN,UAAWA,EACXO,MAAO,CAAEC,aAAc,MARZ,S,GAHAC,IAAMC,Y,2DCyEtBC,G,kLArEX,SAAsBC,EAAWC,EAAWC,GAGxC,OAFiBb,KAAKC,MAAda,OAEKH,EAAUG,O,oBAO3B,WACI,MAAqEd,KAAKC,MAAlEa,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,YAAaC,EAArC,EAAqCA,aAAcC,EAAnD,EAAmDA,cACnD,IAAKJ,EAAM,OAAO,KAElB,IAAQK,EAAoBL,EAApBK,MAEFC,EAFsBN,EAAbO,SAEQC,KAAI,SAACC,EAAGC,GAAJ,OACvB,yBACItB,UAAU,mBACVuB,IAAKF,EAAEG,QAAQC,GACfC,kBAAiBL,EAAEG,QAAQC,GAC3BE,QAAS,kBAAMd,EAASQ,IACxBN,aAAcA,EACdD,YAAaA,EACbV,MAAO,CACHwB,MAAOC,KACPC,OAAQD,OAEZ,kBAACE,EAAA,EAAD,CACIR,IAAKF,EAAEG,QAAQC,GACfD,QAASH,EACTW,UAAU,EACVC,MAAM,EACNC,YAAaL,KACbM,SAAO,EACPC,OAAQC,IAAkBC,aAKtC,OACI,yBAAKtC,UAAU,eACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,6BACX,8BAAOiB,IAEVD,GACG,kBAACuB,EAAA,EAAD,CACIC,aAAW,SACXC,QAAS,CAAEC,KAAM,yBACjBC,KAAK,QACLhB,QAASX,GACT,kBAAC,IAAD,CAAW4B,SAAS,cAIhC,yBAAK5C,UAAU,uBAAuBkB,Q,GAzD7BZ,IAAMC,Y,oCC2IhBsC,G,yDAvIX,WAAY9C,GAAQ,IAAD,8BACf,cAAMA,IAgBV+C,iCAAmC,SAAAC,GAC/B,IAAQC,EAAaD,EAAbC,SAGR,EAAKC,SAAS,CAAED,cArBD,EA8BnBE,iBAAmB,WACf,IAAQF,EAAa,EAAKG,MAAlBH,SACR,iBAAQI,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAEZC,EAFN,EAA6BC,UAEJC,QACnBC,EAASJ,EAAUG,QACnBE,EAAaC,cAAqBF,GAElCG,EAAaN,EAAOO,WACpBC,EAAsB,GAAXd,EAAgB,IAE3Be,EAAaC,OAAON,EAAWtD,MAAM6D,KAAKC,QAAQ,KAAM,KACxDC,EAAsB,GAAXnB,EAEbI,GACAA,EAASgB,OAGb,EAAKhB,SAAW,IAAIiB,IAAS,EAAG,CAC5B,CACIC,KAAMV,EACNW,GAAIT,EACJU,KAAM,SAAAP,GAAI,OAAKX,EAAOO,WAAaI,IAEvC,CACIK,KACIG,KAAKC,IAAIP,EAAWJ,GAAc,IAC5BI,EAA8C,IAAnCM,KAAKE,KAAKR,EAAWJ,GAChCA,EACVQ,GAAIJ,EACJK,KAAM,SAAAP,GAAI,OAAKP,EAAWtD,MAAM6D,KAAOA,EAAO,SAItDW,YAAW,WACF,EAAKxB,UAEV,EAAKA,SAASyB,UACf,IApEY,EAwEnBC,YAAc,SAAAC,GACV,IAAQxB,EAAR,eAAQA,UAEa,IAAjBwB,EAAMC,SACSzB,EAAUC,QAElBK,YAAckB,EAAME,SA9EhB,EAkFnBC,aAAe,SAAA1D,GACX,MAA+B,EAAKzB,MAA5BoB,EAAR,EAAQA,UAGRN,EAHA,EAAkBA,UAGTM,EAASgE,QAAQ3D,KAnF1B,EAAK+B,UAAYjD,IAAM8E,YACvB,EAAK/B,UAAY/C,IAAM8E,YAEvB,EAAKjC,MAAQ,CAAEH,SAAU,GANV,E,qDASnB,WACIqC,IAAaC,GAAG,iCAAkCxF,KAAKgD,oC,kCAG3D,WACIuC,IAAaE,IAAI,iCAAkCzF,KAAKgD,oC,gCAU5D,SAAmB0C,EAAWC,EAAWC,GACjCD,EAAUzC,WAAalD,KAAKqD,MAAMH,UAClClD,KAAKoD,qB,oBA+Db,WAAU,IAAD,OACL,EAA6BpD,KAAKC,MAA1B4F,EAAR,EAAQA,OAAQxE,EAAhB,EAAgBA,SAEVyE,EAAaD,EACf,yBACI3F,UAAU,gCACV2B,QAAS,kBAAM,EAAKuD,aAAa,YACjC,kBAAC,IAAD,OAEJ,KAEEhE,EAAQC,EAASC,KAAI,SAAAC,GAAC,OACxB,kBAACU,EAAA,EAAD,CACIR,IAAKF,EAAEG,QAAQC,GACfzB,UAAU,iCACVwB,QAASH,EACTwE,MAAM,EACN7D,UAAU,EACVC,MAAM,EACNC,YAAa,GACbC,SAAO,EACPC,OAAQC,IAAkByD,cAC1BC,UAAW,kBAAM,EAAKb,aAAa7D,SAI3C,OACI,yBAAKrB,UAAU,0BACX,yBAAKgG,IAAKlG,KAAKyD,UAAWvD,UAAWiG,IAAW,gCAAiC,qBAAsBC,QAASpG,KAAKgF,aACjH,yBAAK9E,UAAU,gCACV4F,EACA1E,GAEL,yBAAK8E,IAAKlG,KAAKuD,UAAWrD,UAAU,wC,GA3HrBM,IAAMC,Y,01MCMnC4F,E,kDACF,WAAYpG,GAAQ,IAAD,8BACf,cAAMA,IA2DVqG,6BAA+B,SAAArD,GAC3B,IAAQsD,EAA8BtD,EAA9BsD,SAA8BtD,EAApBuD,gBACbD,GAEL,EAAKE,cAhEU,EAmEnBC,uBAAyB,SAAAzD,GACrB,EAAK0D,uBApEU,EAsFnBC,UAAY,WACR,EAAKnD,UAAUC,QAAQkD,UAAY,GAvFpB,EA0FnBC,YA1FmB,uCA0FL,WAAOhB,EAAQiB,EAAaC,GAA5B,gFAGLlB,EAHK,gCAISmB,IAAgBC,KAAK,CAChC,QAAS,oBACTC,aAAa,IANX,OAINrB,EAJM,iBAULkB,EAVK,iCAWeC,IAAgBC,KAAK,CACtC,QAAS,0BACTV,UAAU,IAbR,cAWAY,EAXA,OAgBAC,EAAW,GACjBD,EAAOJ,KAAKM,SAAQ,SAAA9F,GAChB6F,EAASE,KACLN,IAAgBC,KAAK,CACjB,QAAS,gBACTM,OAAQhG,EAAEI,SArBhB,UA0BO6F,QAAQC,IAAIL,GA1BnB,QA0BNL,EA1BM,eA6BJW,EAAaX,EAAKY,MAAM,EAAG,GAC3BC,EAAiBb,EAAKc,QAAO,SAACxF,EAASyF,GAIzC,OAHIA,EAAIzG,SAAS0G,OAAS,GACtB1F,EAAQiF,KAAKQ,EAAIzG,SAAS,IAEvBgB,IACR,IAEH,EAAKc,SAAS,CACV0C,SACAiB,cACAC,KAAMW,EACNM,SAAUjB,EACVa,mBAEJ,EAAKK,WAAaP,EAAWK,OA5CnB,4CA1FK,4DAyInBG,0BAA4B,WACxB,EAAKC,qBA1IU,EA6InBC,6BAA+B,WAC3B,EAAKD,kBAAkB,MA9IR,EAiJnBA,kBAAoB,WAAkB,IAAjBE,EAAgB,uDAAN,EAErB7E,EAAS,EAAKC,UAAUC,QAEtBqD,EAAS,EAAK1D,MAAd0D,KAEFuB,EAAc,GACpBvB,EAAKM,SAAQ,SAAA9F,GACT,IAAMgH,EAAO,EAAKC,SAASC,IAAIlH,EAAEI,IAC3B+G,EAAO7E,cAAqB0E,GAClC,GAAIG,EAAM,CACN,IAAMC,EAAYnF,EAAOoD,UAAYyB,EAC/BO,EAAepF,EAAOoD,UAAYpD,EAAOqF,aAAeR,EAExDS,EAAUJ,EAAKK,UACfC,EAAaN,EAAKK,UAAYL,EAAKO,cAErCH,GAAWH,GAAaD,EAAKK,WAAaH,GAEnCI,GAAcL,GAAaK,GAAcJ,GAEzCE,GAAWH,GAAaK,GAAcJ,IAH7CN,EAAYhB,KAAK/F,OAS7B+G,EAAYjB,SAAQ,SAAA9F,GAChB,IAAM2H,EAAQC,IAAUC,WACnB,EAAKC,WAAWC,IAAI/H,EAAEI,MACvB,EAAK0H,WAAWvB,IAAIvG,EAAEI,GAAIJ,EAAEI,IAC5B4H,YAAsBL,EAAO3H,QAhLtB,EAqLnBiI,eAAiB,WACb,IAAMhG,EAAS,EAAKC,UAAUC,QAE9B,EAAyB,EAAKL,MAAtBwC,EAAR,EAAQA,OAAQkB,EAAhB,EAAgBA,KACZ0C,EAAUjG,EAAOkG,aACjBxG,EAAW,EACXyG,EAAgB,EACpB,GAAI9D,GAAUA,EAAOxE,SAAS0G,OAAS,EAAG,CACtC4B,EAAgB,EAChB,IAAMC,EAAU,EAAKpB,SAASC,IAAI,UAClC,GAAImB,EAAS,CACT,IAAMlB,EAAO7E,cAAqB+F,GAClC,GAAIlB,GAAQA,EAAKK,WAAavF,EAAOoD,UAAW,CAC5C,IAAMmC,EAAYL,EAAKK,UACvB,GAAIL,GAAQK,GAAavF,EAAOoD,UAAW,CACvC,IAAMiD,EAAOlF,KAAKC,IAAIpB,EAAOoD,UAAYmC,GACrCc,GAAQJ,IACRA,EAAUI,EACV3G,EAAW,MAM/B6D,EAAKM,SAAQ,SAAC9F,EAAGuI,GACb,IAAMF,EAAU,EAAKpB,SAASC,IAAIlH,EAAEI,IACpC,GAAIiI,EAAS,CACT,IAAMlB,EAAO7E,cAAqB+F,GAClC,GAAIlB,GAAQA,EAAKK,WAAavF,EAAOoD,UAAW,CAC5C,IAAMmC,EAAYL,EAAKK,UACvB,GAAIL,EAAM,CACN,IAAMmB,EAAOlF,KAAKC,IAAIpB,EAAOoD,UAAYmC,GACrCc,GAAQJ,IACRA,EAAUI,EACV3G,EAAWyG,EAAgBG,SAO/C9C,IAAgB+C,aAAa,CACzB,QAAS,iCACT7G,cAhOW,EAoOnB8G,aApOmB,sBAoOJ,qGACX,EAAKC,WAAY,EACXC,EAAM,IAAIC,KAChB,EAAKC,eAAiBF,EAClB,EAAKG,aAAaC,aAAa,EAAKD,aACxC,EAAKA,YAAcvF,YAAW,WACtBoF,IAAQ,EAAKE,iBAEjB,EAAKH,WAAY,KAClB,KAIH,EAAK7B,+BACL,EAAKoB,iBAEChG,EAAS,EAAKC,UAAUC,SAE1B,EAAK6G,aAlBE,sDAoBPC,GAAY,EACZhH,EAAOoD,UAAYpD,EAAOqF,cAAgBrF,EAAOkG,aAAe,MAChEc,GAAY,GAGXA,EAzBM,2CA0BA,GA1BA,aA6BmB,EAAKnH,MAA3B0D,EA7BG,EA6BHA,MAAMD,EA7BH,EA6BGA,aACEC,KAAKgB,SAAWhB,EAAKgB,OA9B1B,0DAgCX,EAAKwC,cAAe,EACdnD,EAAW,GACjBN,EAAYC,KAAKY,MAAM,EAAKM,WAAY,EAAKA,WAAa,GAAGZ,SAAQ,SAAA9F,GACjE6F,EAASE,KACLN,IAAgBC,KAAK,CACjB,QAAS,gBACTM,OAAQhG,EAAEI,SAtCX,UA2CU6F,QAAQC,IAAIL,GAAUqD,SAAQ,WAC/C,EAAKF,cAAe,KA5Cb,QA2CLpD,EA3CK,OA+CX,EAAKc,YAAcd,EAAOY,OAC1B,EAAK5E,SAAS,CAAE4D,KAAMA,EAAK2D,OAAOvD,KAhDvB,4CApOI,EAuRnBwD,mBAAqB,SAAAC,GACjB,MAAyB,EAAKvH,MAAtBwC,EAAR,EAAQA,OAAQkB,EAAhB,EAAgBA,KAEVrF,EAAUmJ,YAAY,CAAChF,GAAQ6E,OAAO3D,IAAO+D,MAAK,SAAAvJ,GAAC,OAAIA,EAAEG,QAAQC,KAAOiJ,KAC9E,GAAKlJ,EAAL,CAEA,IAAMwH,EAAQC,IAAUC,WACxB2B,YAAmB7B,EAAOxH,EAAS,MAGXsJ,YAA4BtJ,EAASqF,EADtC,GAEPM,SAAQ,SAAA9F,GACpBwJ,YAAmB7B,EAAO3H,EAAG,WAnSlB,EAuSnB0J,iBAAmB,SAAAhG,GACf,IAAM2F,EAAY1G,OAAOe,EAAMiG,cAAcC,QAAQP,WACrD,GAAKA,GAEA,EAAKQ,UAAV,CAEI,EAAKC,qBAAuBT,IAC5B,EAAKS,mBAAqB,MAE9B,EAAKlI,SAAS,CAAEmI,iBAAkBV,IAClC,EAAKD,mBAAmBC,GAExB,IAAQW,EAAc,EAAKtL,MAAnBsL,UACR,EAAyB,EAAKlI,MAAtBwC,EAAR,EAAQA,OAAQkB,EAAhB,EAAgBA,KAGhBwE,EADgBV,YAAY,CAAChF,GAAQ6E,OAAO3D,IAAO+D,MAAK,SAAAvJ,GAAC,OAAIA,EAAEG,QAAQC,KAAOiJ,QAtT/D,EA0TnBY,gBAAkB,SAAAvG,GACd,IAAM2F,EAAY1G,OAAOe,EAAMiG,cAAcC,QAAQP,WACrD,GAAKA,EAAL,CAEA,EAAKS,mBAAqBT,EAC1B,IAAMV,EAAMC,KAAKD,MAuBjB,OArBA,EAAK/G,SAAS,CAAEmI,iBAAkBV,EAAWa,UAAWvB,EAAKwB,aAAa,EAAOC,YAAY,IAC7F7G,YAAW,WACe,EAAKzB,MAAnBoI,YACUvB,GACd,EAAK/G,SAAS,CAAEuI,aAAa,EAAMC,YAAY,IAAQ,WACnD,IAAQJ,EAAc,EAAKtL,MAAnBsL,UACR,EAAyB,EAAKlI,MAAtBwC,EAAR,EAAQA,OAAQkB,EAAhB,EAAgBA,KAGhBwE,EADgBV,YAAY,CAAChF,GAAQ6E,OAAO3D,IAAO+D,MAAK,SAAAvJ,GAAC,OAAIA,EAAEG,QAAQC,KAAOiJ,WAIvF,KAEH,EAAKD,mBAAmBC,GAExB,EAAKQ,WAAY,EACjBQ,SAASC,iBAAiB,UAAW,EAAKC,eAE1C7G,EAAM8G,iBACN9G,EAAM+G,mBACC,IAtVQ,EAyVnBF,cAAgB,WACZ,EAAK3I,SAAS,CAAEmI,iBAAkB,EAAGG,UAAW,EAAGC,aAAa,KAIhEH,EAFsB,EAAKtL,MAAnBsL,WAEE,MAEV,EAAKH,WAAY,EACjBQ,SAASK,oBAAoB,UAAW,EAAKH,gBAjW9B,EAoWnBI,oBAAsB,SAAAxK,GAClB,IAAQX,EAAa,EAAKd,MAAlBc,SACe,EAAKsC,MAApBsI,YAIR5K,EAASW,IA1WM,EA6WnByK,gBA7WmB,uCA6WD,WAAMjJ,GAAN,8FACgB,EAAKG,MAA3B0D,EADM,EACNA,KAAMD,EADA,EACAA,YADA,iBAENrD,EAFM,EAENA,WAEU,IAAdP,EAJU,gBAKKO,EAAUC,QAClBkD,UAAY,EANT,4BAOH1D,EAAW6D,EAAKgB,QAPb,kBAQJ6B,EAAU,EAAKpB,SAASC,IAAI1B,EAAK7D,GAAUvB,OAEvC+G,EAAO7E,cAAqB+F,MAEfnG,EAAUC,QAClBkD,UAAY8B,EAAKK,WAbtB,6BAgBH7F,EAAW4D,EAAYC,KAAKgB,QAhBzB,qBAiBN,EAAKwC,aAjBC,sDAkBNzD,EAAYC,KAAKgB,SAAWhB,EAAKgB,OAlB3B,0DAoBV,EAAKwC,cAAe,EACdnD,EAAW,GACjBN,EAAYC,KAAKY,MAAM,EAAKM,WAAY/E,EAAW,GAAGmE,SAAQ,SAAA9F,GAC1D6F,EAASE,KACLN,IAAgBC,KAAK,CACjB,QAAS,gBACTM,OAAQhG,EAAEI,SA1BZ,UA+BW6F,QAAQC,IAAIL,GAAUqD,SAAQ,kBAAO,EAAKF,cAAe,KA/BpE,QA+BJpD,EA/BI,OAiCV,EAAKc,YAAcd,EAAOY,OACtBqE,EAAarF,EAAK2D,OAAOvD,GAC7B,EAAKhE,SAAS,CAAE4D,KAAMqF,IAAc,WAC5BlJ,EAAWkJ,EAAWrE,QACtB,EAAKoE,gBAAgBjJ,MArCnB,4CA7WC,wDAwZnBmJ,mBAAqB,WACjBrF,IAAgBC,KAAK,CACjB,QAAS,sBACTC,aAAa,KA3ZF,EA+ZnBoF,uBAAyB,SAAA3K,GACrBqF,IAAgBC,KAAK,CACjB,QAAS,mBACTM,OAAQ5F,EACR4K,cAAc,KAhalB,EAAK9I,UAAYjD,IAAM8E,YACvB,EAAKkD,SAAW,IAAIgE,IACpB,EAAKnD,WAAa,IAAImD,IAEtB,EAAKnJ,MAAQ,CACTwC,OAAQ,KACRiB,YAAa,KACbC,KAAM,GACNa,eAAgB,GAChB1E,SAAU,GAGd,EAAKkF,6BAA+BqE,YAAS,EAAKrE,6BAA8B,KAChF,EAAKF,0BAA4BwE,YAAS,EAAKxE,0BAA2B,KAC1E,EAAKsB,eAAiBkD,YAAS,EAAKlD,eAAgB,KAjBrC,E,yDAoBnB,SAAsB7I,EAAWC,EAAWC,GACxC,MAA6Db,KAAKqD,MAA1DH,EAAR,EAAQA,SAAU2C,EAAlB,EAAkBA,OAAQiB,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,KAAM2E,EAA7C,EAA6CA,YAE7C,OAAI9K,EAAUiF,SAAWA,IAIrBjF,EAAUkG,cAAgBA,IAI1BlG,EAAUmG,OAASA,IAInBnG,EAAU8K,cAAgBA,GAI1B9K,EAAUsC,WAAaA,O,+BAO/B,WACIqC,IAAaC,GAAG,6BAA8BxF,KAAKsG,8BACnDf,IAAaC,GAAG,uBAAwBxF,KAAK0G,0B,kCAGjD,WACInB,IAAaE,IAAI,6BAA8BzF,KAAKsG,8BACpDf,IAAaE,IAAI,uBAAwBzF,KAAK0G,0B,kBAGlD,c,wBAeA,SAAWF,GACP,MAA8BxG,KAAKqD,MAAnC,EAAQ0D,KAAR,EAAcD,c,wEAGlB,oGACyBE,IAAgBC,KAAK,CACtC,QAAS,oBACTC,aAAa,IAHrB,OACUrB,EADV,OAMI7F,KAAKmD,SAAS,CACV0C,WAPR,gD,0EA4VA,WAAU,IAAD,OACL,EAAqB7F,KAAKC,MAAlB0M,EAAR,EAAQA,EAAGrM,EAAX,EAAWA,MACX,EAAsDN,KAAKqD,MAAnDwC,EAAR,EAAQA,OAAqBkB,GAA7B,EAAgBD,YAAhB,EAA6BC,MAAMa,EAAnC,EAAmCA,eAOnC5H,KAAKwI,SAASoE,QACd,IAAMxL,EAAQ2F,EAAKzF,KAAI,SAAAC,GAAC,OACpB,kBAAC,EAAD,CACIE,IAAKF,EAAEI,GACPuE,IAAK,SAAA2G,GAAE,OAAI,EAAKrE,SAASV,IAAIvG,EAAEI,GAAIkL,IACnC/L,KAAMS,EACNR,SAAU,EAAKmL,oBACflL,YAAa,EAAKwK,gBAClBvK,aAAc,EAAKgK,sBAIrB6B,EACFjH,GAAUA,EAAOxE,SAAS0G,OAAS,EAC7B,CACI1G,SAAUwE,EAAOxE,SACjBF,MAAOwL,EAAE,mBAEb,KAEV,OACI,yBAAKzM,UAAU,kBAAkBI,MAAOA,GACpC,kBAAC,EAAD,CACIuF,OAAQiH,EACRzL,SAAUuG,EACV7G,SAAUf,KAAKmM,kBACnB,yBAAKjG,IAAKlG,KAAKyD,UAAWvD,UAAWiG,IAAW,yBAA0B,qBAAsB4G,SAAU/M,KAAKgK,cAC1GgD,QAAQF,IACL,kBAAC,EAAD,CACI5G,IAAK,SAAA2G,GAAE,OAAI,EAAKrE,SAASV,IAAI,SAAU+E,IACvC/L,KAAMgM,EACN/L,SAAUf,KAAKkM,oBACflL,YAAahB,KAAKwL,gBAClBvK,aAAcjB,KAAKiL,iBACnB/J,cAAelB,KAAKqM,qBAG3BjL,Q,GAtdQZ,IAAMC,WAwepBwM,EANCC,YACZC,cACAC,cACAC,cAGWJ,CAAQ5G,G,6zMC3ejBiH,E,kDAEF,WAAYrN,GAAQ,IAAD,8BACf,cAAMA,IAqBV+J,aAAe,SAAA/E,GACX,MAAkD,EAAKxB,UAAUC,QAAzDkD,EAAR,EAAQA,UAAW8C,EAAnB,EAAmBA,aAAcb,EAAjC,EAAiCA,aAEjC,EAAKT,+BAEL,IAAMmF,EAAQ3G,GAAa,GACrB4G,EAAM9D,GAAgB9C,EAAYiC,IAAiB,GACnD4E,EAAS9I,KAAKC,IAAIgC,EAAY,EAAK8G,eAAiB,KAAOH,IAAUC,EAG3E,EAAKE,cAAgB9G,EACjB6G,GAKJ,EAAKtF,qBAtCU,EAyCnBvB,UAAY,WACR,EAAKnD,UAAUC,QAAQkD,UAAY,GA1CpB,EAyEnBsB,0BAA4B,WACxB,EAAKC,qBA1EU,EA6EnBC,6BAA+B,WAC3B,EAAKD,qBA9EU,EAiFnBA,kBAAoB,WAAkB,IAAjBE,EAAgB,uDAAN,EAErB7E,EAAS,EAAKC,UAAUC,QAEtBiK,EAAoBC,IAApBD,gBACR,GAAKA,EAAL,CAEA,IAAQE,EAAeF,EAAfE,WAEFC,EAAY,IAAItB,IAChBuB,EAAgB,GACtBF,EAAWxG,SAAQ,SAAC9F,EAAGyM,GACnB,IAAMzF,EAAO,EAAKC,SAASC,IAAd,UAAqBuF,EAArB,YAA8BzM,EAAExB,UAAU4B,KACjD+G,EAAO7E,cAAqB0E,GAClC,GAAIG,EAAM,CACN,IAAMC,EAAYnF,EAAOoD,UAAYyB,EAC/BO,EAAepF,EAAOoD,UAAYpD,EAAOqF,aAAeR,EAExDS,EAAUJ,EAAKK,UACfC,EAAaN,EAAKK,UAAYL,EAAKO,cAErCH,GAAWH,GAAaD,EAAKK,WAAaH,GAGnCI,GAAcL,GAAaK,GAAcJ,GAGzCE,GAAWH,GAAaK,GAAcJ,KAL7CkF,EAAUhG,IAAIvG,EAAGA,GACjBwM,EAAczG,KAAK0G,QAW/B,IAAQC,EAAqBL,IAArBK,iBACJC,YAAUD,EAAkBH,IAOhC9G,IAAgB+C,aAAa,CACzB,QAAS,+BACT8D,WAAYC,MA7HD,EAyInBtC,gBAAkB,SAAAvG,GACd,IAAM2F,EAAY1G,OAAOe,EAAMiG,cAAcC,QAAQgD,gBAErD,EAAK9C,mBAAqBT,EAC1B,IAAMV,EAAMC,KAAKD,MAyBjB,OAvBA,EAAK/G,SAAS,CAAEmI,iBAAkBV,EAAWa,UAAWvB,EAAKwB,aAAa,EAAOC,YAAY,IAC7F7G,YAAW,WACe,EAAKzB,MAAnBoI,YACUvB,GACd,EAAK/G,SAAS,CAAEuI,aAAa,EAAMC,YAAY,IAAQ,WACnD,IAAQJ,EAAc,EAAKtL,MAAnBsL,UACR,EAAyB,EAAKlI,MAA9B,EAAQwC,OAAR,EAAgBkB,KAKhBwE,EAH4BqC,IAApBD,gBAEwBE,WAAWjD,SAIpD,KAIH,EAAKQ,WAAY,EACjBQ,SAASC,iBAAiB,UAAW,EAAKC,eAE1C7G,EAAM8G,iBACN9G,EAAM+G,mBACC,GAtKQ,EAyKnBf,iBAAmB,SAAAhG,GACf,IAAM2F,EAAY1G,OAAOe,EAAMiG,cAAcC,QAAQgD,gBAEhD,EAAK/C,YAEN,EAAKC,qBAAuBT,IAC5B,EAAKS,mBAAqB,MAE9B,EAAKlI,SAAS,CAAEmI,iBAAkBV,KAOlCW,EAJsB,EAAKtL,MAAnBsL,WACoBqC,IAApBD,gBAEwBE,WAAWjD,MAvL5B,EA2LnBkB,cAAgB,WACZ,EAAK3I,SAAS,CAAEmI,iBAAkB,EAAGG,UAAW,EAAGC,aAAa,KAIhEH,EAFsB,EAAKtL,MAAnBsL,WAEE,MAEV,EAAKH,WAAY,EACjBQ,SAASK,oBAAoB,UAAW,EAAKH,gBAnM9B,EAsMnBsC,cAAgB,SAAArO,GACZ,IAAQgB,EAAa,EAAKd,MAAlBc,SACe,EAAKsC,MAApBsI,YAIR5K,EAAShB,IAzMT,EAAK0D,UAAYjD,IAAM8E,YAEvB,EAAKkD,SAAW,IAAIgE,IAEpB,EAAKtE,0BAA4BwE,YAAS,EAAKxE,0BAA2B,KAC1E,EAAKE,6BAA+BqE,YAAS,EAAKrE,6BAA8B,KARjE,E,yCAWnB,WACIpI,KAAKmI,sB,kBAGT,WACInB,IAAgB+C,aAAa,CACzB,QAAS,+BACT8D,WAAY,IAAIrB,Q,gEA2BxB,kGAGUmB,EAAoBC,IAApBD,gBAHV,gCAK6B3G,IAAgBC,KAAK,CACtC,QAAS,uBANrB,OAKcE,EALd,OASQyG,IAAeD,gBAAkBxG,EACjCwG,EAAkBxG,EAElBnH,KAAKqO,aAAY,WACb,EAAKtJ,WAbjB,OAkBUmE,EAAQC,IAAUC,WACEuE,EAAgBE,WAAWlG,MAAM,EAAG,KAG5CN,SAAQ,SAAA9F,GACtB+M,YAA8BpF,EAAO3H,EAAG,MACxCgN,YAAqBrF,EAAO3H,EAAG,MAAM,MAxB7C,iD,0EAkKA,WAAU,IAAD,OACL,EAAqBvB,KAAKC,MAAfK,GAAX,EAAQqM,EAAR,EAAWrM,OACHqN,EAAoBC,IAApBD,gBACR,IAAKA,EAAiB,OAAO,KAE7B3N,KAAKwI,SAASoE,QACd,IAAMxL,EAAQuM,EAAgBE,WAAWvM,KAAI,SAACC,EAAGyM,GAAJ,OACzC,yBACIQ,uBAAsBR,EACtBvM,IAAG,UAAKuM,EAAL,YAAczM,EAAExB,UAAU4B,IAC7BuE,IAAK,SAAA2G,GAAE,OAAI,EAAKrE,SAASV,IAAd,UAAqBkG,EAArB,YAA8BzM,EAAExB,UAAU4B,IAAMkL,IAC3D7L,YAAa,EAAKwK,gBAClBvK,aAAc,EAAKgK,kBAEnB,kBAAC9K,EAAA,EAAD,CACIC,KAAK,SACLL,UAAWwB,EACX0E,UAAW,kBAAM,EAAKmI,cAAc7M,IACpCjB,MAAO,CAAEwB,MAAO,IAAKE,OAAQ,IAAKyM,OAAQ,EAAGlO,aAAc,SAKvE,OACI,yBAAKL,UAAU,cAAcI,MAAOA,GAChC,yBAAK4F,IAAKlG,KAAKyD,UAAWvD,UAAWiG,IAAW,qBAAsB,qBAAsB4G,SAAU/M,KAAKgK,cACtG5I,Q,GA3OIZ,IAAMC,WA8PhBwM,EANCC,YACZC,cACAC,cACAC,cAGWJ,CAAQK,G,m0MCnPjBoB,E,kDACF,WAAYzO,GAAQ,IAAD,8BACf,cAAMA,IAsBV0O,qBAAuB,SAAA1L,GACF,EAAKI,MAAduL,KAGJ,EAAKC,cAAe,EAEpB,EAAKC,OAAS,MA7BH,EAiCnBC,uBAAyB,SAAA9J,GACrB,EAAK+J,aAAc,EACnBlK,YAAW,WACP,GAAK,EAAKkK,cAEV,EAAKC,cAAa,GAClB,EAAKC,kBACL,EAAKC,sBAEkB,IAAnB,EAAK9L,MAAM+L,KAAW,CACtB,IAAMC,EAAa,EAAKC,cAAc5L,QAClC2L,GACAA,EAAWtK,WAGpBwK,MAhDY,EAmDnBJ,oBAnDmB,sBAmDG,2FACZxB,EAAoBC,IAApBD,gBADY,gCAGO3G,IAAgBC,KAAK,CACtC,QAAS,uBAJC,OAGRE,EAHQ,OAOdyG,IAAeD,gBAAkBxG,EACjCwG,EAAkBxG,EARJ,OAYZ+B,EAAQC,IAAUC,WACEuE,EAAgBE,WAAWlG,MAAM,EAAG,KAG5CN,SAAQ,SAAA9F,GACtB+M,YAA8BpF,EAAO3H,MAjBvB,4CAnDH,EAwEnB2N,gBAxEmB,sBAwED,4FACV,EAAKnI,KADK,iEAGMC,IAAgBC,KAAK,CACrC,QAAS,oBACTC,aAAa,IALH,cAGd,EAAKrB,OAHS,gBAQWmB,IAAgBC,KAAK,CAC1C,QAAS,0BACTV,UAAU,IAVA,cAQd,EAAKO,YARS,OAaRM,EAAW,GACjB,EAAKN,YAAYC,KAAKM,SAAQ,SAAA9F,GAC1B6F,EAASE,KACLN,IAAgBC,KAAK,CACjB,QAAS,gBACTM,OAAQhG,EAAEI,SAlBR,UAuBI6F,QAAQC,IAAIL,GAvBhB,QAuBd,EAAKL,KAvBS,OAyBR2B,EAAO,EAAK8G,kBAAkB9L,QAE9BwF,EAAQC,IAAUC,WACxBqG,YAA0BvG,EAAO,EAAKrD,QAElB,EAAKkB,KAAKY,MAAM,EAAG,GAAG+H,UAC9BrI,SAAQ,SAAA9F,GAChBgI,YAAsBL,EAAO3H,GAC7BmH,EAAKW,WAAWvB,IAAIvG,EAAEI,GAAIJ,EAAEI,OAGR,EAAKoF,KAAKc,QAAO,SAACxG,EAAUyG,GAIhD,OAHIA,EAAIzG,SAAS0G,OAAS,GACtB1G,EAASiG,KAAKQ,EAAIzG,SAAS,IAExBA,IACR,IACagG,SAAQ,SAAA9F,GACpBoO,YAA4BzG,EAAO3H,MA3CzB,4CAxEC,EAuHnBqO,uBAAyB,WACrB,EAAKZ,aAAc,EACnBlK,YAAW,WACP,EAAK+K,mBACNN,MA3HY,EA8HnBM,eAAiB,WAGb,MAA+B,EAAKxM,MAA5BtD,EAAR,EAAQA,UAAW2B,EAAnB,EAAmBA,QACf,EAAKoO,YAAc,EAAKd,aAAetN,GAAW3B,GAEtD,EAAKkP,cAAa,IApIH,EAuInBc,sBAAwB,WACpB,EAAKD,YAAa,GAxIH,EA2InBE,sBAAwB,WAGpB,EAAKF,YAAa,EAClBhL,YAAW,WACP,EAAK+K,mBACNN,MAjJY,EAoJnBN,aAAe,SAAAL,GACX,EAAKzL,SAAS,CAAEyL,SAAQ,WACpB,IAAK,EAAKvL,MAAMuL,KAAM,CACd,EAAKC,eACL,EAAKC,OAAS,KACd,EAAKD,cAAe,GAGxB,IAAMQ,EAAa,EAAKC,cAAc5L,QAClC2L,GACAA,EAAW/K,YA9JR,EAoKnB2L,iBAAmB,WACf,EAAK9M,SAAS,CAAEiM,IAAK,IAErB,IAAMC,EAAa,EAAKC,cAAc5L,QAClC2L,GACAA,EAAW/K,OAGf,IAAM4L,EAAiB,EAAKV,kBAAkB9L,QAC1CwM,GACAA,EAAe5L,QA9KJ,EAkLnB6L,oBAAsB,WAClB,IAAMD,EAAiB,EAAKV,kBAAkB9L,QAKlC,IAJI,EAAKL,MAAb+L,IAKAc,GACAA,EAAetJ,aAGnB9B,YAAW,WAEPoL,EAAerJ,YAAY,EAAKhB,OAAQ,EAAKiB,YAAa,EAAKC,QAChE,KAEH,EAAK5D,SAAS,CAAEiM,IAAK,KAGzB,IAAMC,EAAa,EAAKC,cAAc5L,QAClC2L,GACAA,EAAW/K,QAvMA,EA2MnB8L,gBAAkB,WACd,IAAMf,EAAa,EAAKC,cAAc5L,QAGtC,GAAY,IAFI,EAAKL,MAAb+L,IAGAC,GACAA,EAAWzI,gBAEZ,CACH,IAAQ+G,EAAoBC,IAApBD,gBAER7I,YAAW,WACPuK,EAAWxI,YAAY8G,GACvB0B,EAAWtK,UACZ,KAEH,EAAK5B,SAAS,CAAEiM,IAAK,IAGzB,IAAMc,EAAiB,EAAKV,kBAAkB9L,QAC1CwM,GACAA,EAAe5L,QAhOJ,EAoOnB+L,kBAAoB,SAAA3O,GACXA,IAELsF,IAAgB+C,aAAa,CACzB,QAAS,0BACTrI,YAGJ,EAAKuN,cAAa,KA5OH,EA+OnBqB,qBAAuB,SAAA5O,GACnB,EAAKyB,SAAS,CAAEzB,YAChBsF,IAAgB+C,aAAa,CACzB,QAAS,6BACTrI,YAGCA,GACD,EAAKmO,kBAvPM,EA2PnBU,cAAgB,SAAAxQ,GACPA,IAELiH,IAAgB+C,aAAa,CACzB,QAAS,4BACThK,cAGJ,EAAKkP,cAAa,KAnQH,EAsQnBuB,iBAAmB,SAAAzQ,GACf,EAAKoD,SAAS,CAAEpD,cAChBiH,IAAgB+C,aAAa,CACzB,QAAS,+BACThK,cAGCA,GACD,EAAK8P,kBA3QT,EAAKxM,MAAQ,CACTuL,MAAM,EACNQ,IAAK,GAGT,EAAKqB,eAAiBjQ,IAAM8E,YAC5B,EAAKkK,kBAAoBhP,IAAM8E,YAC/B,EAAKgK,cAAgB9O,IAAM8E,YAVZ,E,qDAanB,WACIoL,IAASlL,GAAG,0BAA2BxF,KAAK2O,sBAC5CgC,IAAkBnL,GAAG,6BAA8BxF,KAAK2O,wB,kCAG5D,WACI+B,IAASjL,IAAI,0BAA2BzF,KAAK2O,sBAC7CgC,IAAkBlL,IAAI,6BAA8BzF,KAAK2O,wB,oBA8P7D,WACI,MAAqB3O,KAAKC,MAAlB2Q,EAAR,EAAQA,MAAOjE,EAAf,EAAeA,EACf,EAA0C3M,KAAKqD,MAAvCuL,EAAR,EAAQA,KAAMQ,EAAd,EAAcA,IAAKrP,EAAnB,EAAmBA,UAAW2B,EAA9B,EAA8BA,QAE9B,GAAIkN,IAAS5O,KAAK8O,OAAQ,CACtB,IAAM+B,EAAO,CACTC,OAAQnE,EAAE,UACVoE,SAAUpE,EAAE,iBACZqE,SAAUrE,EAAE,yBACZsE,WAAY,CACRH,OAAQnE,EAAE,iBACV9G,OAAQ8G,EAAE,UACVuE,OAAQvE,EAAE,iBACVwE,OAAQxE,EAAE,iBACVyE,MAAOzE,EAAE,aACT0E,SAAU1E,EAAE,YACZ2E,OAAQ3E,EAAE,gBACV4E,QAAS5E,EAAE,WACX6E,QAAS7E,EAAE,WACX8E,MAAO9E,EAAE,SACT+E,OAAQ/E,EAAE,YAIlB3M,KAAK8O,OACD,kBAAC,IAAD,CACI5I,IAAKlG,KAAKyQ,eAEV3I,IAAI,QACJ4D,aAAa,EACbiG,eAAe,EACf5Q,SAAUf,KAAKC,MAAMc,SACrB6Q,MAAOhB,EAAMiB,QAAQC,QAAQC,KAC7BlB,KAAMA,EACNmB,OAAQC,cACR3R,MAAO,CAAEwB,MAAO,IAAKoQ,UAAW,SAAUhP,SAAU,WAAYiB,KAAM,EAAGgO,IAAK,KAItFnS,KAAKkQ,eACD,kBAAC,EAAD,CACIhK,IAAKlG,KAAKwP,kBACVzO,SAAUf,KAAKqQ,kBACf9E,UAAWvL,KAAKsQ,qBAChBhQ,MAAO,CAAE4C,SAAU,WAAYiB,KAAM,IAAKgO,IAAK,KAIvDnS,KAAKqP,WACD,kBAAC,EAAD,CACInJ,IAAKlG,KAAKsP,cACVvO,SAAUf,KAAKuQ,cACfhF,UAAWvL,KAAKwQ,iBAChBlQ,MAAO,CAAEwB,MAAO,IAAKoQ,UAAW,SAAUhP,SAAU,WAAYiB,KAAM,IAAKgO,IAAK,KAK5F,OACI,oCACI,0BACIC,IAAI,aACJhS,KAAK,WACLiS,KAA6B,SAAvBzB,EAAMiB,QAAQzR,KAAkB,sBAAwB,yBAElE,kBAACqC,EAAA,EAAD,CACIvC,UAAU,uBACVwC,aAAW,WACXzB,aAAcjB,KAAK+O,uBACnBuD,aAActS,KAAK4P,wBACnB,kBAAC,IAAD,OAEJ,yBACI1P,UAAWiG,IAAW,oBAAqB,CAAE,2BAA4ByI,IACzE3N,aAAcjB,KAAK+P,sBACnBuC,aAActS,KAAKgQ,uBACnB,yBAAK9P,UAAWiG,IAAW,uBAAwB,CAAE,gCAAyC,IAARiJ,GAAa,CAAE,4BAAqC,IAARA,KAC7HpP,KAAK8O,OACL9O,KAAKkQ,eACLlQ,KAAKqP,YAEV,yBAAKnP,UAAU,uBACX,kBAACqS,EAAA,EAAD,CACIX,MAAe,IAARxC,EAAY,UAAY,UAC/BlP,UAAU,6BACV2B,QAAS7B,KAAKiQ,kBACbtD,EAAE,UAEP,kBAAC4F,EAAA,EAAD,CACIX,MAAe,IAARxC,EAAY,UAAY,UAC/BlP,UAAU,6BACV2B,QAAS7B,KAAKmQ,qBACbxD,EAAE,qBAEP,kBAAC4F,EAAA,EAAD,CACIX,MAAe,IAARxC,EAAY,UAAY,UAC/BlP,UAAU,6BACV2B,QAAS7B,KAAKoQ,iBACbzD,EAAE,gBAIdK,QAAQtL,IAAY,kBAAC,IAAD,CAAgBA,QAASA,IAC7CsL,QAAQjN,IAAc,kBAAC,EAAD,CAAkBA,UAAWA,S,GA1XpCS,IAAMC,WAgYhCwM,EAAUC,YACZE,cACAoF,KAGWvF,YAAQyB","file":"static/js/6.f6176b5d.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animation from '../Message/Media/Animation';\nimport './StickerPreview.css';\n\nclass AnimationPreview extends React.Component {\n    render() {\n        const { animation } = this.props;\n        if (!animation) return null;\n\n        return (\n            <div className='sticker-preview'>\n                <Animation\n                    type='preview'\n                    stretch={true}\n                    animation={animation}\n                    style={{ borderRadius: 0 }}\n                />\n            </div>\n        );\n    }\n}\n\nAnimationPreview.propTypes = {\n    animation: PropTypes.object\n};\n\nexport default AnimationPreview;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info } = this.props;\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className='sticker-set-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}\n                style={{\n                    width: STICKER_SMALL_DISPLAY_SIZE,\n                    height: STICKER_SMALL_DISPLAY_SIZE\n                }}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className='sticker-set-title'>\n                    <div className='sticker-set-title-wrapper'>\n                        <span>{title}</span>\n                    </div>\n                    {onDeleteClick && (\n                        <IconButton\n                            aria-label='delete'\n                            classes={{ root: 'sticker-set-icon-root' }}\n                            size='small'\n                            onClick={onDeleteClick}>\n                            <ClearIcon fontSize='inherit' />\n                        </IconButton>\n                    )}\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onDeleteClick: PropTypes.func\n};\n\nexport default StickerSet;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n\n        this.state = { position: 0 };\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        // console.log('[header] setPosition', position);\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 48 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 48;\n\n        if (animator) {\n            animator.stop();\n        }\n\n        this.animator = new Animator(0, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n\n        setTimeout(() => {\n            if (!this.animator) return;\n\n            this.animator.start();\n        }, 0);\n        // this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        // console.log('[header] handleSelect', stickers.indexOf(sticker));\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { recent, stickers } = this.props;\n\n        const recentItem = recent ?\n            <div\n                className='stickers-picker-header-recent'\n                onClick={() => this.handleSelect('recent')}>\n                <AccessTimeIcon/>\n            </div> :\n            null;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={36}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker-header'>\n                <div ref={this.scrollRef} className={classNames('stickers-picker-header-scroll', 'scrollbars-hidden')} onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>\n                        {recentItem}\n                        {items}\n                    </div>\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    recent: PropTypes.object,\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPickerHeader;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    stop() {\n\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        const { is_masks, sticker_set_ids } = update;\n        if (!is_masks) return;\n\n        this.filterSets();\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    filterSets(sticker_set_ids) {\n        const { sets, stickerSets } = this.state;\n    }\n\n    async reloadRecentContent() {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[sp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { recent, sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let startPosition = 0;\n        if (recent && recent.stickers.length > 0) {\n            startPosition = 1;\n            const element = this.itemsMap.get('recent');\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node && node.offsetTop <= scroll.scrollTop) {\n                    const offsetTop = node.offsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = 0;\n                        }\n                    }\n                }\n            }\n        }\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node && node.offsetTop <= scroll.scrollTop) {\n                    const offsetTop = node.offsetTop;\n                    if (node) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = startPosition + pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        this.scrolling = true;\n        const now = new Date();\n        this.lastScrollTime = now;\n        if (this.scrollTimer) clearTimeout(this.scrollTimer);\n        this.scrollTimer = setTimeout(() => {\n            if (now !== this.lastScrollTime) return;\n\n            this.scrolling = false;\n        }, 250);\n\n        // console.log('[sp] handleScroll');\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => {\n            this.loadingChunk = false;\n        });\n\n        this.setsLength += result.length;\n        this.setState({ sets: sets.concat(result) });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position === -1) {\n            const scroll = scrollRef.current;\n            scroll.scrollTop = 0;\n        } else if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    handleDeleteRecent = () => {\n        TdLibController.send({\n            '@type': 'clearRecentStickers',\n            is_attached: false\n        });\n    };\n\n    handleDeleteStickerSet = id => {\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: id,\n            is_installed: false\n        });\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        // console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo =\n            recent && recent.stickers.length > 0\n                ? {\n                      stickers: recent.stickers,\n                      title: t('RecentStickers')\n                  }\n                : null;\n\n        return (\n            <div className='stickers-picker' style={style}>\n                <StickersPickerHeader\n                    recent={recentInfo}\n                    stickers={headerStickers}\n                    onSelect={this.handleSelectSet} />\n                <div ref={this.scrollRef} className={classNames('stickers-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\n                    {Boolean(recentInfo) && (\n                        <StickerSet\n                            ref={el => this.itemsMap.set('recent', el)}\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                            onDeleteClick={this.handleDeleteRecent}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport { compose, withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport Animation from '../Message/Media/Animation';\nimport { loadAnimationContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { mapEquals, debounce, throttle } from '../../Utils/Common';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './GifsPicker.css'\n\nclass GifsPicker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n\n        this.itemsMap = new Map();\n\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 250);\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 250);\n    }\n\n    start() {\n        this.loadInViewContent();\n    }\n\n    stop() {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: new Map()\n        })\n    }\n\n    handleScroll = event => {\n        const { scrollTop, scrollHeight, offsetHeight } = this.scrollRef.current;\n\n        this.loadInViewContentOnScrollEnd();\n\n        const begin = scrollTop <= 10;\n        const end = scrollHeight - (scrollTop + offsetHeight) <= 10;\n        const cancel = Math.abs(scrollTop - this.prevScrollTop) > 50 && !begin && !end; // too fast\n\n        // console.log('[gp] handleScroll', Math.abs(scrollTop - this.prevScrollTop), scrollTop, this.prevScrollTop, begin, end);\n        this.prevScrollTop = scrollTop;\n        if (cancel) {\n            // console.log('[gp] cancel handleScroll', scrollTop - this.prevScrollTop);\n            return;\n        }\n\n        this.loadInViewContent();\n    };\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    async loadContent() {\n        // console.log('[gp] loadContent');\n\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n\n            this.forceUpdate(() => {\n                this.start();\n            });\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x, null);\n            loadAnimationContent(store, x, null, false);\n        });\n    }\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[gp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return;\n\n        const { animations } = savedAnimations;\n\n        const inViewMap = new Map();\n        const inViewIndexes = [];\n        animations.forEach((x, index) => {\n            const item = this.itemsMap.get(`${index}_${x.animation.id}`);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                }\n            }\n        });\n\n        const { animationsInView } = AnimationStore;\n        if (mapEquals(animationsInView, inViewMap)) {\n            // console.log('[gp] inViewItems equals', inViewIndexes, animationsInView);\n            return;\n        }\n\n\n        // console.log('[gp] inViewItems', inViewIndexes);\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: inViewMap\n        })\n\n        // inViewItems.forEach(x => {\n        //     const store = FileStore.getStore();\n        //     if (!this.loadedSets.has(x.id)) {\n        //         this.loadedSets.set(x.id, x.id);\n        //         loadStickerSetContent(store, x);\n        //     }\n        // });\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const { savedAnimations } = AnimationStore;\n\n                    const sticker = savedAnimations.animations[stickerId];\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        // this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        // this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { savedAnimations } = AnimationStore;\n\n        const sticker = savedAnimations.animations[stickerId];\n        onPreview(sticker);\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    openAnimation = animation => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(animation);\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return null;\n\n        this.itemsMap.clear();\n        const items = savedAnimations.animations.map((x, index) => (\n            <div\n                data-animation-index={index}\n                key={`${index}_${x.animation.id}`}\n                ref={el => this.itemsMap.set(`${index}_${x.animation.id}`, el)}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n                >\n                <Animation\n                    type='picker'\n                    animation={x}\n                    openMedia={() => this.openAnimation(x)}\n                    style={{ width: 104, height: 104, margin: 2, borderRadius: 0 }}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='gifs-picker' style={style}>\n                <div ref={this.scrollRef} className={classNames('gifs-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\n                    {items}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nGifsPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(GifsPicker);","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\nimport AnimationPreview from './AnimationPreview';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport GifsPicker from './GifsPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport AppStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n        this.gifsPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        const { open } = this.state;\n\n        if (open) {\n            this.removePicker = true;\n        } else {\n            this.picker = null;\n        }\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n            this.loadSavedAnimations();\n\n            if (this.state.tab === 2) {\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.start();\n                }\n            }\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadSavedAnimations = async () => {\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x);\n        });\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        // return;\n\n        const { animation, sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker || animation) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open }, () => {\n            if (!this.state.open) {\n                if (this.removePicker) {\n                    this.picker = null;\n                    this.removePicker = false;\n                }\n\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.stop();\n                }\n            }\n        });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        // console.log('[sp] handleStickersClick');\n\n        if (tab === 1) {\n            if (stickersPicker) {\n                stickersPicker.scrollTop();\n            }\n        } else {\n            setTimeout(() => {\n                // console.log('[sp] handleStickersClick.loadContent');\n                stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n            }, 150);\n\n            this.setState({ tab: 1 });\n        }\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n    };\n\n    handleGifsClick = () => {\n        const gifsPicker = this.gifsPickerRef.current;\n        const { tab } = this.state;\n\n        if (tab === 2) {\n            if (gifsPicker) {\n                gifsPicker.scrollTop();\n            }\n        } else {\n            const { savedAnimations } = AnimationStore;\n\n            setTimeout(() => {\n                gifsPicker.loadContent(savedAnimations);\n                gifsPicker.start();\n            }, 150);\n\n            this.setState({ tab: 2 });\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    handleGifSend = animation => {\n        if (!animation) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationSend',\n            animation\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleGifPreview = animation => {\n        this.setState({ animation });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationPreview',\n            animation\n        });\n\n        if (!animation) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { theme, t } = this.props;\n        const { open, tab, animation, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    // data={data}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 0, top: 0 }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                    style={{ position: 'absolute', left: 338, top: 0 }}\n                />\n            );\n\n            this.gifsPicker = (\n                <GifsPicker\n                    ref={this.gifsPickerRef}\n                    onSelect={this.handleGifSend}\n                    onPreview={this.handleGifPreview}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 676, top: 0 }}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 }, { 'emoji-picker-content-gifs': tab === 2 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                        {this.gifsPicker}\n                    </div>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('AccDescrStickers')}\n                        </Button>\n                        <Button\n                            color={tab === 2 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleGifsClick}>\n                            {t('AttachGif')}\n                        </Button>\n                    </div>\n                </div>\n                {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                {Boolean(animation) && <AnimationPreview animation={animation} />}\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withTheme\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}