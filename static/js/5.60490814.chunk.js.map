{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Utils/Animatior.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","nextProps","nextState","nextContext","this","props","info","theme","classes","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","className","classNames","stickerSetItem","key","sticker","id","data-sticker-id","onClick","Sticker","autoplay","blur","displaySize","STICKER_SMALL_DISPLAY_SIZE","preview","source","StickerSourceEnum","PICKER","aria-label","iconRoot","size","fontSize","React","Component","withStyles","backgroundColor","palette","background","paper","color","text","primary","width","height","padding","boxSizing","type","borderRadius","margin","withTheme","Animator","duration","options","start","stopped","requestAnimationFrame","startAnim","timeStamp","end","draw","now","every","to","last","p","Math","min","val","outSine","forEach","from","func","stop","cancelAnimationFrame","n","sin","PI","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","style","left","replace","anchorTo","ANIMATION_DURATION_200MS","abs","sign","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","removeListener","prevProps","prevState","snapshot","play","PICKER_HEADER","openMedia","borderColor","ref","onWheel","accentBackgroundDark","borderStyle","accentStyles","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","recent","stickerSets","sets","a","TdLibController","send","is_attached","result","promises","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","firstOffsetTop","pos","element","diff","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","Date","timestamp","showPreview","cancelSend","setTimeout","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","off","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","EmojiPickerButton","onClientUpdateChange","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","handleEmojiClick","tab","handleStickersClick","stickersPicker","handleStickerSend","handleStickerPreview","emojiPickerRef","ApplicationStore","LocalizationStore","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","dark","native","isAppleDevice","overflowX","rel","href","iconButton","onMouseLeave","pickerRoot","pickerRootOpened","headerButton","StickerPreview","flex","zIndex","modal","shape","boxShadow","shadows","bottom","display"],"mappings":"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","file":"static/js/5.60490814.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nconst styles = theme => ({\n    title: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary\n    },\n    stickerSetItem: {\n        width: STICKER_SMALL_DISPLAY_SIZE,\n        height: STICKER_SMALL_DISPLAY_SIZE,\n        padding: 3,\n        boxSizing: 'border-box',\n        '&:hover': {\n            background: theme.palette.type === 'dark' ? '#303030' : '#f4f4f4',\n            borderRadius: 6\n        }\n    },\n    iconRoot: {\n        fontSize: 16,\n        padding: 4,\n        margin: '4px 8px 4px 4px'\n    }\n});\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info, theme } = this.props;\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { classes, info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className={classNames('sticker-set-item', classes.stickerSetItem)}\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className={classNames('sticker-set-title', classes.title)}>\n                    <div className='sticker-set-title-wrapper'>\n                        <span>{title}</span>\n                    </div>\n                    { onDeleteClick && (\n                        <IconButton aria-label='delete' classes={{ 'root': classes.iconRoot }} size='small' onClick={onDeleteClick}>\n                            <ClearIcon fontSize='inherit' />\n                        </IconButton>\n                    )}\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onDeleteClick: PropTypes.func\n};\n\nexport default withStyles(styles, { withTheme: true })(StickerSet);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass Animator {\n    constructor(duration, options = []) {\n        this.options = options;\n        this.duration = duration;\n    }\n\n    static outSine(n) {\n        return Math.sin((n * Math.PI) / 2);\n    }\n\n    start = () => {\n        this.stopped = false;\n        this.id = requestAnimationFrame(this.startAnim);\n    };\n\n    startAnim = timeStamp => {\n        const { start, duration } = this;\n\n        this.start = timeStamp;\n        this.end = start + duration;\n        this.draw(timeStamp);\n    };\n\n    draw = now => {\n        const { stopped, duration, start, options } = this;\n\n        if (now - start > duration && options.every(x => x.to === x.last)) {\n            this.stopped = true;\n        }\n\n        if (stopped) return;\n\n        const time = Math.min(now - start, duration);\n        const p = time / duration;\n        const val = Animator.outSine(p);\n\n        options.forEach(x => {\n            const { from, to, func } = x;\n            x.last = from + (to - from) * val;\n            func(x.last);\n        });\n\n        this.id = requestAnimationFrame(this.draw);\n    };\n\n    stop = () => {\n        this.stopped = true;\n        cancelAnimationFrame(this.id);\n    };\n}\n\nexport default Animator;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { accentStyles, borderStyle } from '../Theme';\nimport { ANIMATION_DURATION_200MS } from '../../Constants';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nconst styles = theme => ({\n    ...borderStyle(theme),\n    ...accentStyles(theme)\n});\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { position: 0 };\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.removeListener('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 44 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 44;\n\n        if (animator) {\n            animator.stop();\n        }\n        this.animator = new Animator(ANIMATION_DURATION_200MS, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n        this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { classes, stickers } = this.props;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={32}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className={classNames('stickers-picker-header', classes.borderColor)}>\n                <div ref={this.scrollRef} className='stickers-picker-header-scroll' onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>{items}</div>\n                    <div\n                        ref={this.anchorRef}\n                        className={classNames('stickers-picker-header-anchor', classes.accentBackgroundDark)}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(StickersPickerHeader);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { compose } from 'recompose';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        const { is_masks, sticker_set_ids } = update;\n        if (!is_masks) return;\n\n        this.filterSets();\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    filterSets(sticker_set_ids) {\n        const { sets, stickerSets } = this.state;\n    }\n\n    async reloadRecentContent() {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let firstOffsetTop = 0;\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n\n                    const offsetTop = node.offsetTop - firstOffsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => { this.loadingChunk = false; });\n\n        this.setsLength += result.length;\n        this.setState({ sets: sets.concat(result) });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    handleDeleteRecent = () => {\n        TdLibController.send({\n            '@type': 'clearRecentStickers',\n            is_attached: false\n        });\n    };\n\n    handleDeleteStickerSet = id => {\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: id,\n            is_installed: false\n        });\n    };\n\n    render() {\n        const { t } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        // console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo = recent && recent.stickers.length > 0 ? {\n            stickers: recent.stickers,\n            title: t('RecentStickers')\n        } : null;\n\n        return (\n            <div className='stickers-picker'>\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    { Boolean(recentInfo) && (\n                        <StickerSet\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                            onDeleteClick={this.handleDeleteRecent}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nconst styles = theme => ({\n    iconButton: {\n        margin: '8px 0px'\n    },\n    headerButton: {\n        borderRadius: 0,\n        flex: '50%'\n    },\n    pickerRoot: {\n        zIndex: theme.zIndex.modal,\n        width: 338,\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary,\n        borderRadius: theme.shape.borderRadius,\n        boxShadow: theme.shadows[8],\n        position: 'absolute',\n        bottom: 80,\n        display: 'none'\n    },\n    pickerRootOpened: {\n        display: 'block'\n    }\n});\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.removeListener('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n        if (tab === 1) {\n            stickersPicker.scrollTop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { classes, theme, t } = this.props;\n        const { open, tab, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className={classes.iconButton}\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames(classes.pickerRoot, { [classes.pickerRootOpened]: open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}