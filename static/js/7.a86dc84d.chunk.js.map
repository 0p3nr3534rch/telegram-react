{"version":3,"sources":["Components/Tile/DialogTitleControl.js","Components/Tile/DialogStatusControl.js","Components/Tile/ChatControl.js","Utils/Language.js","Components/Tile/TopChat.js","Components/Tile/RecentlyFoundChat.js","Components/Tile/FoundPublicChat.js","Components/Tile/FoundMessage.js","Components/ColumnLeft/Search/SearchCaption.js","Components/ColumnLeft/Search/Search.js","Components/ColumnLeft/ThemePicker.js","Components/ColumnLeft/LanguagePicker.js","Components/ColumnLeft/MainMenuButton.js","Components/ColumnLeft/DialogsHeader.js","Components/Tile/DialogContentControl.js","Components/Tile/DialogBadgeControl.js","Components/Tile/DialogMetaControl.js","Components/Tile/DialogControl.js","Components/ColumnLeft/DialogsList.js","Components/ColumnLeft/UpdatePanel.js","Components/ColumnLeft/Dialogs.js"],"names":["DialogTitleControl","onFastUpdatingComplete","update","_this","forceUpdate","onUpdateChatTitle","chatId","props","chat_id","nextProps","nextState","this","t","ChatStore","on","removeListener","_this$props","showSavedMessages","title","getChatTitle","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","React","Component","defaultProps","withTranslation","DialogStatusControl","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onUpdateUserStatus","chat","get","type","updateSubtitle","fullInfo","BasicGroupStore","getFullInfo","basic_group_id","members","find","x","user_id","setState","subtitle","getChatSubtitleWithoutTyping","id","isAccent","isAccentChatSubtitleWithoutTyping","onUpdateUserFullInfo","onUpdateBasicGroupFullInfo","onUpdateSupergroupFullInfo","supergroup_id","onUpdateBasicGroup","basic_group","onUpdateSupergroup","supergroup","state","prevChatId","_this$state","UserStore","SupergroupStore","classes","_this$state2","react_default","classNames","statusAccentSubtitle","statusSubtitle","withStyles","theme","color","palette","text","secondary","primary","dark","withTheme","ChatControl","handleClick","onSelect","_this$props2","onTileSelect","showStatus","onClick","ChatTileControl","Components_Tile_DialogStatusControl","__webpack_require__","d","__webpack_exports__","getCyrillicInput","getLatinInput","cyrillicInput","input","length","Map","output","i","has","latinInput","TopChat","shortTitle","getChatShortTitle","showOnline","PureComponent","userStatusRoot","position","right","bottom","zIndex","RecentlyFoundChat","ListItem_default","button","listItem","padding","FoundPublicChat","onClientUpdateChatId","nextChatId","previousChatId","ApplicationStore","getChatId","_classNames","_this$props3","selectedChatId","username","getChatUsername","membersCount","getGroupChatMembersCount","subscribersString","concat","root","defineProperty","listItemSelected","foundPublicChatSubtitle","backgroundColor","main","FoundMessage","objectSpread","nextMessageId","getMessageId","messageId","previousMessageId","chatSearch","selectedMessageId","message","MessageStore","sender_user_id","date","getMessageDate","senderName","getMessageSenderName","senderFullName","getMessageSenderFullName","content","getContent","tile","UserTileControl","userId","accentBackground","accent-background","foundMessageSubtitle","Fragment","enhance","compose","background","searchCaption","grey","searchCaptionCommand","caption","command","Boolean","Search","onClientUpdateSearchText","trimmedText","trim","searchText","loadContent","concatSearchResults","results","arr","map","result","chat_ids","j","set","push","sort","b","orderCompare","order","_ref","asyncToGenerator","regenerator_default","mark","_callee","sessionId","store","savedMessages","promises","localPromise","latinText","latinLocalPromise","cyrillicText","cyrillicLocalPromise","local","savedMessagesStrings","globalPromises","globalPromise","globalLatinPromise","globalResults","global","messages","chats","users","wrap","_context","prev","next","Date","TdLibController","send","@type","query","limit","Promise","all","catch","e","sent","abrupt","toUpperCase","some","el","includes","splice","top","recentlyFound","FileStore","getStore","loadChatsContent","USERNAME_LENGTH_MIN","from_message_id","offset","filter","offset_date","offset_chat_id","offset_message_id","setItems","toConsumableArray","keys","loadUsersContent","stop","_x","apply","arguments","_callee2","topPromise","recentlyFoundPromise","savedMessagesPromise","_ref3","_ref4","_context2","category","getMyId","force","error","slicedToArray","handleRecentlyFound","_callee3","_context3","offset_order","handleClearRecentlyFound","event","stopPropagation","handleSelectMessage","addToRecent","keepOpen","onSelectMessage","handleScroll","list","listRef","current","scrollTop","offsetHeight","scrollHeight","onLoadPrevious","getOffset","concatMessages","total_count","_callee4","_context4","loading","filterMessages","handleTopChatsScroll","handleClose","onClose","createRef","prevPropsChatId","prevPropsText","_this2","topChats","Components_Tile_TopChat","key","recentlyFoundChats","Components_Tile_RecentlyFoundChat","localChats","globalChats","Components_Tile_FoundPublicChat","globalMessages","Components_Tile_FoundMessage","messagesCaption","ref","search","onScroll","Search_SearchCaption","IconButton_default","closeSearchIconButton","aria-label","onMouseDown","Close_default","margin","default","ThemePicker","handleChange","target","value","emit","getColor","handleAccentChange","getColorString","red","orange","amber","green","blue","indigo","deepPurple","open","Dialog_default","transitionDuration","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","FormControl_default","component","formControl","FormLabel_default","focused","RadioGroup_default","name","group","onChange","FormControlLabel_default","control","Radio_default","label","redRoot","checked","orangeRoot","amberRoot","greenRoot","blueRoot","indigoRoot","deepPurpleRoot","spacing","unit","&$checked","LanguagePicker","language","clientUpdate","i18n","languages","LocalizationStore","info","language_packs","native_name","withSaveRef","withRestoreRef","menuAnchorOrigin","vertical","horizontal","MainMenuButton","onUpdateAuthorizationState","authorizationState","authorization_state","handleMenuOpen","isAuthorizationReady","anchorEl","currentTarget","handleMenuClose","handleLogOut","onLogOut","handleCheckUpdates","handleAppearance","themePicker","handleLanguage","languagePicker","setRef","console","log","assertThisInitialized","getAuthorizationState","mainMenuControl","core_Menu_default","getContentAnchorEl","disableAutoFocusItem","disableRestoreFocus","anchorOrigin","MenuItem_default","aria-owns","aria-haspopup","menuIconButton","Menu_default","ColumnLeft_ThemePicker","innerRef","ColumnLeft_LanguagePicker","searchIconButton","DialogsHeader","handleDone","logOut","handleSearch","onSearch","openSearch","handleKeyDown","keyCode","preventDefault","handleKeyUp","innerText","searchInput","innerHTML","handlePaste","plainText","clipboardData","getData","document","execCommand","handleInput","debounce","prevProps","prevState","snapshot","setTimeout","focus","confirmLogoutDialog","index_es","dialogText","placeholder","contentEditable","suppressContentEditableWarning","onKeyDown","onKeyUp","onPaste","ColumnLeft_MainMenuButton","headerIconButton","SpeedDialIcon_default","icon","icons_Search_default","openIcon","whiteSpace","DialogContentControl","onClientUpdateClearHistory","clearHistory","inProgress","onUpdate","contentControl","typingString","getChatTypingString","draft","getChatDraft","showChatDraft","getLastMessageContent","getLastMessageSenderName","DialogBadgeControl","onUpdateScopeNotificationSettings","scope","draft_message","unreadMessageIcon","getChatUnreadMessageIcon","unreadCount","getChatUnreadCount","unreadMentionCount","getChatUnreadMentionCount","showUnreadCount","showDraftChat","muteClassName","isChatMuted","dialogBadge","is_pinned","DialogMetaControl","getLastMessageDate","DialogControl","handleSelect","openChat","dialog","hidden","isSelected","dialogActive","statusRoot","statusIcon","Components_Tile_DialogMetaControl","Components_Tile_DialogContentControl","Components_Tile_DialogBadgeControl","borderRadius","cursor","& $statusRoot","&:hover","& $statusIcon","DialogsList","onClientUpdateLeaveChat","hiddenChats","delete","loadFirstSlice","onLoadNext","onUpdateConnectionState","newConnectionState","connectionState","skippedUpdates","initDB","onUpdateChatOrder","setChatId","changeChatDetailsVisibility","chatIds","status","reorderChats","newChatIds","minChatOrder","loadChatContents","replace","offsetOrder","offsetChatId","_args2","undefined","CHAT_SLICE_LIMIT","finally","shift","replaceChats","appendChats","getConnectionState","callback","orderedChatIds","isDifferentOrder","dialogs","Components_Tile_DialogControl","oldChatIds","UpdatePanel","onClientUpdateNewContentAvailable","newContentAvailable","handleUpdate","handled","window","location","reload","Button_default","variant","width","maxHeight","Dialogs","onClientUpdateThemeChange","onClientUpdateChatDetailsVisibility","isChatDetailsVisible","onClientUpdateSearchChat","searchChatId","handleHeaderClick","dialogsList","scrollToTop","visible","onSelectChat","handleSearchTextChange","borderColor","dialogs-third-column","ColumnLeft_DialogsHeader","onSearchTextChange","Components_ColumnLeft_DialogsList","ColumnLeft_Search_Search","ColumnLeft_UpdatePanel","borderStyle"],"mappings":"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","file":"static/js/7.a86dc84d.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport { getChatTitle } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogTitleControl.css';\n\nclass DialogTitleControl extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== this.props.t) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdateChatTitle = update => {\n        const { chatId } = this.props;\n\n        if (update.chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        const { t, chatId, showSavedMessages } = this.props;\n\n        const title = getChatTitle(chatId, showSavedMessages, t);\n\n        return <div className='dialog-title'>{title}</div>;\n    }\n}\n\nDialogTitleControl.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    showSavedMessages: PropTypes.bool\n};\n\nDialogTitleControl.defaultProps = {\n    showSavedMessages: true\n};\n\nexport default withTranslation()(DialogTitleControl);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { getChatSubtitleWithoutTyping, isAccentChatSubtitleWithoutTyping } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport UserStore from '../../Stores/UserStore';\nimport BasicGroupStore from '../../Stores/BasicGroupStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport './DialogStatusControl.css';\n\nconst styles = theme => ({\n    statusSubtitle: {\n        color: theme.palette.type === 'dark' ? theme.palette.text.secondary : '#70777b'\n    },\n    statusAccentSubtitle: {\n        color: theme.palette.primary.dark + '!important'\n    }\n});\n\nclass DialogStatusControl extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId } = this.props;\n\n        this.state = {\n            prevChatId: chatId,\n            subtitle: getChatSubtitleWithoutTyping(chatId),\n            isAccent: isAccentChatSubtitleWithoutTyping(chatId)\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId) {\n            const { chatId } = props;\n\n            return {\n                prevChatId: chatId,\n                subtitle: getChatSubtitleWithoutTyping(chatId),\n                isAccent: isAccentChatSubtitleWithoutTyping(chatId)\n            };\n        }\n\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId } = this.props;\n        const { subtitle, isAccent } = this.state;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextState.subtitle !== subtitle) {\n            return true;\n        }\n\n        if (nextState.isAccent !== isAccent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        UserStore.on('updateUserStatus', this.onUpdateUserStatus);\n        BasicGroupStore.on('updateBasicGroup', this.onUpdateBasicGroup);\n        SupergroupStore.on('updateSupergroup', this.onUpdateSupergroup);\n        UserStore.on('updateUserFullInfo', this.onUpdateUserFullInfo);\n        BasicGroupStore.on('updateBasicGroupFullInfo', this.onUpdateBasicGroupFullInfo);\n        SupergroupStore.on('updateSupergroupFullInfo', this.onUpdateSupergroupFullInfo);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeListener('updateUserStatus', this.onUpdateUserStatus);\n        BasicGroupStore.removeListener('updateBasicGroup', this.onUpdateBasicGroup);\n        SupergroupStore.removeListener('updateSupergroup', this.onUpdateSupergroup);\n        UserStore.removeListener('updateUserFullInfo', this.onUpdateUserFullInfo);\n        BasicGroupStore.removeListener('updateBasicGroupFullInfo', this.onUpdateBasicGroupFullInfo);\n        SupergroupStore.removeListener('updateSupergroupFullInfo', this.onUpdateSupergroupFullInfo);\n    }\n\n    onUpdateUserStatus = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n        if (!chat.type) return;\n\n        let updateSubtitle = false;\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                const fullInfo = BasicGroupStore.getFullInfo(chat.type.basic_group_id);\n                if (fullInfo && fullInfo.members) {\n                    const member = fullInfo.members.find(x => x.user_id === update.user_id);\n                    if (member) {\n                        updateSubtitle = true;\n                    }\n                }\n                break;\n            }\n            case 'chatTypePrivate': {\n                if (chat.type.user_id === update.user_id) {\n                    updateSubtitle = true;\n                }\n                break;\n            }\n            case 'chatTypeSecret': {\n                if (chat.type.user_id === update.user_id) {\n                    updateSubtitle = true;\n                }\n                break;\n            }\n            case 'chatTypeSupergroup': {\n                break;\n            }\n        }\n\n        if (updateSubtitle) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    updateSubtitle = chat => {\n        this.setState({\n            subtitle: getChatSubtitleWithoutTyping(chat.id),\n            isAccent: isAccentChatSubtitleWithoutTyping(chat.id)\n        });\n    };\n\n    onUpdateUserFullInfo = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') &&\n            chat.type.user_id === update.user_id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    onUpdateBasicGroupFullInfo = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeBasicGroup' &&\n            chat.type.basic_group_id === update.basic_group_id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    onUpdateSupergroupFullInfo = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeSupergroup' &&\n            chat.type.supergroup_id === update.supergroup_id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    onUpdateBasicGroup = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeBasicGroup' &&\n            chat.type.basic_group_id === update.basic_group.id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    onUpdateSupergroup = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        if (\n            chat.type &&\n            chat.type['@type'] === 'chatTypeSupergroup' &&\n            chat.type.supergroup_id === update.supergroup.id\n        ) {\n            this.updateSubtitle(chat);\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { subtitle, isAccent } = this.state;\n\n        return (\n            <div\n                className={classNames(\n                    'dialog-status',\n                    isAccent ? classes.statusAccentSubtitle : classes.statusSubtitle\n                )}>\n                {subtitle}\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(DialogStatusControl);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ChatTileControl from './ChatTileControl';\nimport DialogTitleControl from './DialogTitleControl';\nimport DialogStatusControl from './DialogStatusControl';\nimport ChatStore from '../../Stores/ChatStore';\nimport './ChatControl.css';\n\nclass ChatControl extends React.Component {\n    constructor(props) {\n        super(props);\n        if (process.env.NODE_ENV !== 'production') {\n            const { chatId } = this.props;\n            this.state = {\n                chat: ChatStore.get(chatId)\n            };\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.chatId !== this.props.chatId;\n    }\n\n    handleClick = () => {\n        const { chatId, onSelect } = this.props;\n        if (!onSelect) return;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        onSelect(chat);\n    };\n\n    render() {\n        const { chatId, onTileSelect, showStatus, showSavedMessages } = this.props;\n\n        return (\n            <div className='chat' onClick={this.handleClick}>\n                <div className='chat-wrapper'>\n                    <ChatTileControl chatId={chatId} onSelect={onTileSelect} showSavedMessages={showSavedMessages} />\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            <DialogTitleControl chatId={chatId} showSavedMessages={showSavedMessages} />\n                        </div>\n                        {showStatus && !showSavedMessages && (\n                            <div className='tile-second-row'>\n                                <DialogStatusControl chatId={chatId} />\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nChatControl.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    showSavedMessages: PropTypes.bool,\n    showStatus: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onTileSelect: PropTypes.func\n};\n\nChatControl.defaultProps = {\n    showSavedMessages: true,\n    showStatus: true\n};\n\nexport default ChatControl;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nlet cyrillicInput = null;\n\nfunction getCyrillicInputMap() {\n    return new Map([\n        ['q', 'й'],\n        ['w', 'ц'],\n        ['e', 'у'],\n        ['r', 'к'],\n        ['t', 'е'],\n        ['y', 'н'],\n        ['u', 'г'],\n        ['i', 'ш'],\n        ['o', 'щ'],\n        ['p', 'з'],\n        ['[', 'х'],\n        [']', 'ъ'],\n        ['a', 'ф'],\n        ['s', 'ы'],\n        ['d', 'в'],\n        ['f', 'а'],\n        ['g', 'п'],\n        ['h', 'р'],\n        ['j', 'о'],\n        ['k', 'л'],\n        ['l', 'д'],\n        [';', 'ж'],\n        [\"'\", 'э'],\n        ['\\\\', 'ё'],\n        ['z', 'я'],\n        ['x', 'ч'],\n        ['c', 'с'],\n        ['v', 'м'],\n        ['b', 'и'],\n        ['n', 'т'],\n        ['m', 'ь'],\n        [',', 'б'],\n        ['.', 'ю']\n    ]);\n}\n\nfunction getCyrillicInput(input) {\n    if (!input) return null;\n    if (!input.length) return null;\n\n    cyrillicInput = cyrillicInput || getCyrillicInputMap();\n\n    let output = '';\n    for (let i = 0; i < input.length; i++) {\n        if (cyrillicInput.has(input[i])) {\n            output += cyrillicInput.get(input[i]);\n        } else {\n            return null;\n        }\n    }\n\n    return output === '' ? null : output;\n}\n\nlet latinInput = null;\n\nfunction getLatinInputMap() {\n    return new Map([\n        ['й', 'q'],\n        ['ц', 'w'],\n        ['у', 'e'],\n        ['к', 'r'],\n        ['е', 't'],\n        ['н', 'y'],\n        ['г', 'u'],\n        ['ш', 'i'],\n        ['щ', 'o'],\n        ['з', 'p'],\n        ['х', '['],\n        ['ъ', ']'],\n        ['ф', 'a'],\n        ['ы', 's'],\n        ['в', 'd'],\n        ['а', 'f'],\n        ['п', 'g'],\n        ['р', 'h'],\n        ['о', 'j'],\n        ['л', 'k'],\n        ['д', 'l'],\n        ['ж', ';'],\n        ['э', \"'\"],\n        ['ё', '\\\\'],\n        ['я', 'z'],\n        ['ч', 'x'],\n        ['с', 'c'],\n        ['м', 'v'],\n        ['и', 'b'],\n        ['т', 'n'],\n        ['ь', 'm'],\n        ['б', ','],\n        ['ю', '.']\n    ]);\n}\n\nfunction getLatinInput(input) {\n    if (!input) return null;\n    if (!input.length) return null;\n\n    latinInput = latinInput || getLatinInputMap();\n\n    let output = '';\n    for (let i = 0; i < input.length; i++) {\n        if (latinInput.has(input[i])) {\n            output += latinInput.get(input[i]);\n        } else {\n            return null;\n        }\n    }\n\n    return output === '' ? null : output;\n}\n\nexport { getCyrillicInput, getLatinInput };\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport ChatTileControl from './ChatTileControl';\nimport { getChatShortTitle } from '../../Utils/Chat';\nimport './TopChat.css';\n\nconst styles = {\n    userStatusRoot: {\n        position: 'absolute',\n        right: 1,\n        bottom: 1,\n        zIndex: 1\n    }\n};\n\nclass TopChat extends React.PureComponent {\n    render() {\n        const { classes, chatId, onSelect, showSavedMessages } = this.props;\n\n        const shortTitle = getChatShortTitle(chatId, showSavedMessages);\n\n        return (\n            <div className='top-chat'>\n                <ChatTileControl chatId={chatId} onSelect={onSelect} showSavedMessages={showSavedMessages} showOnline />\n                <div className='top-chat-title'>{shortTitle}</div>\n            </div>\n        );\n    }\n}\n\nTopChat.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    onSelect: PropTypes.func,\n    showSavedMessages: PropTypes.bool\n};\n\nTopChat.defaultProps = {\n    showSavedMessages: true\n};\n\nexport default withStyles(styles)(TopChat);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport ChatTileControl from './ChatTileControl';\nimport DialogTitleControl from './DialogTitleControl';\nimport './RecentlyFoundChat.css';\n\nconst styles = {\n    listItem: {\n        padding: '0px'\n    }\n};\n\nclass RecentlyFoundChat extends React.PureComponent {\n    render() {\n        const { chatId, onClick, classes } = this.props;\n\n        return (\n            <ListItem button className={classes.listItem} onClick={onClick}>\n                <div className='recently-found-chat'>\n                    <div className='chat-wrapper'>\n                        <ChatTileControl chatId={chatId} showSavedMessages />\n                        <div className='dialog-inner-wrapper'>\n                            <div className='tile-first-row'>\n                                <DialogTitleControl chatId={chatId} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ListItem>\n        );\n    }\n}\n\nRecentlyFoundChat.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    onSelect: PropTypes.func\n};\n\nexport default withStyles(styles)(RecentlyFoundChat);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport classNames from 'classnames';\nimport ChatTileControl from './ChatTileControl';\nimport DialogTitleControl from './DialogTitleControl';\nimport { getChatUsername, getGroupChatMembersCount } from '../../Utils/Chat';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport './FoundPublicChat.css';\n\nconst styles = theme => ({\n    listItem: {\n        padding: 0\n    },\n    listItemSelected: {\n        backgroundColor: theme.palette.primary.main + '!important'\n    },\n    foundPublicChatSubtitle: {\n        color: theme.palette.type === 'dark' ? theme.palette.text.secondary : '#70777b'\n    }\n});\n\nclass FoundPublicChat extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nextChatId: ApplicationStore.getChatId(),\n            previousChatId: null\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, theme } = this.props;\n\n        if (nextState.nextChatId === chatId) {\n            return true;\n        }\n\n        if (nextState.previousChatId === chatId) {\n            return true;\n        }\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    onClientUpdateChatId = update => {\n        const { nextChatId, previousChatId } = update;\n\n        this.setState({\n            nextChatId: nextChatId,\n            previousChatId: previousChatId\n        });\n    };\n\n    handleClick = () => {\n        const { chatId, onSelect } = this.props;\n        if (!onSelect) return;\n\n        onSelect(chatId);\n    };\n\n    render() {\n        const { chatId, onClick, classes } = this.props;\n        const selectedChatId = this.state.nextChatId;\n\n        const username = getChatUsername(chatId);\n        const membersCount = getGroupChatMembersCount(chatId);\n        let subscribersString = '';\n        if (membersCount > 0) {\n            subscribersString = membersCount === 1 ? ', 1 subscriber' : `, ${membersCount} subscribers`;\n        }\n\n        return (\n            <ListItem button classes={{ root: classes.listItem }} onClick={onClick}>\n                <div\n                    className={classNames('found-public-chat', {\n                        [classes.listItemSelected]: chatId === selectedChatId,\n                        'accent-background': chatId === selectedChatId\n                    })}\n                    onClick={this.handleClick}>\n                    <ChatTileControl chatId={chatId} />\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            <DialogTitleControl chatId={chatId} />\n                        </div>\n                        <div className='tile-second-row'>\n                            <div className={classNames('dialog-content', classes.foundPublicChatSubtitle)}>\n                                @{username}\n                                {subscribersString}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ListItem>\n        );\n    }\n}\n\nFoundPublicChat.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    onClick: PropTypes.func\n};\n\nexport default withStyles(styles, { withTheme: true })(FoundPublicChat);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'recompose';\nimport ListItem from '@material-ui/core/ListItem';\nimport ChatTileControl from './ChatTileControl';\nimport UserTileControl from './UserTileControl';\nimport DialogTitleControl from './DialogTitleControl';\nimport { getMessageDate, getMessageSenderFullName, getMessageSenderName } from '../../Utils/Chat';\nimport { getContent } from '../../Utils/Message';\nimport MessageStore from '../../Stores/MessageStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport './FoundMessage.css';\n\nconst styles = theme => ({\n    listItem: {\n        padding: 0\n    },\n    accentBackground: {\n        background: theme.palette.primary.main + '!important'\n    },\n    foundMessageSubtitle: {\n        color: theme.palette.type === 'dark' ? theme.palette.text.secondary : '#70777b'\n    }\n});\n\nclass FoundMessage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nextChatId: ApplicationStore.getChatId(),\n            nextMessageId: ApplicationStore.getMessageId()\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId, theme } = this.props;\n\n        if (nextState.nextChatId === chatId && nextState.nextMessageId === messageId) {\n            return true;\n        }\n\n        if (nextState.previousChatId === chatId && nextState.previousMessageId === messageId) {\n            return true;\n        }\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    onClientUpdateChatId = update => {\n        this.setState({\n            ...update\n        });\n    };\n\n    render() {\n        const { chatId, messageId, chatSearch, onClick, classes, t } = this.props;\n        const selectedChatId = this.state.nextChatId;\n        const selectedMessageId = this.state.nextMessageId;\n        const message = MessageStore.get(chatId, messageId);\n\n        const { sender_user_id } = message;\n\n        const date = getMessageDate(message);\n        const senderName = getMessageSenderName(message);\n        const senderFullName = getMessageSenderFullName(message);\n        const content = getContent(message, t) || '\\u00A0';\n\n        const tile =\n            sender_user_id && chatSearch ? (\n                <UserTileControl userId={sender_user_id} />\n            ) : (\n                <ChatTileControl chatId={chatId} />\n            );\n\n        return (\n            <ListItem button className={classes.listItem} onClick={onClick}>\n                <div\n                    className={classNames(\n                        'found-message',\n                        { [classes.accentBackground]: chatId === selectedChatId && messageId === selectedMessageId },\n                        { 'accent-background': chatId === selectedChatId && messageId === selectedMessageId }\n                    )}>\n                    {tile}\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            {chatSearch && senderFullName ? (\n                                <div className='dialog-title'>{senderFullName}</div>\n                            ) : (\n                                <DialogTitleControl chatId={chatId} />\n                            )}\n                            <div className={classNames('dialog-meta-date', classes.foundMessageSubtitle)}>{date}</div>\n                        </div>\n                        <div className='tile-second-row'>\n                            <div className={classNames('dialog-content', classes.foundMessageSubtitle)}>\n                                {\n                                    <>\n                                        {!chatSearch && senderName && (\n                                            <span className='dialog-content-accent'>{senderName}: </span>\n                                        )}\n                                        {content}\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ListItem>\n        );\n    }\n}\n\nFoundMessage.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    chatSearch: PropTypes.bool,\n    onClick: PropTypes.func\n};\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(FoundMessage);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport './SearchCaption.css';\n\nconst styles = theme => ({\n    searchCaption: {\n        background: theme.palette.type === 'dark' ? theme.palette.grey[800] + '!important' : '#f0f4f7',\n        color: theme.palette.type === 'dark' ? theme.palette.text.primary + '!important' : '#8096a8'\n    },\n    searchCaptionCommand: {\n        color: theme.palette.type === 'dark' ? theme.palette.text.primary + '!important' : '#8096a8'\n    }\n});\n\nfunction SearchCaption(props) {\n    const { caption, command, onClick, classes } = props;\n\n    return (\n        <div className={classNames('search-caption', classes.searchCaption)}>\n            <div className='search-caption-title'>{caption}</div>\n            {Boolean(command) && (\n                <a className={classes.searchCaptionCommand} onClick={onClick}>\n                    {command}\n                </a>\n            )}\n        </div>\n    );\n}\n\nSearchCaption.propTypes = {\n    caption: PropTypes.string.isRequired,\n    command: PropTypes.string,\n    onClick: PropTypes.func\n};\n\nexport default withStyles(styles, { withTheme: true })(SearchCaption);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChatControl from '../../Tile/ChatControl';\nimport TopChat from '../../Tile/TopChat';\nimport RecentlyFoundChat from '../../Tile/RecentlyFoundChat';\nimport FoundPublicChat from '../../Tile/FoundPublicChat';\nimport FoundMessage from '../../Tile/FoundMessage';\nimport SearchCaption from './SearchCaption';\nimport { loadChatsContent, loadUsersContent } from '../../../Utils/File';\nimport { filterMessages } from '../../../Utils/Message';\nimport { getCyrillicInput, getLatinInput } from '../../../Utils/Language';\nimport { orderCompare } from '../../../Utils/Common';\nimport { USERNAME_LENGTH_MIN } from '../../../Constants';\nimport MessageStore from '../../../Stores/MessageStore';\nimport FileStore from '../../../Stores/FileStore';\nimport ChatStore from '../../../Stores/ChatStore';\nimport UserStore from '../../../Stores/UserStore';\nimport ApplicationStore from '../../../Stores/ApplicationStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './Search.css';\n\nconst styles = theme => ({\n    closeSearchIconButton: {\n        margin: '8px 12px 8px 0'\n    },\n    listItem: {\n        padding: '0px'\n    },\n    search: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n    }\n});\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.listRef = React.createRef();\n\n        const { chatId, text } = this.props;\n\n        this.state = {\n            prevPropsChatId: chatId,\n            prevPropsText: text,\n\n            top: null,\n            recentlyFound: null,\n            local: null,\n            global: null,\n            messages: null\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevPropsChatId || props.text !== state.prevPropsText) {\n            return {\n                prevPropsChatId: props.chatId,\n                prevPropsText: props.text,\n\n                top: null,\n                recentlyFound: null,\n                local: null,\n                global: null,\n                messages: null\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        this.loadContent();\n\n        ApplicationStore.on('clientUpdateSearchText', this.onClientUpdateSearchText);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateSearchText', this.onClientUpdateSearchText);\n    }\n\n    onClientUpdateSearchText = update => {\n        const { text } = update;\n\n        const trimmedText = text.trim();\n\n        if (!trimmedText) {\n            this.loadContent();\n        } else {\n            this.searchText(trimmedText);\n        }\n    };\n\n    concatSearchResults = results => {\n        const arr = [];\n        const map = new Map();\n\n        for (let i = 0; i < results.length; i++) {\n            let result = results[i].chat_ids;\n            if (result) {\n                for (let j = 0; j < result.length; j++) {\n                    if (!map.has(result[j])) {\n                        map.set(result[j], result[j]);\n                        arr.push(result[j]);\n                    }\n                }\n            }\n        }\n\n        arr.sort((a, b) => {\n            return orderCompare(ChatStore.get(b).order, ChatStore.get(a).order);\n        });\n\n        return arr;\n    };\n\n    searchText = async text => {\n        this.sessionId = new Date();\n        this.text = text;\n        const sessionId = this.sessionId;\n        let store = null;\n\n        const { chatId } = this.props;\n        const { savedMessages } = this.state;\n\n        if (!chatId) {\n            const promises = [];\n            const localPromise = TdLibController.send({\n                '@type': 'searchChats',\n                query: text,\n                limit: 100\n            });\n            promises.push(localPromise);\n\n            const latinText = getLatinInput(text);\n            if (latinText) {\n                const latinLocalPromise = TdLibController.send({\n                    '@type': 'searchChats',\n                    query: latinText,\n                    limit: 100\n                });\n                promises.push(latinLocalPromise);\n            }\n\n            const cyrillicText = getCyrillicInput(text);\n            if (cyrillicText) {\n                const cyrillicLocalPromise = TdLibController.send({\n                    '@type': 'searchChats',\n                    query: cyrillicText,\n                    limit: 100\n                });\n                promises.push(cyrillicLocalPromise);\n            }\n\n            const results = await Promise.all(promises.map(x => x.catch(e => null)));\n            const local = this.concatSearchResults(results);\n\n            if (sessionId !== this.sessionId) {\n                return;\n            }\n\n            if (savedMessages) {\n                const { t } = this.props;\n\n                const searchText = text.toUpperCase();\n                const savedMessagesStrings = ['SAVED MESSAGES', t('SavedMessages').toUpperCase()];\n\n                if (\n                    savedMessagesStrings.some(el => el.includes(searchText)) ||\n                    (latinText && savedMessagesStrings.some(el => el.includes(latinText.toUpperCase())))\n                ) {\n                    local.splice(0, 0, savedMessages.id);\n                }\n            }\n\n            this.setState({\n                top: null,\n                recentlyFound: null,\n                local: local,\n                global: null,\n                messages: null\n            });\n\n            store = FileStore.getStore();\n            loadChatsContent(store, local);\n\n            if (text.length >= USERNAME_LENGTH_MIN) {\n                const globalPromises = [];\n\n                const globalPromise = TdLibController.send({\n                    '@type': 'searchPublicChats',\n                    query: text\n                });\n                globalPromises.push(globalPromise);\n\n                if (latinText) {\n                    const globalLatinPromise = TdLibController.send({\n                        '@type': 'searchPublicChats',\n                        query: latinText\n                    });\n                    globalPromises.push(globalLatinPromise);\n                }\n\n                const globalResults = await Promise.all(globalPromises.map(x => x.catch(e => null)));\n                const global = this.concatSearchResults(globalResults);\n\n                if (sessionId !== this.sessionId) {\n                    return;\n                }\n\n                this.setState({\n                    global: global\n                });\n\n                store = FileStore.getStore();\n                loadChatsContent(store, global);\n            }\n        }\n\n        let messages = [];\n        if (chatId) {\n            messages = await TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: text,\n                sender_user_id: 0,\n                from_message_id: 0,\n                offset: 0,\n                limit: 50,\n                filter: null\n            });\n        } else {\n            messages = await TdLibController.send({\n                '@type': 'searchMessages',\n                query: text,\n                offset_date: 0,\n                offset_chat_id: 0,\n                offset_message_id: 0,\n                limit: 50\n            });\n        }\n\n        MessageStore.setItems(messages.messages);\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        this.setState({\n            messages: messages\n        });\n\n        const chats = new Map();\n        const users = new Map();\n        for (let i = 0; i < messages.messages.length; i++) {\n            chats.set(messages.messages[i].chat_id, messages.messages[i].chat_id);\n            if (messages.messages[i].sender_user_id) {\n                users.set(messages.messages[i].sender_user_id, messages.messages[i].sender_user_id);\n            }\n        }\n\n        store = FileStore.getStore();\n        loadChatsContent(store, [...chats.keys()]);\n        loadUsersContent(store, [...users.keys()]);\n    };\n\n    loadContent = async () => {\n        const { chatId } = this.props;\n        if (chatId) {\n            this.setState({\n                top: null,\n                recentlyFound: null,\n                local: null,\n                global: null,\n                messages: null\n            });\n\n            return;\n        }\n\n        const topPromise = TdLibController.send({\n            '@type': 'getTopChats',\n            category: { '@type': 'topChatCategoryUsers' },\n            limit: 30\n        }).catch(() => {\n            return { '@type': 'chats', chat_ids: [] };\n        });\n\n        const recentlyFoundPromise = TdLibController.send({\n            '@type': 'searchChats',\n            query: '',\n            limit: 100\n        }).catch(() => {\n            return { '@type': 'chats', chat_ids: [] };\n        });\n\n        const savedMessagesPromise = TdLibController.send({\n            '@type': 'createPrivateChat',\n            user_id: UserStore.getMyId(),\n            force: true\n        }).catch(error => {});\n\n        const [top, recentlyFound, savedMessages] = await Promise.all([\n            topPromise,\n            recentlyFoundPromise,\n            savedMessagesPromise\n        ]);\n\n        this.setState({\n            top: top,\n            recentlyFound: recentlyFound,\n            savedMessages: savedMessages,\n            local: null,\n            global: null,\n            messages: null\n        });\n\n        const store = FileStore.getStore();\n        loadChatsContent(store, top.chat_ids);\n        loadChatsContent(store, recentlyFound.chat_ids);\n    };\n\n    handleRecentlyFound = async () => {\n        const chats = await TdLibController.send({\n            '@type': 'getChats',\n            offset_order: '9223372036854775807',\n            offset_chat_id: 0,\n            limit: 20\n        });\n\n        for (let i = chats.chat_ids.length - 1; i >= 0; i--) {\n            TdLibController.send({\n                '@type': 'addRecentlyFoundChat',\n                chat_id: chats.chat_ids[i]\n            });\n        }\n    };\n\n    handleClearRecentlyFound = event => {\n        event.stopPropagation();\n\n        TdLibController.send({\n            '@type': 'clearRecentlyFoundChats'\n        });\n\n        this.setState({ recentlyFound: null });\n    };\n\n    handleSelectMessage = (chatId, messageId, addToRecent, keepOpen) => {\n        const { onSelectMessage } = this.props;\n\n        if (addToRecent) {\n            TdLibController.send({\n                '@type': 'addRecentlyFoundChat',\n                chat_id: chatId\n            });\n        }\n\n        onSelectMessage(chatId, messageId, keepOpen);\n    };\n\n    handleScroll = () => {\n        const list = this.listRef.current;\n\n        if (list.scrollTop + list.offsetHeight === list.scrollHeight) {\n            this.onLoadPrevious();\n        }\n    };\n\n    getOffset = messages => {\n        const length = messages ? messages.messages.length : 0;\n\n        const offsetDate = length > 0 ? messages.messages[length - 1].date : 0;\n        const offsetChatId = length > 0 ? messages.messages[length - 1].chat_id : 0;\n        const offsetMessageId = length > 0 ? messages.messages[length - 1].id : 0;\n\n        return {\n            offset_date: offsetDate,\n            offset_chat_id: offsetChatId,\n            offset_message_id: offsetMessageId\n        };\n    };\n\n    concatMessages = (messages, result) => {\n        if (!result) return messages;\n        if (!result.messages.length) return messages;\n\n        if (!messages) return result;\n        if (!messages.messages.length) return result;\n\n        return {\n            total_count: result.total_count,\n            messages: messages.messages.concat(result.messages)\n        };\n    };\n\n    onLoadPrevious = async () => {\n        if (this.loading) return;\n\n        const { chatId } = this.props;\n\n        const sessionId = this.sessionId;\n\n        const { messages } = this.state;\n\n        const offset = this.getOffset(messages);\n\n        this.loading = true;\n        let result = [];\n        if (chatId) {\n            result = await TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: this.text,\n                sender_user_id: 0,\n                from_message_id: offset.offset_message_id,\n                limit: 50,\n                filter: null\n            });\n        } else {\n            result = await TdLibController.send({\n                '@type': 'searchMessages',\n                query: this.text,\n                ...offset,\n                limit: 50\n            });\n        }\n        this.loading = false;\n\n        filterMessages(result, messages ? messages.messages : []);\n\n        MessageStore.setItems(result.messages);\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        this.setState({\n            messages: this.concatMessages(messages, result)\n        });\n\n        const chats = new Map();\n        const users = new Map();\n        for (let i = 0; i < result.messages.length; i++) {\n            chats.set(result.messages[i].chat_id, result.messages[i].chat_id);\n            if (result.messages[i].sender_user_id) {\n                users.set(result.messages[i].sender_user_id, result.messages[i].sender_user_id);\n            }\n        }\n\n        const store = FileStore.getStore();\n        loadChatsContent(store, [...chats.keys()]);\n        loadUsersContent(store, [...users.keys()]);\n    };\n\n    handleTopChatsScroll = event => {\n        event.stopPropagation();\n    };\n\n    handleClose = () => {\n        const { onClose } = this.props;\n\n        onClose();\n    };\n\n    render() {\n        const { classes, chatId } = this.props;\n        const { top, recentlyFound, local, global, messages } = this.state;\n\n        const chat = ChatStore.get(chatId);\n\n        const topChats =\n            top && top.chat_ids\n                ? top.chat_ids.map(x => (\n                      <TopChat key={x} chatId={x} onSelect={() => this.handleSelectMessage(x, null, false, false)} />\n                  ))\n                : [];\n\n        const recentlyFoundChats =\n            recentlyFound && recentlyFound.chat_ids\n                ? recentlyFound.chat_ids.map(x => (\n                      <RecentlyFoundChat\n                          key={x}\n                          chatId={x}\n                          onClick={() => this.handleSelectMessage(x, null, true, false)}\n                      />\n                  ))\n                : [];\n\n        const localChats = local\n            ? local.map(x => (\n                  <RecentlyFoundChat\n                      key={x}\n                      chatId={x}\n                      onClick={() => this.handleSelectMessage(x, null, true, false)}\n                  />\n              ))\n            : [];\n\n        const globalChats = global\n            ? global.map(x => (\n                  <FoundPublicChat key={x} chatId={x} onClick={() => this.handleSelectMessage(x, null, true, true)} />\n              ))\n            : [];\n\n        const globalMessages =\n            messages && messages.messages\n                ? messages.messages.map(x => (\n                      <FoundMessage\n                          key={`${x.chat_id}_${x.id}`}\n                          chatId={x.chat_id}\n                          messageId={x.id}\n                          chatSearch={Boolean(chatId)}\n                          onClick={() => this.handleSelectMessage(x.chat_id, x.id, false, true)}\n                      />\n                  ))\n                : [];\n\n        let messagesCaption = 'No messages found';\n        if (messages && messages.total_count) {\n            messagesCaption = messages.total_count === 1 ? 'Found 1 message' : `Found ${messages.total_count} messages`;\n        }\n\n        return (\n            <div ref={this.listRef} className={classNames(classes.search, 'search')} onScroll={this.handleScroll}>\n                {chat && (\n                    <div className='search-chat'>\n                        <SearchCaption caption='Search messages in' />\n                        <div className='search-chat-wrapper'>\n                            <div className='search-chat-control'>\n                                <ChatControl chatId={chatId} showStatus={false} />\n                            </div>\n                            <IconButton\n                                className={classes.closeSearchIconButton}\n                                aria-label='Search'\n                                onMouseDown={this.handleClose}>\n                                <CloseIcon />\n                            </IconButton>\n                        </div>\n                    </div>\n                )}\n                {topChats.length > 0 && (\n                    <div className='search-top-chats'>\n                        <SearchCaption caption='People' />\n                        <div className='search-top-chats-list' onScroll={this.handleTopChatsScroll}>\n                            <div className='search-top-chats-placeholder' />\n                            {topChats}\n                            <div className='search-top-chats-placeholder' />\n                        </div>\n                    </div>\n                )}\n                {recentlyFoundChats.length > 0 && (\n                    <div className='search-recently-found-chats'>\n                        <SearchCaption caption='Recent' command='Clear' onClick={this.handleClearRecentlyFound} />\n                        {recentlyFoundChats}\n                    </div>\n                )}\n                {localChats.length > 0 && (\n                    <div className='search-local-chats'>\n                        <SearchCaption caption='Chats and contacts' />\n                        {localChats}\n                    </div>\n                )}\n                {globalChats.length > 0 && (\n                    <div className='search-global-chats'>\n                        <SearchCaption caption='Global search' />\n                        {globalChats}\n                    </div>\n                )}\n                {messages && (\n                    <div className='search-global-chats'>\n                        <SearchCaption caption={messagesCaption} />\n                        {globalMessages}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nSearch.propTypes = {\n    chatId: PropTypes.number,\n    text: PropTypes.string,\n    onSelectMessage: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(Search);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport red from '@material-ui/core/colors/red';\nimport orange from '@material-ui/core/colors/orange';\nimport amber from '@material-ui/core/colors/amber';\nimport green from '@material-ui/core/colors/green';\nimport blue from '@material-ui/core/colors/blue';\nimport indigo from '@material-ui/core/colors/indigo';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport ApplicationStore from '../../Stores/ApplicationStore';\n\nconst styles = theme => ({\n    formControl: {\n        margin: theme.spacing.unit * 3\n    },\n    group: {\n        margin: `${theme.spacing.unit}px 0`\n    },\n    redRoot: {\n        color: red[600],\n        '&$checked': {\n            color: red[500]\n        }\n    },\n    orangeRoot: {\n        color: orange[600],\n        '&$checked': {\n            color: orange[500]\n        }\n    },\n    amberRoot: {\n        color: amber[600],\n        '&$checked': {\n            color: amber[500]\n        }\n    },\n    greenRoot: {\n        color: green[600],\n        '&$checked': {\n            color: green[500]\n        }\n    },\n    blueRoot: {\n        color: blue[600],\n        '&$checked': {\n            color: blue[500]\n        }\n    },\n    indigoRoot: {\n        color: indigo[600],\n        '&$checked': {\n            color: indigo[500]\n        }\n    },\n    deepPurpleRoot: {\n        color: deepPurple[600],\n        '&$checked': {\n            color: deepPurple[500]\n        }\n    },\n    checked: {}\n});\n\nclass ThemePicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            type: this.props.theme.palette.type,\n            color: this.getColorString(this.props.theme.palette.primary.main)\n        };\n    }\n\n    handleChange = event => {\n        this.setState({ type: event.target.value });\n\n        ApplicationStore.emit('clientUpdateThemeChanging', {\n            type: event.target.value,\n            primary: this.getColor(this.state.color)\n        });\n    };\n\n    handleAccentChange = event => {\n        this.setState({ color: event.target.value });\n\n        ApplicationStore.emit('clientUpdateThemeChanging', {\n            type: this.state.type,\n            primary: this.getColor(event.target.value)\n        });\n    };\n\n    getColorString = value => {\n        switch (value) {\n            case red['500']:\n                return 'red';\n            case orange['500']:\n                return 'orange';\n            case amber['500']:\n                return 'amber';\n            case green['500']:\n                return 'green';\n            case blue['500']:\n                return 'blue';\n            case indigo['500']:\n                return 'indigo';\n            case deepPurple['500']:\n                return 'deepPurple';\n        }\n\n        return null;\n    };\n\n    getColor = value => {\n        switch (value) {\n            case 'red':\n                return red;\n            case 'orange':\n                return orange;\n            case 'amber':\n                return amber;\n            case 'green':\n                return green;\n            case 'blue':\n                return blue;\n            case 'indigo':\n                return indigo;\n            case 'deepPurple':\n                return deepPurple;\n        }\n\n        return null;\n    };\n\n    handleClose = () => {\n        this.setState({ open: false });\n    };\n\n    open = () => {\n        this.setState({ open: true });\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { type, color } = this.state;\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                open={this.state.open}\n                onClose={this.handleClose}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'>\n                <DialogTitle id='alert-dialog-title'>Appearance</DialogTitle>\n                <DialogContent>\n                    <FormControl component='fieldset' className={classes.formControl}>\n                        <FormLabel focused component='legend'>\n                            Theme\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='theme'\n                            name='theme1'\n                            className={classes.group}\n                            value={type}\n                            onChange={this.handleChange}>\n                            <FormControlLabel value='light' control={<Radio color='primary' />} label='Light' />\n                            <FormControlLabel value='dark' control={<Radio color='primary' />} label='Dark' />\n                        </RadioGroup>\n                    </FormControl>\n                    <FormControl component='fieldset' className={classes.formControl}>\n                        <FormLabel focused component='legend'>\n                            Accent\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='accent'\n                            name='accent1'\n                            className={classes.group}\n                            value={color}\n                            onChange={this.handleAccentChange}>\n                            <FormControlLabel\n                                value='red'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.redRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Red'\n                            />\n                            <FormControlLabel\n                                value='orange'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.orangeRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Orange'\n                            />\n                            <FormControlLabel\n                                value='amber'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.amberRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Amber'\n                            />\n                            <FormControlLabel\n                                value='green'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.greenRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Green'\n                            />\n                            <FormControlLabel\n                                value='blue'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.blueRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Blue'\n                            />\n                            <FormControlLabel\n                                value='indigo'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.indigoRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Indigo'\n                            />\n                            <FormControlLabel\n                                value='deepPurple'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.deepPurpleRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Deep Purple'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </DialogContent>\n            </Dialog>\n        );\n    }\n}\n\nThemePicker.propTypes = {};\n\nexport default withStyles(styles, { withTheme: true })(ThemePicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport TdLibController from '../../Controllers/TdLibController';\nimport LocalizationStore from '../../Stores/LocalizationStore';\n\nconst styles = theme => ({\n    formControl: {\n        margin: theme.spacing.unit * 3\n    },\n    group: {\n        margin: `${theme.spacing.unit}px 0`\n    }\n});\n\nclass LanguagePicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { i18n } = props;\n        const language = i18n ? i18n.language : null;\n\n        this.state = {\n            open: false,\n            language: language || 'en'\n        };\n    }\n\n    handleChange = event => {\n        this.setState({ language: event.target.value });\n\n        TdLibController.clientUpdate({ '@type': 'clientUpdateLanguageChange', language: event.target.value });\n    };\n\n    handleClose = () => {\n        this.setState({ open: false });\n    };\n\n    open = () => {\n        this.setState({ open: true });\n    };\n\n    render() {\n        const { classes, t } = this.props;\n        const { open, language } = this.state;\n        const info = LocalizationStore.info || { language_packs: [] };\n\n        const languages = info.language_packs.map(x => (\n            <FormControlLabel\n                key={x.id}\n                value={x.id}\n                control={<Radio color='primary' />}\n                label={`${x.name}\\xa0(${x.native_name})`}\n            />\n        ));\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                open={open}\n                onClose={this.handleClose}\n                aria-labelledby='language-dialog-title'\n                aria-describedby='language-dialog-description'>\n                <DialogTitle id='language-dialog-title'>{t('Language')}</DialogTitle>\n                <DialogContent>\n                    <FormControl component='fieldset'>\n                        <RadioGroup\n                            aria-label='language'\n                            name='language1'\n                            value={language}\n                            onChange={this.handleChange}>\n                            {languages}\n                        </RadioGroup>\n                    </FormControl>\n                </DialogContent>\n            </Dialog>\n        );\n    }\n}\n\nLanguagePicker.propTypes = {};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withStyles(styles, { withTheme: true }),\n    withRestoreRef()\n);\n\nexport default enhance(LanguagePicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'recompose';\nimport ThemePicker from './ThemePicker';\nimport LanguagePicker from './LanguagePicker';\nimport { update } from '../../registerServiceWorker';\nimport { isAuthorizationReady } from '../../Utils/Common';\nimport ApplicationStore from '../../Stores/ApplicationStore';\n\nconst styles = {\n    menuIconButton: {\n        margin: '8px -2px 8px 12px'\n    },\n    searchIconButton: {\n        margin: '8px 12px 8px 0'\n    }\n};\n\nconst menuAnchorOrigin = {\n    vertical: 'bottom',\n    horizontal: 'left'\n};\n\nclass MainMenuButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            authorizationState: ApplicationStore.getAuthorizationState(),\n            anchorEl: null\n        };\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('updateAuthorizationState', this.onUpdateAuthorizationState);\n    }\n\n    onUpdateAuthorizationState = update => {\n        this.setState({ authorizationState: update.authorization_state });\n    };\n\n    handleMenuOpen = event => {\n        const { authorizationState } = this.state;\n        if (!isAuthorizationReady(authorizationState)) return;\n\n        this.setState({ anchorEl: event.currentTarget });\n    };\n\n    handleMenuClose = () => {\n        this.setState({ anchorEl: null });\n    };\n\n    handleLogOut = () => {\n        this.handleMenuClose();\n\n        this.props.onLogOut();\n    };\n\n    handleCheckUpdates = async () => {\n        this.handleMenuClose();\n\n        await update();\n    };\n\n    handleAppearance = event => {\n        this.handleMenuClose();\n\n        this.themePicker.open();\n    };\n\n    handleLanguage = event => {\n        this.handleMenuClose();\n\n        this.languagePicker.open();\n    };\n\n    setRef = ref => {\n        console.log(this);\n        this.languagePicker = ref;\n    };\n\n    render() {\n        const { classes, t } = this.props;\n        const { anchorEl, authorizationState } = this.state;\n\n        const mainMenuControl = isAuthorizationReady(authorizationState) ? (\n            <>\n                <Menu\n                    id='main-menu'\n                    anchorEl={anchorEl}\n                    open={Boolean(anchorEl)}\n                    onClose={this.handleMenuClose}\n                    getContentAnchorEl={null}\n                    disableAutoFocusItem\n                    disableRestoreFocus={true}\n                    anchorOrigin={menuAnchorOrigin}>\n                    <MenuItem onClick={this.handleCheckUpdates}>{t('UpdateTelegram')}</MenuItem>\n                    <MenuItem onClick={this.handleAppearance}>{t('Appearance')}</MenuItem>\n                    <MenuItem onClick={this.handleLanguage}>{t('Language')}</MenuItem>\n                    <MenuItem onClick={this.handleLogOut}>{t('LogOut')}</MenuItem>\n                </Menu>\n            </>\n        ) : null;\n\n        return (\n            <>\n                <IconButton\n                    aria-owns={anchorEl ? 'simple-menu' : null}\n                    aria-haspopup='true'\n                    className={classes.menuIconButton}\n                    aria-label='Menu'\n                    onClick={this.handleMenuOpen}>\n                    <MenuIcon />\n                </IconButton>\n                {mainMenuControl}\n                <ThemePicker innerRef={ref => (this.themePicker = ref)} />\n                <LanguagePicker ref={ref => (this.languagePicker = ref)} />\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(MainMenuButton);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'recompose';\nimport {\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Button,\n    IconButton\n} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport MainMenuButton from './MainMenuButton';\nimport { debounce, isAuthorizationReady, throttle } from '../../Utils/Common';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport '../ColumnMiddle/Header.css';\n\nconst styles = {\n    headerIconButton: {\n        margin: '8px 12px 8px 0'\n    },\n    dialogText: {\n        whiteSpace: 'pre-wrap'\n    }\n};\n\nclass DialogsHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.searchInput = React.createRef();\n\n        this.state = {\n            authorizationState: ApplicationStore.getAuthorizationState(),\n            open: false\n        };\n\n        this.handleInput = debounce(this.handleInput, 250);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.openSearch && this.props.openSearch !== prevProps.openSearch) {\n            setTimeout(() => {\n                if (this.searchInput.current) {\n                    this.searchInput.current.focus();\n                }\n            }, 250);\n        }\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('updateAuthorizationState', this.onUpdateAuthorizationState);\n    }\n\n    onUpdateAuthorizationState = update => {\n        this.setState({ authorizationState: update.authorization_state });\n    };\n\n    handleLogOut = () => {\n        this.setState({ open: true });\n    };\n\n    handleDone = () => {\n        this.handleClose();\n        TdLibController.logOut();\n    };\n\n    handleClose = () => {\n        this.setState({ open: false });\n    };\n\n    handleSearch = () => {\n        const { onSearch, openSearch } = this.props;\n        const { authorizationState } = this.state;\n        if (!isAuthorizationReady(authorizationState)) return;\n\n        onSearch(!openSearch);\n    };\n\n    handleKeyDown = event => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n        }\n    };\n\n    handleKeyUp = () => {\n        const innerText = this.searchInput.current.innerText;\n        const innerHTML = this.searchInput.current.innerHTML;\n\n        if (innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n            this.searchInput.current.innerHTML = '';\n        }\n\n        ApplicationStore.emit('clientUpdateSearchText', { text: innerText });\n    };\n\n    handlePaste = event => {\n        const plainText = event.clipboardData.getData('text/plain');\n        if (plainText) {\n            event.preventDefault();\n            document.execCommand('insertHTML', false, plainText);\n        }\n    };\n\n    render() {\n        const { classes, onClick, openSearch, t } = this.props;\n        const { open } = this.state;\n\n        const confirmLogoutDialog = open ? (\n            <Dialog transitionDuration={0} open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n                <DialogTitle id='form-dialog-title'>{t('AppName')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText className={classes.dialogText}>{t('AreYouSureLogout')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={this.handleClose} color='primary'>\n                        {t('Cancel')}\n                    </Button>\n                    <Button onClick={this.handleDone} color='primary'>\n                        {t('Ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ) : null;\n\n        return (\n            <div className='header-master'>\n                {!openSearch ? (\n                    <>\n                        <MainMenuButton onLogOut={this.handleLogOut} />\n                        {confirmLogoutDialog}\n                        <div className='header-status grow cursor-pointer' onClick={onClick}>\n                            <span className='header-status-content'>{t('AppName')}</span>\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <div className='header-search-input grow'>\n                            <div\n                                id='header-search-inputbox'\n                                ref={this.searchInput}\n                                placeholder={t('Search')}\n                                key={Date()}\n                                contentEditable\n                                suppressContentEditableWarning\n                                onKeyDown={this.handleKeyDown}\n                                onKeyUp={this.handleKeyUp}\n                                onPaste={this.handlePaste}\n                            />\n                        </div>\n                    </>\n                )}\n                <IconButton\n                    className={classes.headerIconButton}\n                    aria-label={t('Search')}\n                    onMouseDown={this.handleSearch}>\n                    <SpeedDialIcon open={openSearch} icon={<SearchIcon />} openIcon={<CloseIcon />} />\n                </IconButton>\n            </div>\n        );\n    }\n}\n\nDialogsHeader.propTypes = {\n    openSearch: PropTypes.bool.isRequired,\n    onClick: PropTypes.func.isRequired,\n    onSearch: PropTypes.func.isRequired,\n    onSearchTextChange: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles)\n);\n\nexport default enhance(DialogsHeader);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport {\n    getChatTypingString,\n    getChatDraft,\n    getLastMessageSenderName,\n    getLastMessageContent,\n    showChatDraft\n} from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogContentControl.css';\n\nclass DialogContentControl extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== this.props.t) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateUserChatAction', this.onUpdate);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n        ChatStore.removeListener('updateUserChatAction', this.onUpdate);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        const { chatId, t } = this.props;\n\n        if (this.clearHistory) return <div className='dialog-content'>{'\\u00A0'}</div>;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return <div className='dialog-content'>{'\\u00A0'}</div>;\n\n        let contentControl = null;\n        const typingString = getChatTypingString(chatId);\n        if (typingString) {\n            contentControl = <span className='dialog-content-accent'>{typingString}</span>;\n        }\n\n        if (!contentControl) {\n            const draft = getChatDraft(chatId);\n            if (showChatDraft(chatId)) {\n                const text = draft.text || '\\u00A0';\n\n                contentControl = (\n                    <>\n                        <span className='dialog-content-draft'>{t('Draft') + ': '}</span>\n                        {text}\n                    </>\n                );\n            }\n        }\n\n        if (!contentControl) {\n            const content = getLastMessageContent(chat, t) || '\\u00A0';\n            const senderName = getLastMessageSenderName(chat);\n            contentControl = (\n                <>\n                    {senderName && <span className='dialog-content-accent'>{senderName}: </span>}\n                    {content}\n                </>\n            );\n        }\n\n        return <div className='dialog-content'>{contentControl}</div>;\n    }\n}\n\nexport default withTranslation()(DialogContentControl);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    getChatMuteFor,\n    getChatUnreadCount,\n    getChatUnreadMentionCount,\n    getChatUnreadMessageIcon,\n    isChatMuted,\n    showChatDraft\n} from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport './DialogBadgeControl.css';\n\nconst styles = theme => ({\n    dialogBadge: {\n        background: theme.palette.primary.main\n    }\n});\n\nclass DialogBadgeControl extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n        if (nextProps.theme !== this.props.theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatIsMarkedAsUnread', this.onUpdate);\n        ChatStore.on('updateChatIsPinned', this.onUpdate);\n        ChatStore.on('updateChatNotificationSettings', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateChatReadOutbox', this.onUpdate);\n        ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n        ApplicationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatIsMarkedAsUnread', this.onUpdate);\n        ChatStore.removeListener('updateChatIsPinned', this.onUpdate);\n        ChatStore.removeListener('updateChatNotificationSettings', this.onUpdate);\n        ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n        ChatStore.removeListener('updateChatReadOutbox', this.onUpdate);\n        ChatStore.removeListener('updateChatUnreadMentionCount', this.onUpdate);\n        ApplicationStore.removeListener('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (update.chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    onUpdateScopeNotificationSettings = update => {\n        const { chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        switch (update.scope['@type']) {\n            case 'notificationSettingsScopeGroupChats': {\n                if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n                    this.forceUpdate();\n                }\n                break;\n            }\n            case 'notificationSettingsScopePrivateChats': {\n                if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n                    this.forceUpdate();\n                }\n                break;\n            }\n        }\n    };\n\n    render() {\n        if (this.clearHistory) return null;\n\n        const { classes, chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const { draft_message } = chat;\n\n        const unreadMessageIcon = getChatUnreadMessageIcon(chat);\n        const unreadCount = getChatUnreadCount(chat);\n        const unreadMentionCount = getChatUnreadMentionCount(chat);\n        const showUnreadCount = unreadCount > 1 || (unreadCount === 1 && unreadMentionCount < 1);\n        const showDraftChat = showChatDraft(chat.id);\n        const muteClassName = isChatMuted(chat) ? 'dialog-badge-muted' : '';\n\n        return (\n            <>\n                {unreadMessageIcon && !showDraftChat && <i className='dialog-badge-unread' />}\n                {unreadMentionCount && (\n                    <div className={classNames('dialog-badge', classes.dialogBadge)}>\n                        <div className='dialog-badge-mention'>@</div>\n                    </div>\n                )}\n                {showUnreadCount ? (\n                    <div className={classNames(muteClassName, 'dialog-badge', classes.dialogBadge)}>\n                        <span className='dialog-badge-text'>{unreadCount}</span>\n                    </div>\n                ) : chat.is_pinned && !unreadMessageIcon ? (\n                    <i className='dialog-badge-pinned' />\n                ) : null}\n            </>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(DialogBadgeControl);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { getLastMessageDate } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogMetaControl.css';\n\nclass DialogMetaControl extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.on('updateMessageMentionRead', this.onUpdate);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n        ChatStore.removeListener('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.removeListener('updateMessageMentionRead', this.onUpdate);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        if (this.clearHistory) return null;\n\n        const { chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        const date = getLastMessageDate(chat);\n\n        return <>{date && <div className='dialog-meta-date'>{date}</div>}</>;\n    }\n}\nexport default DialogMetaControl;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport ChatTileControl from './ChatTileControl';\nimport DialogContentControl from './DialogContentControl';\nimport DialogBadgeControl from './DialogBadgeControl';\nimport DialogTitleControl from './DialogTitleControl';\nimport DialogMetaControl from './DialogMetaControl';\nimport { openChat } from '../../Actions/Client';\nimport ChatStore from '../../Stores/ChatStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport './DialogControl.css';\n\nconst styles = theme => ({\n    statusRoot: {\n        position: 'absolute',\n        right: 1,\n        bottom: 1,\n        zIndex: 1\n    },\n    statusIcon: {},\n    dialogActive: {\n        color: '#fff', //theme.palette.primary.contrastText,\n        backgroundColor: theme.palette.primary.main,\n        borderRadius: 8,\n        cursor: 'pointer',\n        margin: '0 12px',\n        '& $statusRoot': {\n            background: theme.palette.primary.main\n        }\n    },\n    dialog: {\n        borderRadius: 8,\n        cursor: 'pointer',\n        margin: '0 12px',\n        '&:hover': {\n            backgroundColor: theme.palette.primary.main + '22',\n            '& $statusRoot': {\n                background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n            },\n            '& $statusIcon': {\n                background: theme.palette.primary.main + '22'\n            }\n        }\n    }\n});\n\nclass DialogControl extends Component {\n    constructor(props) {\n        super(props);\n\n        this.dialog = React.createRef();\n\n        const chat = ChatStore.get(this.props.chatId);\n        this.state = {\n            chat: chat\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.theme !== this.props.theme) {\n            return true;\n        }\n\n        if (nextProps.hidden !== this.props.hidden) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    onClientUpdateChatId = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.previousChatId || chatId === update.nextChatId) {\n            this.forceUpdate();\n        }\n    };\n\n    handleSelect = () => {\n        openChat(this.props.chatId);\n    };\n\n    render() {\n        const { classes, chatId, showSavedMessages, hidden } = this.props;\n\n        if (hidden) return null;\n\n        const currentChatId = ApplicationStore.getChatId();\n        const isSelected = currentChatId === chatId;\n\n        return (\n            <div\n                ref={this.dialog}\n                className={classNames(\n                    isSelected ? classes.dialogActive : classes.dialog,\n                    isSelected ? 'dialog-active' : 'dialog'\n                )}\n                onMouseDown={this.handleSelect}>\n                <div className='dialog-wrapper'>\n                    <ChatTileControl\n                        chatId={chatId}\n                        showSavedMessages={showSavedMessages}\n                        showOnline\n                        classes={{ statusRoot: classes.statusRoot, statusIcon: classes.statusIcon }}\n                    />\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            <DialogTitleControl chatId={chatId} />\n                            <DialogMetaControl chatId={chatId} />\n                        </div>\n                        <div className='tile-second-row'>\n                            <DialogContentControl chatId={chatId} />\n                            <DialogBadgeControl chatId={chatId} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDialogControl.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    hidden: PropTypes.bool,\n    showSavedMessages: PropTypes.bool\n};\n\nDialogControl.defaultProps = {\n    hidden: false,\n    showSavedMessages: true\n};\n\nexport default withStyles(styles, { withTheme: true })(DialogControl);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport DialogControl from '../Tile/DialogControl';\nimport { CHAT_SLICE_LIMIT } from '../../Constants';\nimport { loadChatsContent } from '../../Utils/File';\nimport { itemsInView, orderCompare, throttle } from '../../Utils/Common';\nimport ChatStore from '../../Stores/ChatStore';\nimport BasicGroupStore from '../../Stores/BasicGroupStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './DialogsList.css';\n\nclass DialogsList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.hiddenChats = new Map();\n\n        this.listRef = React.createRef();\n\n        this.state = {\n            chats: [],\n            authorizationState: ApplicationStore.getAuthorizationState(),\n            connectionState: ApplicationStore.getConnectionState()\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState.chats !== this.state.chats) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        const { current: list } = this.listRef;\n\n        return { scrollTop: list.scrollTop };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { current: list } = this.listRef;\n        const { scrollTop } = snapshot;\n\n        list.scrollTop = scrollTop;\n    }\n\n    componentDidMount() {\n        this.loadFirstSlice();\n\n        ApplicationStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n        // ApplicationStore.on('updateConnectionState', this.onUpdateConnectionState);\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatIsPinned', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatOrder', this.onUpdateChatOrder);\n        ChatStore.on('clientUpdateLeaveChat', this.onClientUpdateLeaveChat);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('updateAuthorizationState', this.onUpdateAuthorizationState);\n        // ApplicationStore.removeListener('updateConnectionState', this.onUpdateConnectionState);\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatIsPinned', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatOrder', this.onUpdateChatOrder);\n        ChatStore.removeListener('clientUpdateLeaveChat', this.onClientUpdateLeaveChat);\n    }\n\n    onClientUpdateLeaveChat = update => {\n        if (update.inProgress) {\n            this.hiddenChats.set(update.chatId, update.chatId);\n        } else {\n            this.hiddenChats.delete(update.chatId);\n        }\n\n        this.forceUpdate();\n    };\n\n    onUpdateAuthorizationState = update => {\n        const { authorization_state } = update;\n\n        this.setState({ authorizationState: authorization_state }, () => this.loadFirstSlice());\n    };\n\n    onFastUpdatingComplete = update => {\n        this.onLoadNext(true);\n        // this.setState({ chats: [] }, () => this.onLoadNext(true));\n    };\n\n    onUpdateConnectionState = update => {\n        console.log(this);\n        const newConnectionState = update.state;\n        const { connectionState } = this.state;\n\n        this.setState({ connectionState: newConnectionState });\n\n        const updatingCompleted =\n            connectionState &&\n            connectionState['@type'] === 'connectionStateUpdating' &&\n            newConnectionState['@type'] !== 'connectionStateUpdating';\n        if (!updatingCompleted) return;\n\n        const hasSkippedUpdates = ChatStore.skippedUpdates.length > 0;\n        if (!hasSkippedUpdates) return;\n\n        ChatStore.skippedUpdates = [];\n        this.setState({ chats: [] }, () => this.onLoadNext(true));\n    };\n\n    loadFirstSlice = async () => {\n        const { authorizationState } = this.state;\n        if (authorizationState && authorizationState['@type'] === 'authorizationStateReady') {\n            await FileStore.initDB(() => this.onLoadNext());\n        }\n    };\n\n    onUpdateChatOrder = update => {\n        // NOTE: updateChatOrder is primary used to delete chats with order=0\n        // In all other cases use updateChatLastMessage\n\n        if (update.order !== '0') return;\n        const chat = ChatStore.get(update.chat_id);\n        if (!chat) {\n            return;\n        }\n\n        // unselect deleted chat\n        if (update.chat_id === ApplicationStore.getChatId()) {\n            TdLibController.setChatId(0);\n            ApplicationStore.changeChatDetailsVisibility(false);\n        }\n\n        let chatIds = [];\n        for (let i = 0; i < this.state.chats.length; i++) {\n            let chat = ChatStore.get(this.state.chats[i]);\n            if (chat && chat.order !== '0') {\n                switch (chat.type['@type']) {\n                    case 'chatTypeBasicGroup': {\n                        const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n                        if (basicGroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                    case 'chatTypePrivate': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSecret': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSupergroup': {\n                        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                        if (supergroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.reorderChats(chatIds);\n    };\n\n    onUpdate = update => {\n        const { chat_id, order } = update;\n        if (order === '0') return;\n        const chat = ChatStore.get(chat_id);\n        if (!chat || chat.order === '0') {\n            return;\n        }\n\n        const { chats } = this.state;\n\n        let newChatIds = [];\n        if (chats.length > 0) {\n            const existingChat = chats.find(x => x === chat_id);\n            if (!existingChat) {\n                const minChatOrder = ChatStore.get(chats[chats.length - 1]).order;\n                if (orderCompare(minChatOrder, chat.order) === 1) {\n                    return;\n                }\n                newChatIds.push(chat.id);\n            }\n        }\n\n        // get last chat.order values\n        let chatIds = [];\n        for (let i = 0; i < chats.length; i++) {\n            let chat = ChatStore.get(chats[i]);\n            if (chat && chat.order !== '0') {\n                switch (chat.type['@type']) {\n                    case 'chatTypeBasicGroup': {\n                        const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n                        if (basicGroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                    case 'chatTypePrivate': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSecret': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSupergroup': {\n                        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                        if (supergroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.reorderChats(chatIds, newChatIds, () => {\n            this.loadChatContents(newChatIds);\n        });\n    };\n\n    reorderChats(chatIds, newChatIds = [], callback) {\n        const orderedChatIds = chatIds.concat(newChatIds).sort((a, b) => {\n            return orderCompare(ChatStore.get(b).order, ChatStore.get(a).order);\n        });\n\n        if (!DialogsList.isDifferentOrder(this.state.chats, orderedChatIds)) {\n            return;\n        }\n\n        this.setState({ chats: orderedChatIds }, callback);\n    }\n\n    static isDifferentOrder(oldChatIds, newChatIds) {\n        if (oldChatIds.length === newChatIds.length) {\n            for (let i = 0; i < oldChatIds.length; i++) {\n                if (oldChatIds[i] !== newChatIds[i]) return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    handleScroll = () => {\n        const list = this.listRef.current;\n\n        if (list && list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n            this.onLoadNext();\n        }\n    };\n\n    onLoadNext = async (replace = false) => {\n        const { chats } = this.state;\n\n        if (this.loading) return;\n\n        let offsetOrder = '9223372036854775807'; // 2^63\n        let offsetChatId = 0;\n        if (!replace && chats && chats.length > 0) {\n            const chat = ChatStore.get(chats[chats.length - 1]);\n            if (chat) {\n                offsetOrder = chat.order;\n                offsetChatId = chat.id;\n            }\n        }\n\n        this.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'getChats',\n            offset_chat_id: offsetChatId,\n            offset_order: offsetOrder,\n            limit: CHAT_SLICE_LIMIT\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        //TODO: replace result with one-way data flow\n\n        if (result.chat_ids.length > 0 && result.chat_ids[0] === offsetChatId) {\n            result.chat_ids.shift();\n        }\n\n        if (replace) {\n            this.replaceChats(result.chat_ids, () => this.loadChatContents(result.chat_ids));\n        } else {\n            this.appendChats(result.chat_ids, () => this.loadChatContents(result.chat_ids));\n        }\n    };\n\n    loadChatContents(chats) {\n        const store = FileStore.getStore();\n        loadChatsContent(store, chats);\n    }\n\n    appendChats(chats, callback) {\n        if (chats.length === 0) return;\n\n        this.setState({ chats: this.state.chats.concat(chats) }, callback);\n    }\n\n    replaceChats(chats, callback) {\n        this.setState({ chats: chats }, callback);\n    }\n\n    scrollToTop() {\n        const list = this.listRef.current;\n        list.scrollTop = 0;\n    }\n\n    render() {\n        const { chats } = this.state;\n\n        const dialogs = chats.map(x => <DialogControl key={x} chatId={x} hidden={this.hiddenChats.has(x)} />);\n\n        /*<Scrollbars*/\n        /*ref={this.listRef}*/\n        /*onScroll={this.handleScroll}*/\n        /*autoHide*/\n        /*autoHideTimeout={500}*/\n        /*autoHideDuration={300}>*/\n        /*{chats}*/\n        /*</Scrollbars>*/\n\n        return (\n            <div ref={this.listRef} className='dialogs-list' onScroll={this.handleScroll}>\n                {dialogs}\n            </div>\n        );\n    }\n}\n\nexport default DialogsList;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Button from '@material-ui/core/Button';\nimport ApplicationStore from '../../Stores/ApplicationStore';\n\nconst styles = {\n    root: {\n        margin: 0,\n        padding: '24px',\n        width: '100%',\n        borderRadius: 0,\n        color: 'white',\n        maxHeight: '65px'\n    }\n};\n\nclass UpdatePanel extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            newContentAvailable: false\n        };\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateNewContentAvailable', this.onClientUpdateNewContentAvailable);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateNewContentAvailable', this.onClientUpdateNewContentAvailable);\n    }\n\n    onClientUpdateNewContentAvailable = () => {\n        this.setState({ newContentAvailable: true });\n    };\n\n    handleUpdate = () => {\n        if (this.handled) return;\n\n        this.handled = true;\n        setTimeout(() => {\n            window.location.reload();\n        }, 250);\n    };\n\n    render() {\n        const { newContentAvailable } = this.state;\n        const { classes } = this.props;\n\n        const content = newContentAvailable ? (\n            <Button variant='contained' color='primary' className={classes.root} onClick={this.handleUpdate}>\n                Update\n            </Button>\n        ) : null;\n\n        return <>{content}</>;\n    }\n}\n\nexport default withStyles(styles)(UpdatePanel);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Search from './Search/Search';\nimport DialogsHeader from './DialogsHeader';\nimport DialogsList from './DialogsList';\nimport UpdatePanel from './UpdatePanel';\nimport { borderStyle } from '../Theme';\nimport { openChat } from '../../Actions/Client';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport './Dialogs.css';\n\nclass Dialogs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.dialogsList = React.createRef();\n\n        this.state = {\n            isChatDetailsVisible: ApplicationStore.isChatDetailsVisible,\n            openSearch: false,\n            searchChatId: 0,\n            searchText: null\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState.isChatDetailsVisible !== this.state.isChatDetailsVisible) {\n            return true;\n        }\n\n        if (nextState.openSearch !== this.state.openSearch) {\n            return true;\n        }\n\n        if (nextState.searchChatId !== this.state.searchChatId) {\n            return true;\n        }\n\n        if (nextState.searchText !== this.state.searchText) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateChatDetailsVisibility', this.onClientUpdateChatDetailsVisibility);\n        ApplicationStore.on('clientUpdateSearchChat', this.onClientUpdateSearchChat);\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateThemeChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateChatDetailsVisibility', this.onClientUpdateChatDetailsVisibility);\n        ApplicationStore.removeListener('clientUpdateSearchChat', this.onClientUpdateSearchChat);\n        ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateThemeChange);\n    }\n\n    onClientUpdateThemeChange = update => {\n        this.forceUpdate();\n    };\n\n    onClientUpdateChatDetailsVisibility = update => {\n        this.setState({\n            isChatDetailsVisible: ApplicationStore.isChatDetailsVisible\n        });\n    };\n\n    onClientUpdateSearchChat = update => {\n        this.setState({\n            openSearch: true,\n            searchChatId: update.chatId,\n            searchText: null\n        });\n    };\n\n    handleHeaderClick = () => {\n        this.dialogsList.current.scrollToTop();\n    };\n\n    handleSearch = visible => {\n        this.setState({\n            openSearch: visible,\n            searchChatId: 0,\n            searchText: null\n        });\n    };\n\n    handleSelectMessage = (chatId, messageId, openSearch) => {\n        const { onSelectChat } = this.props;\n\n        openChat(chatId, messageId);\n\n        onSelectChat(chatId, messageId);\n\n        const searchChatId = openSearch ? this.state.searchChatId : 0;\n        const searchText = openSearch ? this.state.searchText : null;\n\n        this.setState({\n            openSearch: openSearch,\n            searchChatId: searchChatId,\n            searchText: searchText\n        });\n    };\n\n    handleClose = () => {\n        this.setState({\n            openSearch: false,\n            searchChatId: 0,\n            searchText: null\n        });\n    };\n\n    handleSearchTextChange = text => {\n        this.setState({\n            searchText: text\n        });\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { isChatDetailsVisible, openSearch, searchChatId, searchText } = this.state;\n\n        return (\n            <div\n                className={classNames(classes.borderColor, 'dialogs', {\n                    'dialogs-third-column': isChatDetailsVisible\n                })}>\n                <DialogsHeader\n                    openSearch={openSearch}\n                    onClick={this.handleHeaderClick}\n                    onSearch={this.handleSearch}\n                    onSearchTextChange={this.handleSearchTextChange}\n                />\n                <div className='dialogs-content'>\n                    <DialogsList ref={this.dialogsList} />\n                    {openSearch && (\n                        <Search\n                            chatId={searchChatId}\n                            text={searchText}\n                            onSelectMessage={this.handleSelectMessage}\n                            onClose={this.handleClose}\n                        />\n                    )}\n                </div>\n                <UpdatePanel />\n            </div>\n        );\n    }\n}\n\nDialogs.propTypes = {\n    onSelectChat: PropTypes.func.isRequired\n};\n\nexport default withStyles(borderStyle)(Dialogs);\n"],"sourceRoot":""}