{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Utils/Animatior.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","nextProps","nextState","nextContext","this","props","info","theme","classes","onSelect","onMouseDown","onMouseEnter","title","items","stickers","map","x","i","className","classNames","stickerSetItem","key","sticker","id","data-sticker-id","onClick","Sticker","autoplay","blur","displaySize","STICKER_SMALL_DISPLAY_SIZE","preview","source","StickerSourceEnum","PICKER","React","Component","withStyles","backgroundColor","palette","background","paper","color","text","primary","width","height","padding","boxSizing","type","borderRadius","withTheme","Animator","duration","options","start","stopped","requestAnimationFrame","startAnim","timeStamp","end","draw","now","every","to","last","p","Math","min","val","outSine","forEach","from","func","stop","cancelAnimationFrame","n","sin","PI","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","style","left","replace","anchorTo","ANIMATION_DURATION_200MS","abs","sign","console","log","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","removeListener","prevProps","prevState","snapshot","play","PICKER_HEADER","openMedia","borderColor","ref","onWheel","accentBackgroundDark","borderStyle","accentStyles","StickersPicker","onUpdateInstalledStickerSets","onUpdateRecentStickers","reloadRecentContent","a","TdLibController","send","is_attached","recent","scrollTop","loadContent","stickerSets","sets","is_masks","result","promises","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","firstOffsetTop","pos","element","diff","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concatSets","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","Date","timestamp","showPreview","cancelSend","setTimeout","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","Map","debounce","throttle","off","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","EmojiPickerButton","onClientUpdateChange","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","handleEmojiClick","tab","handleStickersClick","stickersPicker","handleStickerSend","handleStickerPreview","emojiPickerRef","ApplicationStore","LocalizationStore","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","dark","native","isAppleDevice","overflowX","rel","href","iconButton","aria-label","onMouseLeave","pickerRoot","pickerRootOpened","headerButton","StickerPreview","margin","flex","zIndex","modal","shape","boxShadow","shadows","bottom","display"],"mappings":"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","file":"static/js/5.9978bbf8.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nconst styles = theme => ({\n    title: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary\n    },\n    stickerSetItem: {\n        width: STICKER_SMALL_DISPLAY_SIZE,\n        height: STICKER_SMALL_DISPLAY_SIZE,\n        padding: 3,\n        boxSizing: 'border-box',\n        '&:hover': {\n            background: theme.palette.type === 'dark' ? '#303030' : '#f4f4f4',\n            borderRadius: 6\n        }\n    }\n});\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info, theme } = this.props;\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { classes, info, onSelect, onMouseDown, onMouseEnter } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className={classNames('sticker-set-item', classes.stickerSetItem)}\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className={classNames('sticker-set-title', classes.title)}>\n                    <span>{title}</span>\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles, { withTheme: true })(StickerSet);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass Animator {\n    constructor(duration, options = []) {\n        this.options = options;\n        this.duration = duration;\n    }\n\n    static outSine(n) {\n        return Math.sin((n * Math.PI) / 2);\n    }\n\n    start = () => {\n        this.stopped = false;\n        this.id = requestAnimationFrame(this.startAnim);\n    };\n\n    startAnim = timeStamp => {\n        const { start, duration } = this;\n\n        this.start = timeStamp;\n        this.end = start + duration;\n        this.draw(timeStamp);\n    };\n\n    draw = now => {\n        const { stopped, duration, start, options } = this;\n\n        if (now - start > duration && options.every(x => x.to === x.last)) {\n            this.stopped = true;\n        }\n\n        if (stopped) return;\n\n        const time = Math.min(now - start, duration);\n        const p = time / duration;\n        const val = Animator.outSine(p);\n\n        options.forEach(x => {\n            const { from, to, func } = x;\n            x.last = from + (to - from) * val;\n            func(x.last);\n        });\n\n        this.id = requestAnimationFrame(this.draw);\n    };\n\n    stop = () => {\n        this.stopped = true;\n        cancelAnimationFrame(this.id);\n    };\n}\n\nexport default Animator;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { accentStyles, borderStyle } from '../Theme';\nimport { ANIMATION_DURATION_200MS } from '../../Constants';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nconst styles = theme => ({\n    ...borderStyle(theme),\n    ...accentStyles(theme)\n});\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { position: 0 };\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.removeListener('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 44 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 44;\n\n        if (animator) {\n            animator.stop();\n        }\n        this.animator = new Animator(ANIMATION_DURATION_200MS, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n        console.log('[anim] to, from', anchorTo, anchorFrom);\n        this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { classes, stickers } = this.props;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={32}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className={classNames('stickers-picker-header', classes.borderColor)}>\n                <div ref={this.scrollRef} className='stickers-picker-header-scroll' onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>{items}</div>\n                    <div\n                        ref={this.anchorRef}\n                        className={classNames('stickers-picker-header-anchor', classes.accentBackgroundDark)}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(StickersPickerHeader);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { compose } from 'recompose';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        // const { recent, sets, stickerSets } = this.state;\n        //\n        // this.loadContent(recent, null, null);\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    reloadRecentContent = async () => {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    };\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let firstOffsetTop = 0;\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n\n                    const offsetTop = node.offsetTop - firstOffsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n        this.setsLength += result.length;\n        let concatSets = sets.concat(result);\n        this.setState({ sets: concatSets });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    render() {\n        const { t } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo = recent && recent.stickers.length > 0 ? {\n            stickers: recent.stickers,\n            title: t('RecentStickers')\n        } : null;\n\n        return (\n            <div className='stickers-picker'>\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    { Boolean(recentInfo) && (\n                        <StickerSet\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nconst styles = theme => ({\n    iconButton: {\n        margin: '8px 0px'\n    },\n    headerButton: {\n        borderRadius: 0,\n        flex: '50%'\n    },\n    pickerRoot: {\n        zIndex: theme.zIndex.modal,\n        width: 338,\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary,\n        borderRadius: theme.shape.borderRadius,\n        boxShadow: theme.shadows[8],\n        position: 'absolute',\n        bottom: 80,\n        display: 'none'\n    },\n    pickerRootOpened: {\n        display: 'block'\n    }\n});\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.removeListener('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n        if (tab === 1) {\n            stickersPicker.scrollTop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { classes, theme, t } = this.props;\n        const { open, tab, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className={classes.iconButton}\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames(classes.pickerRoot, { [classes.pickerRootOpened]: open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}